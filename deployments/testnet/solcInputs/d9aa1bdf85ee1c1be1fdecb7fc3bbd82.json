{
  "language": "Solidity",
  "sources": {
    "contracts/FeeReceiver.sol": {
      "content": "pragma solidity =0.6.6;\n//SPDX-License-Identifier: Unlicense\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./interfaces/IPancakeRouter02.sol\";\nimport \"./interfaces/IWETH.sol\";\n\ncontract FeeReceiver is Pausable, Ownable {\n    using SafeMath for uint256;\n\n    event BuybackRateUpdated(uint256 newBuybackRate);\n    event RevenueReceiverUpdated(address newRevenueReceiver);\n    event RouterWhitelistUpdated(address router, bool status);\n    event BuybackExecuted(uint256 amountBuyback, uint256 amountRevenue);\n\n    uint256 public constant FEE_DENOMINATOR = 10000;\n    address internal constant ZERO_ADDRESS = address(0x000000000000000000000000000000000000dEaD);\n    IPancakeRouter02 public pancakeRouter;\n    address payable public revenueReceiver;\n    address public SYA;\n    address public WBNB;\n    uint256 buybackRate;\n    mapping(address => bool) public routerWhitelist;\n\n    constructor(\n        IPancakeRouter02 _pancakeRouterV2,\n        address _SYA,\n        address _WBNB,\n        address payable _revenueReceiver,\n        uint256 _buybackRate\n    ) public {\n        pancakeRouter = _pancakeRouterV2;\n        SYA = _SYA;\n        WBNB = _WBNB;\n        revenueReceiver = _revenueReceiver;\n        buybackRate = _buybackRate;\n        routerWhitelist[address(pancakeRouter)] = true;\n    }\n\n    /**\n     * @dev executes the buyback, buys SYA & sends revenue to the revenueReceiver by the defined rate\n     */\n    function executeBuyback() external whenNotPaused() {\n        require(address(this).balance > 0, \"FeeReceiver: No balance for buyback\");\n        address[] memory path = new address[](2);\n        path[0] = WBNB;\n        path[1] = SYA;\n\n        uint256 balance = address(this).balance;\n        uint256 amountBuyback = balance.mul(buybackRate).div(FEE_DENOMINATOR);\n        uint256 amountRevenue = balance.sub(amountBuyback);\n\n        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountBuyback}(0, path, ZERO_ADDRESS, block.timestamp);\n        TransferHelper.safeTransferETH(revenueReceiver, amountRevenue);\n        emit BuybackExecuted(amountBuyback, amountRevenue);\n    }\n\n    /**\n     * @dev converts collected tokens from fees to BNB to execute buybacks\n     */\n    function convertToBnb(\n        address _router,\n        IERC20 _token,\n        bool _fee\n    ) public whenNotPaused() {\n        require(routerWhitelist[_router], \"FeeReceiver: Router not whitelisted\");\n        address[] memory path = new address[](2);\n        path[0] = address(_token);\n        path[1] = WBNB;\n\n        uint256 balance = _token.balanceOf(address(this));\n        TransferHelper.safeApprove(address(_token), address(pancakeRouter), balance);\n        if (_fee) {\n            IPancakeRouter02(_router).swapExactTokensForETHSupportingFeeOnTransferTokens(balance, 0, path, address(this), block.timestamp);\n        } else {\n            IPancakeRouter02(_router).swapExactTokensForETH(balance, 0, path, address(this), block.timestamp);\n        }\n    }\n\n    /**\n     * @dev converts WBNB to BNB\n     */\n    function unwrapWBNB() public whenNotPaused() {\n        uint256 balance = IWETH(WBNB).balanceOf(address(this));\n        require(balance > 0, \"FeeReceiver: Nothing to unwrap\");\n        IWETH(WBNB).withdraw(balance);\n    }\n\n    /**\n     * @dev lets the owner update update the router whitelist\n     */\n    function updateRouterWhiteliste(address _router, bool _status) external onlyOwner {\n        routerWhitelist[_router] = _status;\n        emit RouterWhitelistUpdated(_router, _status);\n    }\n\n    /**\n     * @dev lets the owner update the buyback rate\n     */\n    function updateBuybackRate(uint256 _newBuybackRate) external onlyOwner {\n        buybackRate = _newBuybackRate;\n        emit BuybackRateUpdated(_newBuybackRate);\n    }\n\n    /**\n     * @dev lets the owner update the buyback rate\n     */\n    function updateRevenueReceiver(address payable _newRevenueReceiver) external onlyOwner {\n        revenueReceiver = _newRevenueReceiver;\n        emit RevenueReceiverUpdated(_newRevenueReceiver);\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Withdraw BNB that somehow ended up in the contract.\n     */\n    function withdrawBnb(address payable to, uint256 amount) external onlyOwner {\n        to.transfer(amount);\n    }\n\n    /**\n     * @dev Withdraw any erc20 compliant tokens that\n     * somehow ended up in the contract.\n     */\n    function withdrawErc20Token(\n        address token,\n        address to,\n        uint256 amount\n    ) external onlyOwner {\n        IERC20(token).transfer(to, amount);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-newer\npragma solidity =0.6.6;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: APPROVE_FAILED\");\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FAILED\");\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n}\n"
    },
    "contracts/interfaces/IPancakeRouter02.sol": {
      "content": "pragma solidity >=0.6.2;\n//SPDX-License-Identifier: Unlicense\n\nimport \"./IPancakeRouter01.sol\";\n\ninterface IPancakeRouter02 is IPancakeRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\n//SPDX-License-Identifier: Unlicense\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n\n    function approve(address _spender, uint256 _amount) external returns (bool);\n\n    function balanceOf(address _account) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IPancakeRouter01.sol": {
      "content": "pragma solidity >=0.6.2;\n\n//SPDX-License-Identifier: Unlicense\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/FloozRouter.sol": {
      "content": "pragma solidity =0.6.6;\n\n// SPDX-License-Identifier: UNLICENSED\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./libraries/PancakeLibrary.sol\";\nimport \"./interfaces/IReferrals.sol\";\nimport \"./interfaces/IWETH.sol\";\n\ncontract FloozRouter is Ownable, Pausable {\n    using SafeMath for uint256;\n    event SwapFeeUpdated(uint8 swapFee);\n    event ReferralRewardRateUpdated(uint16 referralRewardRate);\n    event ReferralsActivatedUpdated(bool activated);\n    event FeeReceiverUpdated(address feeReceiver);\n    event BalanceThresholdUpdated(uint256 balanceThreshold);\n    event ReferralAnchorCreated(address indexed user, address indexed referee);\n    event ReferralRewardPaid(address from, address indexed to, address tokenOut, address tokenReward, uint256 amount);\n\n    uint256 public constant FEE_DENOMINATOR = 10000;\n    address public immutable WETH;\n    bytes internal pancakeInitCodeV1;\n    bytes internal pancakeInitCodeV2;\n    address public pancakeFactoryV1;\n    address public pancakeFactoryV2;\n    IERC20 public saveYourAssetsToken;\n    uint256 public balanceThreshold;\n    address public feeReceiver;\n    uint8 public swapFee;\n    uint16 public referralRewardRate;\n    bool public referralsActivated;\n\n    // stores the address that refered this user\n    mapping(address => address) public referralAnchor;\n\n    modifier isValidFactory(address factory) {\n        require(factory == pancakeFactoryV1 || factory == pancakeFactoryV2, \"FloozRouter: invalid factory\");\n        _;\n    }\n\n    constructor(\n        address _WETH,\n        uint8 _swapFee,\n        uint16 _referralRewardRate,\n        address _feeReceiver,\n        uint256 _balanceThreshold,\n        IERC20 _saveYourAssetsToken,\n        address _pancakeFactoryV1,\n        address _pancakeFactoryV2,\n        bytes memory _pancakeInitCodeV1,\n        bytes memory _pancakeInitCodeV2\n    ) public {\n        WETH = _WETH;\n        swapFee = _swapFee;\n        referralRewardRate = _referralRewardRate;\n        feeReceiver = _feeReceiver;\n        saveYourAssetsToken = _saveYourAssetsToken;\n        balanceThreshold = _balanceThreshold;\n        pancakeFactoryV1 = _pancakeFactoryV1;\n        pancakeFactoryV2 = _pancakeFactoryV2;\n        pancakeInitCodeV1 = _pancakeInitCodeV1;\n        pancakeInitCodeV2 = _pancakeInitCodeV2;\n        referralsActivated = true;\n    }\n\n    receive() external payable {}\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(\n        address factory,\n        uint256[] memory amounts,\n        address[] memory path,\n        address _to\n    ) internal {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\n            uint256 amountOut = amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\n            address to = i < path.length - 2 ? _pairFor(factory, output, path[i + 2]) : _to;\n            IPancakePair(_pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function swapExactETHForTokens(\n        address factory,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address referee\n    ) external payable whenNotPaused() isValidFactory(factory) returns (uint256[] memory amounts) {\n        require(path[0] == WETH, \"FloozRouter: INVALID_PATH\");\n        referee = _getReferee(referee);\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(msg.value, referee != address(0));\n        amounts = _getAmountsOut(factory, swapAmount, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        IWETH(WETH).deposit{value: swapAmount}();\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(factory, amounts, path, msg.sender);\n\n        if (feeAmount > 0) {\n            _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\n        }\n    }\n\n    // **** SWAP (supporting fee-on-transfer tokens) ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swapSupportingFeeOnTransferTokens(\n        address factory,\n        address[] memory path,\n        address _to\n    ) internal {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\n            IPancakePair pair = IPancakePair(_pairFor(factory, input, output));\n            uint256 amountInput;\n            uint256 amountOutput;\n            {\n                // scope to avoid stack too deep errors\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\n                amountOutput = _getAmountOut(amountInput, reserveInput, reserveOutput);\n            }\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\n            address to = i < path.length - 2 ? _pairFor(factory, output, path[i + 2]) : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        address factory,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address referee\n    ) external whenNotPaused() isValidFactory(factory) {\n        require(path[path.length - 1] == WETH, \"FloozRouter: BNB has to be the last path item\");\n        referee = _getReferee(referee);\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amountIn);\n        _swapSupportingFeeOnTransferTokens(factory, path, address(this));\n        uint256 amountOut = IERC20(WETH).balanceOf(address(this));\n        require(amountOut >= amountOutMin, \"FloozRouter: slippage setting to low\");\n        IWETH(WETH).withdraw(amountOut);\n        (uint256 amountWithdraw, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amountOut, referee != address(0));\n        TransferHelper.safeTransferETH(msg.sender, amountWithdraw);\n\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\n    }\n\n    function swapExactTokensForTokens(\n        address factory,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address referee\n    ) external whenNotPaused() isValidFactory(factory) returns (uint256[] memory amounts) {\n        referee = _getReferee(referee);\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amountIn, referee != address(0));\n        amounts = _getAmountsOut(factory, swapAmount, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(factory, amounts, path, msg.sender);\n\n        if (feeAmount > 0) _withdrawFeesAndRewards(path[0], path[path.length - 1], referee, feeAmount, referralReward);\n    }\n\n    function swapExactTokensForETH(\n        address factory,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address referee\n    ) external whenNotPaused() isValidFactory(factory) returns (uint256[] memory amounts) {\n        require(path[path.length - 1] == WETH, \"FloozRouter: INVALID_PATH\");\n        referee = _getReferee(referee);\n        amounts = _getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(factory, amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        (uint256 amountOut, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\n            amounts[amounts.length - 1],\n            referee != address(0)\n        );\n        TransferHelper.safeTransferETH(msg.sender, amountOut);\n\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\n    }\n\n    function swapETHForExactTokens(\n        address factory,\n        uint256 amountOut,\n        address[] calldata path,\n        address referee\n    ) external payable whenNotPaused() isValidFactory(factory) returns (uint256[] memory amounts) {\n        require(path[0] == WETH, \"FloozRouter: INVALID_PATH\");\n        referee = _getReferee(referee);\n        amounts = _getAmountsIn(factory, amountOut, path);\n        (, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amounts[0], referee != address(0));\n        require(amounts[0].add(feeAmount).add(referralReward) <= msg.value, \"FloozRouter: EXCESSIVE_INPUT_AMOUNT\");\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(factory, amounts, path, msg.sender);\n\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\n\n        // refund dust eth, if any\n        if (msg.value > amounts[0].add(feeAmount).add(referralReward))\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0].add(feeAmount).add(referralReward));\n    }\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        address factory,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address referee\n    ) external whenNotPaused() isValidFactory(factory) {\n        referee = _getReferee(referee);\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amountIn, referee != address(0));\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), swapAmount);\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(msg.sender);\n        _swapSupportingFeeOnTransferTokens(factory, path, msg.sender);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(msg.sender).sub(balanceBefore) >= amountOutMin,\n            \"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n\n        if (feeAmount > 0) _withdrawFeesAndRewards(path[0], path[path.length - 1], referee, feeAmount, referralReward);\n    }\n\n    function swapTokensForExactTokens(\n        address factory,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address referee\n    ) external whenNotPaused() isValidFactory(factory) returns (uint256[] memory amounts) {\n        referee = _getReferee(referee);\n        amounts = _getAmountsIn(factory, amountOut, path);\n        (, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amounts[0], referee != address(0));\n        require(amounts[0].add(feeAmount).add(referralReward) <= amountInMax, \"FloozRouter: EXCESSIVE_INPUT_AMOUNT\");\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(factory, amounts, path, msg.sender);\n\n        if (feeAmount > 0) _withdrawFeesAndRewards(path[0], path[path.length - 1], referee, feeAmount, referralReward);\n    }\n\n    function swapTokensForExactETH(\n        address factory,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address referee\n    ) external whenNotPaused() isValidFactory(factory) returns (uint256[] memory amounts) {\n        require(path[path.length - 1] == WETH, \"FloozRouter: INVALID_PATH\");\n        referee = _getReferee(referee);\n        amounts = _getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, \"FloozRouter: EXCESSIVE_INPUT_AMOUNT\");\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\n        _swap(factory, amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\n            amounts[amounts.length - 1],\n            referee != address(0)\n        );\n\n        TransferHelper.safeTransferETH(msg.sender, swapAmount);\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\n    }\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        address factory,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address referee\n    ) external payable whenNotPaused() isValidFactory(factory) {\n        require(path[0] == WETH, \"FloozRouter: INVALID_PATH\");\n        referee = _getReferee(referee);\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(msg.value, referee != address(0));\n        IWETH(WETH).deposit{value: swapAmount}();\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), swapAmount));\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(msg.sender);\n        _swapSupportingFeeOnTransferTokens(factory, path, msg.sender);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(msg.sender).sub(balanceBefore) >= amountOutMin,\n            \"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\n    }\n\n    function _getReferee(address referee) internal returns (address) {\n        address sender = msg.sender;\n        if (referralAnchor[sender] == address(0)) {\n            referralAnchor[sender] = referee;\n            emit ReferralAnchorCreated(sender, referee);\n        }\n        return referralAnchor[sender];\n    }\n\n    function _calculateFeesAndRewards(uint256 amount, bool isReferral)\n        internal\n        view\n        returns (\n            uint256 swapAmount,\n            uint256 feeAmount,\n            uint256 referralReward\n        )\n    {\n        if (userAboveBalanceThreshold(msg.sender)) {\n            referralReward = 0;\n            feeAmount = 0;\n            swapAmount = amount;\n        } else {\n            uint256 fees = amount.mul(swapFee).div(FEE_DENOMINATOR);\n            swapAmount = amount.sub(fees);\n            if (isReferral && referralsActivated) {\n                referralReward = fees.mul(referralRewardRate).div(FEE_DENOMINATOR);\n                feeAmount = amount.sub(swapAmount).sub(referralReward);\n            } else {\n                referralReward = 0;\n                feeAmount = fees;\n            }\n        }\n    }\n\n    function userAboveBalanceThreshold(address _account) public view returns (bool) {\n        return saveYourAssetsToken.balanceOf(_account) >= balanceThreshold;\n    }\n\n    function getUserFee(address user) public view returns (uint256) {\n        saveYourAssetsToken.balanceOf(user) >= balanceThreshold ? 0 : swapFee;\n    }\n\n    function updateSwapFee(uint8 newSwapFee) external onlyOwner {\n        swapFee = newSwapFee;\n        emit SwapFeeUpdated(newSwapFee);\n    }\n\n    function updateReferralRewardRate(uint16 newReferralRewardRate) external onlyOwner {\n        referralRewardRate = newReferralRewardRate;\n        emit ReferralRewardRateUpdated(newReferralRewardRate);\n    }\n\n    function updateFeeReceiver(address newFeeReceiver) external onlyOwner {\n        feeReceiver = newFeeReceiver;\n        emit FeeReceiverUpdated(newFeeReceiver);\n    }\n\n    function updateBalanceThreshold(uint256 newBalanceThreshold) external onlyOwner {\n        balanceThreshold = newBalanceThreshold;\n        emit BalanceThresholdUpdated(balanceThreshold);\n    }\n\n    function updateReferralsActivated(bool newReferralsActivated) external onlyOwner {\n        referralsActivated = newReferralsActivated;\n        emit ReferralsActivatedUpdated(newReferralsActivated);\n    }\n\n    function getUserReferee(address user) external view returns (address) {\n        return referralAnchor[user];\n    }\n\n    function hasUserReferre(address user) external view returns (bool) {\n        return referralAnchor[user] != address(0);\n    }\n\n    /**\n     * @dev Withdraw BNB that somehow ended up in the contract.\n     */\n    function withdrawBnb(address payable to, uint256 amount) external onlyOwner {\n        to.transfer(amount);\n    }\n\n    /**\n     * @dev Withdraw any erc20 compliant tokens that\n     * somehow ended up in the contract.\n     */\n    function withdrawErc20Token(\n        address token,\n        address to,\n        uint256 amount\n    ) external onlyOwner {\n        IERC20(token).transfer(to, amount);\n    }\n\n    function _withdrawFeesAndRewards(\n        address tokenReward,\n        address tokenOut,\n        address referee,\n        uint256 feeAmount,\n        uint256 referralReward\n    ) internal {\n        if (tokenReward == address(0)) {\n            TransferHelper.safeTransferETH(feeReceiver, feeAmount);\n            if (referralReward > 0) {\n                TransferHelper.safeTransferETH(referee, referralReward);\n            }\n        } else {\n            TransferHelper.safeTransferFrom(tokenReward, msg.sender, feeReceiver, feeAmount);\n            if (referralReward > 0) {\n                TransferHelper.safeTransferFrom(tokenReward, msg.sender, referee, referralReward);\n            }\n        }\n        emit ReferralRewardPaid(msg.sender, referee, tokenOut, tokenReward, referralReward);\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function _getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal view returns (uint256 amountOut) {\n        require(amountIn > 0, \"FloozRouter: INSUFFICIENT_INPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"FloozRouter: INSUFFICIENT_LIQUIDITY\");\n        uint256 amountInWithFee = amountIn.mul((9975 - getUserFee(msg.sender)));\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(10000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function _getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal view returns (uint256 amountIn) {\n        require(amountOut > 0, \"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"FloozRouter: INSUFFICIENT_LIQUIDITY\");\n        uint256 numerator = reserveIn.mul(amountOut).mul(10000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(9975 - getUserFee(msg.sender));\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function _getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"FloozRouter: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = _getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = _getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function _getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"FloozRouter: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = _getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = _getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // fetches and sorts the reserves for a pair\n    function _getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = PancakeLibrary.sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(_pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function _pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (address pair) {\n        (address token0, address token1) = PancakeLibrary.sortTokens(tokenA, tokenB);\n        bytes memory initcode = factory == pancakeFactoryV1 ? pancakeInitCodeV1 : pancakeInitCodeV2;\n        pair = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex\"ff\",\n                        factory,\n                        keccak256(abi.encodePacked(token0, token1)),\n                        initcode // init code hash\n                    )\n                )\n            )\n        );\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/libraries/PancakeLibrary.sol": {
      "content": "pragma solidity >=0.5.0;\n//SPDX-License-Identifier: Unlicense\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ninterface IPancakePair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\nlibrary PancakeLibrary {\n    using SafeMath for uint256;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"PancakeLibrary: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), \"PancakeLibrary: ZERO_ADDRESS\");\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"PancakeLibrary: INSUFFICIENT_AMOUNT\");\n        require(reserveA > 0 && reserveB > 0, \"PancakeLibrary: INSUFFICIENT_LIQUIDITY\");\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"PancakeLibrary: INSUFFICIENT_LIQUIDITY\");\n        uint256 amountInWithFee = amountIn.mul(998);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"PancakeLibrary: INSUFFICIENT_LIQUIDITY\");\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(998);\n        amountIn = (numerator / denominator).add(1);\n    }\n}\n"
    },
    "contracts/interfaces/IReferrals.sol": {
      "content": "pragma solidity =0.6.6;\n\n//SPDX-License-Identifier: Unlicense\n\ninterface IReferrals {\n    function registerReferral(\n        address _referee,\n        address _token,\n        uint256 _amount\n    ) external payable;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}