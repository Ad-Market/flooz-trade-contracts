{
  "address": "0x47794C2AA8C6C80B36e8a111893193F61c0b23A9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_swapFee",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_balanceThreshold",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_saveYourAssetsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pancakeFactoryV1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pancakeFactoryV2",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_pancakeInitCodeV1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_pancakeInitCodeV2",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceThreshold",
          "type": "uint256"
        }
      ],
      "name": "BalanceThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeReceiver",
          "type": "address"
        }
      ],
      "name": "FeeReceiverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "swapFee",
          "type": "uint8"
        }
      ],
      "name": "SwapFeeUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeFactoryV1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeFactoryV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saveYourAssetsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactNativeForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactNativeForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForNative",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForNativeSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapNativeForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactNative",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBalanceThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateBalanceThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeReceiver",
          "type": "address"
        }
      ],
      "name": "updateFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newSwapFee",
          "type": "uint8"
        }
      ],
      "name": "updateSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb6614619da5adc5909035a4c419f6e9ee2d8c8866a0f4d5a6ec4869058a44a2c",
  "receipt": {
    "to": null,
    "from": "0xF7b95Da46b65683B44b11fef24C8BC7739da04Ac",
    "contractAddress": "0x47794C2AA8C6C80B36e8a111893193F61c0b23A9",
    "transactionIndex": 0,
    "gasUsed": "5243949",
    "logsBloom": "0x
    "blockHash": "0x63d3549c40310c20152c54cc31fae6cf15c0a89ef712482f4af7828dee88b484",
    "transactionHash": "0xb6614619da5adc5909035a4c419f6e9ee2d8c8866a0f4d5a6ec4869058a44a2c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9548535,
        "transactionHash": "0xb6614619da5adc5909035a4c419f6e9ee2d8c8866a0f4d5a6ec4869058a44a2c",
        "address": "0x47794C2AA8C6C80B36e8a111893193F61c0b23A9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f7b95da46b65683b44b11fef24c8bc7739da04ac"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x63d3549c40310c20152c54cc31fae6cf15c0a89ef712482f4af7828dee88b484"
      }
    ],
    "blockNumber": 9548535,
    "cumulativeGasUsed": "5243949",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xae13d989dac2f0debff460ac112a837c89baa7cd",
    10,
    "0xF7b95Da46b65683B44b11fef24C8BC7739da04Ac",
    "10000000000000",
    "0x8884ccE491A4a1b5E7A73CB850c28ec6C6394944",
    "0x6725F303b657a9451d8BA641348b6761A6CC7a17",
    "0x6725F303b657a9451d8BA641348b6761A6CC7a17",
    "0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66",
    "0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66"
  ],
  "solcInputHash": "5479d61b9d3fd05aa77be46e65557776",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_swapFee\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_saveYourAssetsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeFactoryV1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeFactoryV2\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_pancakeInitCodeV1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_pancakeInitCodeV2\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceThreshold\",\"type\":\"uint256\"}],\"name\":\"BalanceThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"FeeReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"swapFee\",\"type\":\"uint8\"}],\"name\":\"SwapFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeFactoryV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeFactoryV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveYourAssetsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactNativeForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactNativeForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForNative\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForNativeSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapNativeForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactNative\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalanceThreshold\",\"type\":\"uint256\"}],\"name\":\"updateBalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newSwapFee\",\"type\":\"uint8\"}],\"name\":\"updateSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/SaveYourPancakeRouter.sol\":\"SaveYourPancakeRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"contracts/SaveYourPancakeRouter.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// SPDX-License-Identifier: UNLICENSED\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/PancakeLibrary.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract SaveYourPancakeRouter is Ownable {\\n    using SafeMath for uint256;\\n    event SwapFeeUpdated(uint8 swapFee);\\n    event FeeReceiverUpdated(address feeReceiver);\\n    event BalanceThresholdUpdated(uint256 balanceThreshold);\\n\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n    address public immutable WETH;\\n    bytes internal pancakeInitCodeV1;\\n    bytes internal pancakeInitCodeV2;\\n    address public pancakeFactoryV1;\\n    address public pancakeFactoryV2;\\n    IERC20 public saveYourAssetsToken;\\n    uint256 public balanceThreshold;\\n    address public feeReceiver;\\n    uint8 public swapFee;\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"SaveYourPancake: deadline for trade passed\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _WETH,\\n        uint8 _swapFee,\\n        address _feeReceiver,\\n        uint256 _balanceThreshold,\\n        IERC20 _saveYourAssetsToken,\\n        address _pancakeFactoryV1,\\n        address _pancakeFactoryV2,\\n        bytes memory _pancakeInitCodeV1,\\n        bytes memory _pancakeInitCodeV2\\n    ) public {\\n        WETH = _WETH;\\n        swapFee = _swapFee;\\n        feeReceiver = _feeReceiver;\\n        saveYourAssetsToken = _saveYourAssetsToken;\\n        balanceThreshold = _balanceThreshold;\\n        pancakeFactoryV1 = _pancakeFactoryV1;\\n        pancakeFactoryV2 = _pancakeFactoryV2;\\n        pancakeInitCodeV1 = _pancakeInitCodeV1;\\n        pancakeInitCodeV2 = _pancakeInitCodeV2;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address factory,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? _pairFor(factory, output, path[i + 2]) : _to;\\n            IPancakePair(_pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function swapExactNativeForTokens(\\n        address factory,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[0] == WETH, \\\"SaveYourPancakeRouter: INVALID_PATH\\\");\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(msg.value);\\n        amounts = _getAmountsOut(factory, swapAmount, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"SaveYourPancakeRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        IWETH(WETH).deposit{value: amounts[0].add(feeAmount)}();\\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), amounts[0]));\\n        assert(IWETH(WETH).transfer(feeReceiver, feeAmount));\\n        _swap(factory, amounts, path, to);\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0].add(feeAmount)) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0].add(feeAmount));\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(\\n        address factory,\\n        address[] memory path,\\n        address _to\\n    ) internal {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            IPancakePair pair = IPancakePair(_pairFor(factory, input, output));\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            {\\n                // scope to avoid stack too deep errors\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\n                amountOutput = _getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n            address to = i < path.length - 2 ? _pairFor(factory, output, path[i + 2]) : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function swapExactTokensForNativeSupportingFeeOnTransferTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) {\\n        require(path[path.length - 1] == WETH, \\\"SaveYourPancake: BNB has to be the last path item\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amountIn);\\n        _swapSupportingFeeOnTransferTokens(factory, path, address(this));\\n        uint256 amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, \\\"SaveYourPancake: slippage setting to low\\\");\\n        IWETH(WETH).withdraw(amountOut);\\n        (uint256 withdrawAmount, uint256 feeAmount) = _calculateFee(amountOut);\\n        TransferHelper.safeTransferETH(to, withdrawAmount);\\n        TransferHelper.safeTransferETH(feeReceiver, feeAmount);\\n    }\\n\\n    function swapExactTokensForTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amountIn);\\n        amounts = _getAmountsOut(factory, swapAmount, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"SaveYourPancake: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, feeReceiver, feeAmount);\\n        _swap(factory, amounts, path, to);\\n    }\\n\\n    function swapExactTokensForNative(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[path.length - 1] == WETH, \\\"SaveYourPancake: INVALID_PATH\\\");\\n        amounts = _getAmountsOut(factory, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"SaveYourPancake: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, swapAmount);\\n        TransferHelper.safeTransferETH(feeReceiver, feeAmount);\\n    }\\n\\n    function swapNativeForExactTokens(\\n        address factory,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[0] == WETH, \\\"SaveYourPancake: INVALID_PATH\\\");\\n        amounts = _getAmountsIn(factory, amountOut, path);\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amounts[0]);\\n        require(swapAmount <= msg.value, \\\"SaveYourPancake: EXCESSIVE_INPUT_AMOUNT\\\");\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), swapAmount));\\n        assert(IWETH(WETH).transfer(feeReceiver, feeAmount));\\n        _swap(factory, amounts, path, to);\\n        // refund dust eth, if any\\n        if (msg.value > swapAmount.add(feeAmount)) TransferHelper.safeTransferETH(msg.sender, msg.value - swapAmount);\\n    }\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amountIn);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), swapAmount);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, feeReceiver, feeAmount);\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(factory, path, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n            \\\"SaveYourPancake: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n    }\\n\\n    function swapTokensForExactTokens(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _getAmountsIn(factory, amountOut, path);\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amounts[0]);\\n        require(swapAmount <= amountInMax, \\\"SaveYourPancake: EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), swapAmount);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, feeReceiver, feeAmount);\\n        _swap(factory, amounts, path, to);\\n    }\\n\\n    function swapTokensForExactNative(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[path.length - 1] == WETH, \\\"SaveYourPancake: INVALID_PATH\\\");\\n        amounts = _getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"SaveYourPancake: EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, swapAmount);\\n        TransferHelper.safeTransferETH(feeReceiver, feeAmount);\\n    }\\n\\n    function swapExactNativeForTokensSupportingFeeOnTransferTokens(\\n        address factory,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable ensure(deadline) {\\n        require(path[0] == WETH, \\\"SaveYourPancake: INVALID_PATH\\\");\\n        uint256 amountIn = msg.value;\\n        IWETH(WETH).deposit{value: amountIn}();\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amountIn);\\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), swapAmount));\\n        assert(IWETH(WETH).transfer(feeReceiver, feeAmount));\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(factory, path, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n            \\\"SaveYourPancake: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n    }\\n\\n    function _calculateFee(uint256 amount) internal view returns (uint256 swapAmount, uint256 feeAmount) {\\n        if (saveYourAssetsToken.balanceOf(msg.sender) >= balanceThreshold) {\\n            feeAmount = 0;\\n            swapAmount = amount;\\n        } else {\\n            feeAmount = amount.mul(swapFee).div(FEE_DENOMINATOR);\\n            swapAmount = amount.sub(feeAmount);\\n        }\\n    }\\n\\n    function getUserFee(address user) public view returns (uint256) {\\n        saveYourAssetsToken.balanceOf(user) >= balanceThreshold ? 0 : swapFee;\\n    }\\n\\n    function updateSwapFee(uint8 newSwapFee) external onlyOwner {\\n        swapFee = newSwapFee;\\n        emit SwapFeeUpdated(newSwapFee);\\n    }\\n\\n    function updateFeeReceiver(address newFeeReceiver) external onlyOwner {\\n        feeReceiver = newFeeReceiver;\\n        emit FeeReceiverUpdated(newFeeReceiver);\\n    }\\n\\n    function updateBalanceThreshold(uint256 newBalanceThreshold) external onlyOwner {\\n        balanceThreshold = newBalanceThreshold;\\n        emit BalanceThresholdUpdated(balanceThreshold);\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal view returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"SaveYourPancake: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"SaveYourPancake: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul((9975 - getUserFee(msg.sender)));\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(10000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function _getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal view returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"SaveYourPancake: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"SaveYourPancake: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(10000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(9975 - getUserFee(msg.sender));\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function _getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"SaveYourPancake: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = _getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = _getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function _getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"SaveYourPancake: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = _getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = _getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function _getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = PancakeLibrary.sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(_pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function _pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        (address token0, address token1) = PancakeLibrary.sortTokens(tokenA, tokenB);\\n        bytes memory initcode = factory == pancakeFactoryV1 ? pancakeInitCodeV1 : pancakeInitCodeV2;\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        initcode // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1fbf4630262e7874cc07b62be67f476518f0b108ba8adfa394c47538ea190014\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"},\"contracts/libraries/PancakeLibrary.sol\":{\"content\":\"pragma solidity >=0.5.0;\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\nlibrary PancakeLibrary {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"PancakeLibrary: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"PancakeLibrary: ZERO_ADDRESS\\\");\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"PancakeLibrary: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(998);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(998);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n}\\n\",\"keccak256\":\"0xe8e3b02d28c3af5ea2fb602583136e4890be04f5e98434413d3dba05f9a995f7\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-newer\\npragma solidity =0.6.6;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x119ba53a7eff45d6c2b278fbc2ada151cc9713b6dc03426802ccd50149c6e763\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162005f8938038062005f8983398181016040526101208110156200003857600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805160405193929190846401000000008211156200009f57600080fd5b83820191506020820185811115620000b657600080fd5b8251866001820283011164010000000082111715620000d457600080fd5b8083526020830192505050908051906020019080838360005b838110156200010a578082015181840152602081019050620000ed565b50505050905090810190601f168015620001385780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200015c57600080fd5b838201915060208201858111156200017357600080fd5b82518660018202830111640100000000821117156200019157600080fd5b8083526020830192505050908051906020019080838360005b83811015620001c7578082015181840152602081019050620001aa565b50505050905090810190601f168015620001f55780820380516001836020036101000a031916815260200191505b5060405250505060006200020e6200044a60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508873ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505087600760146101000a81548160ff021916908360ff16021790555086600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560068190555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600190805190602001906200042192919062000452565b5080600290805190602001906200043a92919062000452565b5050505050505050505062000501565b600033905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200049557805160ff1916838001178555620004c6565b82800160010185558215620004c6579182015b82811115620004c5578251825591602001919060010190620004a8565b5b509050620004d59190620004d9565b5090565b620004fe91905b80821115620004fa576000816000905550600101620004e0565b5090565b90565b60805160601c615a06620005836000398061015652806114bf528061175e5280611cf05280611ddf5280611e705280611fb452806123d3528061256e5280612615528061276d528061298e5280612b435280612bd85280612d1c5280612ea752806134905280613641528061377452806139a65280613c425250615a066000f3fe60806040526004361061014f5760003560e01c8063ad5c4648116100b6578063cacb6d431161006f578063cacb6d4314610d4c578063d73792a914610d87578063daeca32914610db2578063f19a416714610eeb578063f2fde38b14610f42578063f4eb502914610f93576101ab565b8063ad5c464814610a05578063b1ca493614610a5c578063b3f0067414610b95578063c317377414610bec578063c69bebe414610c17578063c998218f14610c68576101ab565b8063715018a611610108578063715018a61461062f5780638da5cb5b146106465780638ee6ac721461069d57806393228dda1461076a57806396013a2a146107c15780639d018fb5146108e3576101ab565b8063060f58c3146101b05780631e6f71671461021557806322b584101461025357806329eaf7411461038c578063375734d9146104c557806354cf2aeb146105fe576101ab565b366101ab577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101a957fe5b005b600080fd5b3480156101bc57600080fd5b506101ff600480360360208110156101d357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fea565b6040518082815260200191505060405180910390f35b34801561022157600080fd5b506102516004803603602081101561023857600080fd5b81019080803560ff1690602001909291905050506110ed565b005b34801561025f57600080fd5b50610335600480360360c081101561027657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460208302840111640100000000831117156102fb57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111f7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561037857808201518184015260208101905061035d565b505050509050019250505060405180910390f35b34801561039857600080fd5b5061046e600480360360c08110156103af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561040057600080fd5b82018360208201111561041257600080fd5b8035906020019184602083028401116401000000008311171561043457600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611461565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104b1578082015181840152602081019050610496565b505050509050019250505060405180910390f35b3480156104d157600080fd5b506105a7600480360360c08110156104e857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561053957600080fd5b82018360208201111561054b57600080fd5b8035906020019184602083028401116401000000008311171561056d57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611869565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156105ea5780820151818401526020810190506105cf565b505050509050019250505060405180910390f35b34801561060a57600080fd5b50610613611aea565b604051808260ff1660ff16815260200191505060405180910390f35b34801561063b57600080fd5b50610644611afd565b005b34801561065257600080fd5b5061065b611c6b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610768600480360360a08110156106b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156106fa57600080fd5b82018360208201111561070c57600080fd5b8035906020019184602083028401116401000000008311171561072e57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c94565b005b34801561077657600080fd5b5061077f61234f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61088c600480360360a08110156107d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561081e57600080fd5b82018360208201111561083057600080fd5b8035906020019184602083028401116401000000008311171561085257600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612375565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108cf5780820151818401526020810190506108b4565b505050509050019250505060405180910390f35b6109ae600480360360a08110156108f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561094057600080fd5b82018360208201111561095257600080fd5b8035906020019184602083028401116401000000008311171561097457600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612930565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156109f15780820151818401526020810190506109d6565b505050509050019250505060405180910390f35b348015610a1157600080fd5b50610a1a612ea5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a6857600080fd5b50610b3e600480360360c0811015610a7f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610ad057600080fd5b820183602082011115610ae257600080fd5b80359060200191846020830284011164010000000083111715610b0457600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612ec9565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610b81578082015181840152602081019050610b66565b505050509050019250505060405180910390f35b348015610ba157600080fd5b50610baa6132b2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bf857600080fd5b50610c016132d8565b6040518082815260200191505060405180910390f35b348015610c2357600080fd5b50610c6660048036036020811015610c3a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132de565b005b348015610c7457600080fd5b50610d4a600480360360c0811015610c8b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610cdc57600080fd5b820183602082011115610cee57600080fd5b80359060200191846020830284011164010000000083111715610d1057600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613434565b005b348015610d5857600080fd5b50610d8560048036036020811015610d6f57600080fd5b8101908080359060200190929190505050613850565b005b348015610d9357600080fd5b50610d9c613942565b6040518082815260200191505060405180910390f35b348015610dbe57600080fd5b50610e94600480360360c0811015610dd557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610e2657600080fd5b820183602082011115610e3857600080fd5b80359060200191846020830284011164010000000083111715610e5a57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613948565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610ed7578082015181840152602081019050610ebc565b505050509050019250505060405180910390f35b348015610ef757600080fd5b50610f00613d4d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f4e57600080fd5b50610f9160048036036020811015610f6557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d73565b005b348015610f9f57600080fd5b50610fa8613f66565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600654600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561108e57600080fd5b505afa1580156110a2573d6000803e3d6000fd5b505050506040513d60208110156110b857600080fd5b810190808051906020019092919050505010156110e457600760149054906101000a900460ff166110e7565b60005b50919050565b6110f5613f8c565b73ffffffffffffffffffffffffffffffffffffffff16611113611c6b565b73ffffffffffffffffffffffffffffffffffffffff161461119c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600760146101000a81548160ff021916908360ff1602179055507fefece48cd3978027fdce60b535886c9d514101455104cbb209ad1dba24a97ffc81604051808260ff1660ff16815260200191505060405180910390a150565b60608142811015611253576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b61129f8989888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613f94565b91506000806112c1846000815181106112b457fe5b6020026020010151614114565b915091508882111561131e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806157cc6027913960400191505060405180910390fd5b6113af8888600081811061132e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16336113a98e8c8c600081811061135d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d8d600181811061138757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b856144de565b611406888860008181106113bf57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846144de565b6114538b858a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050896146ef565b505050979650505050505050565b606081428110156114bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1686866001898990500381811061150657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53617665596f757250616e63616b653a20494e56414c49445f5041544800000081525060200191505060405180910390fd5b6115f88989888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505061495b565b9150868260018451038151811061160b57fe5b6020026020010151101561166a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806157f3602b913960400191505060405180910390fd5b61170f8686600081811061167a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16336116f58c8a8a60008181106116a957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b8b60018181106116d357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b8560008151811061170257fe5b60200260200101516144de565b61175c8983888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050306146ef565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836001855103815181106117a857fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156117e657600080fd5b505af11580156117fa573d6000803e3d6000fd5b505050506000806118218460018651038151811061181457fe5b6020026020010151614114565b9150915061182f8683614ad3565b61185b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682614ad3565b505050979650505050505050565b606081428110156118c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b6000806118d18a614114565b915091506119218b838a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505061495b565b9350888460018651038151811061193457fe5b60200260200101511015611993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806157f3602b913960400191505060405180910390fd5b611a38888860008181106119a357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633611a1e8e8c8c60008181106119d257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d8d60018181106119fc57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b87600081518110611a2b57fe5b60200260200101516144de565b611a8f88886000818110611a4857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846144de565b611adc8b858a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050896146ef565b505050979650505050505050565b600760149054906101000a900460ff1681565b611b05613f8c565b73ffffffffffffffffffffffffffffffffffffffff16611b23611c6b565b73ffffffffffffffffffffffffffffffffffffffff1614611bac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b8042811015611cee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1685856000818110611d3257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611dd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53617665596f757250616e63616b653a20494e56414c49445f5041544800000081525060200191505060405180910390fd5b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e4557600080fd5b505af1158015611e59573d6000803e3d6000fd5b5050505050600080611e6a83614114565b915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb611f078c8b8b6000818110611ebb57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8c6001818110611ee557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611f7157600080fd5b505af1158015611f85573d6000803e3d6000fd5b505050506040513d6020811015611f9b57600080fd5b8101908080519060200190929190505050611fb257fe5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561207b57600080fd5b505af115801561208f573d6000803e3d6000fd5b505050506040513d60208110156120a557600080fd5b81019080805190602001909291905050506120bc57fe5b6000888860018b8b9050038181106120d057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561216957600080fd5b505afa15801561217d573d6000803e3d6000fd5b505050506040513d602081101561219357600080fd5b810190808051906020019092919050505090506121f28b8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505089614c32565b896122eb828b8b60018e8e90500381811061220957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156122a257600080fd5b505afa1580156122b6573d6000803e3d6000fd5b505050506040513d60208110156122cc57600080fd5b810190808051906020019092919050505061506a90919063ffffffff16565b1015612342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806157f3602b913960400191505060405180910390fd5b5050505050505050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606081428110156123d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168686600081811061241557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461249e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806158486023913960400191505060405180910390fd5b6000806124aa34614114565b915091506124fa8a838a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505061495b565b9350888460018651038151811061250d57fe5b6020026020010151101561256c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806158956031913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db06125cf83876000815181106125b957fe5b60200260200101516150ed90919063ffffffff16565b6040518263ffffffff1660e01b81526004016000604051808303818588803b1580156125fa57600080fd5b505af115801561260e573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6126ac8c8b8b600081811061266057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8c600181811061268a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b866000815181106126b957fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561272a57600080fd5b505af115801561273e573d6000803e3d6000fd5b505050506040513d602081101561275457600080fd5b810190808051906020019092919050505061276b57fe5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561283457600080fd5b505af1158015612848573d6000803e3d6000fd5b505050506040513d602081101561285e57600080fd5b810190808051906020019092919050505061287557fe5b6128c28a858a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050896146ef565b6128e981856000815181106128d357fe5b60200260200101516150ed90919063ffffffff16565b341115612923576129223361291b838760008151811061290557fe5b60200260200101516150ed90919063ffffffff16565b3403614ad3565b5b5050509695505050505050565b6060814281101561298c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16868660008181106129d057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612a76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53617665596f757250616e63616b653a20494e56414c49445f5041544800000081525060200191505060405180910390fd5b612ac28888888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613f94565b9150600080612ae484600081518110612ad757fe5b6020026020010151614114565b9150915034821115612b41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806157cc6027913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db085600081518110612b8a57fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015612bbd57600080fd5b505af1158015612bd1573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612c6f8c8b8b6000818110612c2357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8c6001818110612c4d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612cd957600080fd5b505af1158015612ced573d6000803e3d6000fd5b505050506040513d6020811015612d0357600080fd5b8101908080519060200190929190505050612d1a57fe5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612de357600080fd5b505af1158015612df7573d6000803e3d6000fd5b505050506040513d6020811015612e0d57600080fd5b8101908080519060200190929190505050612e2457fe5b612e718a858a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050896146ef565b612e8481836150ed90919063ffffffff16565b341115612e9857612e9733833403614ad3565b5b5050509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60608142811015612f25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b600080612f318a614114565b91509150612fc688886000818110612f4557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633612fc08e8c8c6000818110612f7457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d8d6001818110612f9e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b856144de565b61301d88886000818110612fd657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846144de565b6000888860018b8b90500381811061303157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156130ca57600080fd5b505afa1580156130de573d6000803e3d6000fd5b505050506040513d60208110156130f457600080fd5b810190808051906020019092919050505090506131538c8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505089614c32565b8961324c828b8b60018e8e90500381811061316a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561320357600080fd5b505afa158015613217573d6000803e3d6000fd5b505050506040513d602081101561322d57600080fd5b810190808051906020019092919050505061506a90919063ffffffff16565b10156132a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806157f3602b913960400191505060405180910390fd5b50505050979650505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6132e6613f8c565b73ffffffffffffffffffffffffffffffffffffffff16613304611c6b565b73ffffffffffffffffffffffffffffffffffffffff161461338d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f27aae5db36d94179909d019ae0b1ac7c16d96d953148f63c0f6a0a9c8ead79ee81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b804281101561348e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168585600188889050038181106134d757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613560576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806159596031913960400191505060405180910390fd5b6135f18585600081811061357057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16336135eb8b8989600081811061359f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a60018181106135c957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b8a6144de565b61363d88868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505030614c32565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156136dc57600080fd5b505afa1580156136f0573d6000803e3d6000fd5b505050506040513d602081101561370657600080fd5b8101908080519060200190929190505050905086811015613772576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806159106028913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156137e557600080fd5b505af11580156137f9573d6000803e3d6000fd5b5050505060008061380983614114565b915091506138178683614ad3565b613843600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682614ad3565b5050505050505050505050565b613858613f8c565b73ffffffffffffffffffffffffffffffffffffffff16613876611c6b565b73ffffffffffffffffffffffffffffffffffffffff16146138ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b806006819055507fc86ab5ae638c0e95d21e0d47f77aa3a65ded219f7b70bc6ea894107f437d56366006546040518082815260200191505060405180910390a150565b61271081565b606081428110156139a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168686600189899050038181106139ed57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613a93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53617665596f757250616e63616b653a20494e56414c49445f5041544800000081525060200191505060405180910390fd5b613adf8989888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613f94565b91508682600081518110613aef57fe5b60200260200101511115613b4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806157cc6027913960400191505060405180910390fd5b613bf386866000818110613b5e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633613bd98c8a8a6000818110613b8d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b8b6001818110613bb757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b85600081518110613be657fe5b60200260200101516144de565b613c408983888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050306146ef565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d83600185510381518110613c8c57fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613cca57600080fd5b505af1158015613cde573d6000803e3d6000fd5b50505050600080613d0584600186510381518110613cf857fe5b6020026020010151614114565b91509150613d138683614ad3565b613d3f600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682614ad3565b505050979650505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613d7b613f8c565b73ffffffffffffffffffffffffffffffffffffffff16613d99611c6b565b73ffffffffffffffffffffffffffffffffffffffff1614613e22576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613ea8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806157a66026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b606060028251101561400e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53617665596f757250616e63616b653a20494e56414c49445f5041544800000081525060200191505060405180910390fd5b815167ffffffffffffffff8111801561402657600080fd5b506040519080825280602002602001820160405280156140555781602001602082028036833780820191505090505b509050828160018351038151811061406957fe5b6020026020010181815250506000600183510390505b600081111561410c576000806140bf8786600186038151811061409e57fe5b60200260200101518786815181106140b257fe5b6020026020010151615175565b915091506140e18484815181106140d257fe5b6020026020010151838361529e565b8460018503815181106140f057fe5b602002602001018181525050505080806001900391505061407f565b509392505050565b600080600654600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156141b957600080fd5b505afa1580156141cd573d6000803e3d6000fd5b505050506040513d60208110156141e357600080fd5b8101908080519060200190929190505050106142055760009050829150614256565b61423e612710614230600760149054906101000a900460ff1660ff16866153e590919063ffffffff16565b61546b90919063ffffffff16565b9050614253818461506a90919063ffffffff16565b91505b915091565b600080600061426a85856154f4565b915091506060600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146142cc5760026142cf565b60015b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156143635780601f1061433857610100808354040283529160200191614363565b820191906000526020600020905b81548152906001019060200180831161434657829003601f168201915b50505050509050868383604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001208260405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140183815260200182805190602001908083835b60208310614492578051825260208201915060208101905060208303925061446f565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040528051906020012060001c93505050509392505050565b600060608573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106145eb57805182526020820191506020810190506020830392506145c8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461464d576040519150601f19603f3d011682016040523d82523d6000602084013e614652565b606091505b50915091508180156146925750600081511480614691575080806020019051602081101561467f57600080fd5b81019080805190602001909291905050505b5b6146e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806159ad6024913960400191505060405180910390fd5b505050505050565b60005b60018351038110156149545760008084838151811061470d57fe5b602002602001015185600185018151811061472457fe5b602002602001015191509150600061473c83836154f4565b509050600087600186018151811061475057fe5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146147985782600061479c565b6000835b91509150600060028a510388106147b357886147d5565b6147d48c878c60028c01815181106147c757fe5b602002602001015161425b565b5b90506147e28c888861425b565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f848484600067ffffffffffffffff8111801561481857600080fd5b506040519080825280601f01601f19166020018201604052801561484b5781602001600182028036833780820191505090505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156148d95780820151818401526020810190506148be565b50505050905090810190601f1680156149065780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561492857600080fd5b505af115801561493c573d6000803e3d6000fd5b505050505050505050505080806001019150506146f2565b5050505050565b60606002825110156149d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53617665596f757250616e63616b653a20494e56414c49445f5041544800000081525060200191505060405180910390fd5b815167ffffffffffffffff811180156149ed57600080fd5b50604051908082528060200260200182016040528015614a1c5781602001602082028036833780820191505090505b5090508281600081518110614a2d57fe5b60200260200101818152505060005b6001835103811015614acb57600080614a7f87868581518110614a5b57fe5b6020026020010151876001870181518110614a7257fe5b6020026020010151615175565b91509150614aa1848481518110614a9257fe5b6020026020010151838361566b565b846001850181518110614ab057fe5b60200260200101818152505050508080600101915050614a3c565b509392505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81118015614b0557600080fd5b506040519080825280601f01601f191660200182016040528015614b385781602001600182028036833780820191505090505b506040518082805190602001908083835b60208310614b6c5780518252602082019150602081019050602083039250614b49565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614bce576040519150601f19603f3d011682016040523d82523d6000602084013e614bd3565b606091505b5050905080614c2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061598a6023913960400191505060405180910390fd5b505050565b60005b600183510381101561506457600080848381518110614c5057fe5b6020026020010151856001850181518110614c6757fe5b6020026020010151915091506000614c7f83836154f4565b5090506000614c8f88858561425b565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015614cdd57600080fd5b505afa158015614cf1573d6000803e3d6000fd5b505050506040513d6060811015614d0757600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000808773ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614614d8e578284614d91565b83835b91509150614e5f828b73ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614e1657600080fd5b505afa158015614e2a573d6000803e3d6000fd5b505050506040513d6020811015614e4057600080fd5b810190808051906020019092919050505061506a90919063ffffffff16565b9550614e6c86838361566b565b9450505050506000808573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614614eb057826000614eb4565b6000835b91509150600060028c51038a10614ecb578a614eed565b614eec8d898e60028e0181518110614edf57fe5b602002602001015161425b565b5b90508573ffffffffffffffffffffffffffffffffffffffff1663022c0d9f848484600067ffffffffffffffff81118015614f2657600080fd5b506040519080825280601f01601f191660200182016040528015614f595781602001600182028036833780820191505090505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614fe7578082015181840152602081019050614fcc565b50505050905090810190601f1680156150145780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561503657600080fd5b505af115801561504a573d6000803e3d6000fd5b505050505050505050505050508080600101915050614c35565b50505050565b6000828211156150e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b60008082840190508381101561516b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600080600061518485856154f4565b50905060008061519588888861425b565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156151da57600080fd5b505afa1580156151ee573d6000803e3d6000fd5b505050506040513d606081101561520457600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461528857808261528b565b81815b8095508196505050505050935093915050565b60008084116152f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806157f3602b913960400191505060405180910390fd5b6000831180156153085750600082115b61535d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806158e96027913960400191505060405180910390fd5b600061538661271061537887876153e590919063ffffffff16565b6153e590919063ffffffff16565b905060006153bb61539633610fea565b6126f7036153ad888761506a90919063ffffffff16565b6153e590919063ffffffff16565b90506153da60018284816153cb57fe5b046150ed90919063ffffffff16565b925050509392505050565b6000808314156153f85760009050615465565b600082840290508284828161540957fe5b0414615460576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806159386021913960400191505060405180910390fd5b809150505b92915050565b60008082116154e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b8183816154eb57fe5b04905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561557c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806158c66023913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106155b65782846155b9565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415615664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f50616e63616b654c6962726172793a205a45524f5f414444524553530000000081525060200191505060405180910390fd5b9250929050565b60008084116156c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061586b602a913960400191505060405180910390fd5b6000831180156156d55750600082115b61572a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806158e96027913960400191505060405180910390fd5b600061574b61573833610fea565b6126f703866153e590919063ffffffff16565b9050600061576284836153e590919063ffffffff16565b9050600061578d8361577f612710896153e590919063ffffffff16565b6150ed90919063ffffffff16565b905080828161579857fe5b049350505050939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737353617665596f757250616e63616b653a204558434553534956455f494e5055545f414d4f554e5453617665596f757250616e63616b653a20494e53554646494349454e545f4f55545055545f414d4f554e5453617665596f757250616e63616b653a20646561646c696e6520666f722074726164652070617373656453617665596f757250616e63616b65526f757465723a20494e56414c49445f5041544853617665596f757250616e63616b653a20494e53554646494349454e545f494e5055545f414d4f554e5453617665596f757250616e63616b65526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e5450616e63616b654c6962726172793a204944454e544943414c5f41444452455353455353617665596f757250616e63616b653a20494e53554646494349454e545f4c495155494449545953617665596f757250616e63616b653a20736c6970706167652073657474696e6720746f206c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753617665596f757250616e63616b653a20424e422068617320746f20626520746865206c6173742070617468206974656d5472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a26469706673582212202fe9b53a5f101f3ea9965150fa1e2e1dae4cdfe646804d8d525437ba422506e564736f6c63430006060033",
  "deployedBytecode": "0x60806040526004361061014f5760003560e01c8063ad5c4648116100b6578063cacb6d431161006f578063cacb6d4314610d4c578063d73792a914610d87578063daeca32914610db2578063f19a416714610eeb578063f2fde38b14610f42578063f4eb502914610f93576101ab565b8063ad5c464814610a05578063b1ca493614610a5c578063b3f0067414610b95578063c317377414610bec578063c69bebe414610c17578063c998218f14610c68576101ab565b8063715018a611610108578063715018a61461062f5780638da5cb5b146106465780638ee6ac721461069d57806393228dda1461076a57806396013a2a146107c15780639d018fb5146108e3576101ab565b8063060f58c3146101b05780631e6f71671461021557806322b584101461025357806329eaf7411461038c578063375734d9146104c557806354cf2aeb146105fe576101ab565b366101ab577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101a957fe5b005b600080fd5b3480156101bc57600080fd5b506101ff600480360360208110156101d357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fea565b6040518082815260200191505060405180910390f35b34801561022157600080fd5b506102516004803603602081101561023857600080fd5b81019080803560ff1690602001909291905050506110ed565b005b34801561025f57600080fd5b50610335600480360360c081101561027657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001906401000000008111156102c757600080fd5b8201836020820111156102d957600080fd5b803590602001918460208302840111640100000000831117156102fb57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111f7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561037857808201518184015260208101905061035d565b505050509050019250505060405180910390f35b34801561039857600080fd5b5061046e600480360360c08110156103af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561040057600080fd5b82018360208201111561041257600080fd5b8035906020019184602083028401116401000000008311171561043457600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611461565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104b1578082015181840152602081019050610496565b505050509050019250505060405180910390f35b3480156104d157600080fd5b506105a7600480360360c08110156104e857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561053957600080fd5b82018360208201111561054b57600080fd5b8035906020019184602083028401116401000000008311171561056d57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611869565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156105ea5780820151818401526020810190506105cf565b505050509050019250505060405180910390f35b34801561060a57600080fd5b50610613611aea565b604051808260ff1660ff16815260200191505060405180910390f35b34801561063b57600080fd5b50610644611afd565b005b34801561065257600080fd5b5061065b611c6b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610768600480360360a08110156106b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156106fa57600080fd5b82018360208201111561070c57600080fd5b8035906020019184602083028401116401000000008311171561072e57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c94565b005b34801561077657600080fd5b5061077f61234f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61088c600480360360a08110156107d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561081e57600080fd5b82018360208201111561083057600080fd5b8035906020019184602083028401116401000000008311171561085257600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612375565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108cf5780820151818401526020810190506108b4565b505050509050019250505060405180910390f35b6109ae600480360360a08110156108f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561094057600080fd5b82018360208201111561095257600080fd5b8035906020019184602083028401116401000000008311171561097457600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612930565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156109f15780820151818401526020810190506109d6565b505050509050019250505060405180910390f35b348015610a1157600080fd5b50610a1a612ea5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a6857600080fd5b50610b3e600480360360c0811015610a7f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610ad057600080fd5b820183602082011115610ae257600080fd5b80359060200191846020830284011164010000000083111715610b0457600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612ec9565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610b81578082015181840152602081019050610b66565b505050509050019250505060405180910390f35b348015610ba157600080fd5b50610baa6132b2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bf857600080fd5b50610c016132d8565b6040518082815260200191505060405180910390f35b348015610c2357600080fd5b50610c6660048036036020811015610c3a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132de565b005b348015610c7457600080fd5b50610d4a600480360360c0811015610c8b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610cdc57600080fd5b820183602082011115610cee57600080fd5b80359060200191846020830284011164010000000083111715610d1057600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613434565b005b348015610d5857600080fd5b50610d8560048036036020811015610d6f57600080fd5b8101908080359060200190929190505050613850565b005b348015610d9357600080fd5b50610d9c613942565b6040518082815260200191505060405180910390f35b348015610dbe57600080fd5b50610e94600480360360c0811015610dd557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610e2657600080fd5b820183602082011115610e3857600080fd5b80359060200191846020830284011164010000000083111715610e5a57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613948565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610ed7578082015181840152602081019050610ebc565b505050509050019250505060405180910390f35b348015610ef757600080fd5b50610f00613d4d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f4e57600080fd5b50610f9160048036036020811015610f6557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d73565b005b348015610f9f57600080fd5b50610fa8613f66565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600654600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561108e57600080fd5b505afa1580156110a2573d6000803e3d6000fd5b505050506040513d60208110156110b857600080fd5b810190808051906020019092919050505010156110e457600760149054906101000a900460ff166110e7565b60005b50919050565b6110f5613f8c565b73ffffffffffffffffffffffffffffffffffffffff16611113611c6b565b73ffffffffffffffffffffffffffffffffffffffff161461119c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600760146101000a81548160ff021916908360ff1602179055507fefece48cd3978027fdce60b535886c9d514101455104cbb209ad1dba24a97ffc81604051808260ff1660ff16815260200191505060405180910390a150565b60608142811015611253576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b61129f8989888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613f94565b91506000806112c1846000815181106112b457fe5b6020026020010151614114565b915091508882111561131e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806157cc6027913960400191505060405180910390fd5b6113af8888600081811061132e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16336113a98e8c8c600081811061135d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d8d600181811061138757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b856144de565b611406888860008181106113bf57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846144de565b6114538b858a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050896146ef565b505050979650505050505050565b606081428110156114bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1686866001898990500381811061150657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53617665596f757250616e63616b653a20494e56414c49445f5041544800000081525060200191505060405180910390fd5b6115f88989888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505061495b565b9150868260018451038151811061160b57fe5b6020026020010151101561166a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806157f3602b913960400191505060405180910390fd5b61170f8686600081811061167a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16336116f58c8a8a60008181106116a957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b8b60018181106116d357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b8560008151811061170257fe5b60200260200101516144de565b61175c8983888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050306146ef565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836001855103815181106117a857fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156117e657600080fd5b505af11580156117fa573d6000803e3d6000fd5b505050506000806118218460018651038151811061181457fe5b6020026020010151614114565b9150915061182f8683614ad3565b61185b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682614ad3565b505050979650505050505050565b606081428110156118c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b6000806118d18a614114565b915091506119218b838a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505061495b565b9350888460018651038151811061193457fe5b60200260200101511015611993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806157f3602b913960400191505060405180910390fd5b611a38888860008181106119a357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633611a1e8e8c8c60008181106119d257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d8d60018181106119fc57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b87600081518110611a2b57fe5b60200260200101516144de565b611a8f88886000818110611a4857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846144de565b611adc8b858a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050896146ef565b505050979650505050505050565b600760149054906101000a900460ff1681565b611b05613f8c565b73ffffffffffffffffffffffffffffffffffffffff16611b23611c6b565b73ffffffffffffffffffffffffffffffffffffffff1614611bac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b8042811015611cee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1685856000818110611d3257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611dd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53617665596f757250616e63616b653a20494e56414c49445f5041544800000081525060200191505060405180910390fd5b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e4557600080fd5b505af1158015611e59573d6000803e3d6000fd5b5050505050600080611e6a83614114565b915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb611f078c8b8b6000818110611ebb57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8c6001818110611ee557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611f7157600080fd5b505af1158015611f85573d6000803e3d6000fd5b505050506040513d6020811015611f9b57600080fd5b8101908080519060200190929190505050611fb257fe5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561207b57600080fd5b505af115801561208f573d6000803e3d6000fd5b505050506040513d60208110156120a557600080fd5b81019080805190602001909291905050506120bc57fe5b6000888860018b8b9050038181106120d057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561216957600080fd5b505afa15801561217d573d6000803e3d6000fd5b505050506040513d602081101561219357600080fd5b810190808051906020019092919050505090506121f28b8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505089614c32565b896122eb828b8b60018e8e90500381811061220957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156122a257600080fd5b505afa1580156122b6573d6000803e3d6000fd5b505050506040513d60208110156122cc57600080fd5b810190808051906020019092919050505061506a90919063ffffffff16565b1015612342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806157f3602b913960400191505060405180910390fd5b5050505050505050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606081428110156123d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168686600081811061241557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461249e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806158486023913960400191505060405180910390fd5b6000806124aa34614114565b915091506124fa8a838a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505061495b565b9350888460018651038151811061250d57fe5b6020026020010151101561256c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806158956031913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db06125cf83876000815181106125b957fe5b60200260200101516150ed90919063ffffffff16565b6040518263ffffffff1660e01b81526004016000604051808303818588803b1580156125fa57600080fd5b505af115801561260e573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6126ac8c8b8b600081811061266057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8c600181811061268a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b866000815181106126b957fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561272a57600080fd5b505af115801561273e573d6000803e3d6000fd5b505050506040513d602081101561275457600080fd5b810190808051906020019092919050505061276b57fe5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561283457600080fd5b505af1158015612848573d6000803e3d6000fd5b505050506040513d602081101561285e57600080fd5b810190808051906020019092919050505061287557fe5b6128c28a858a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050896146ef565b6128e981856000815181106128d357fe5b60200260200101516150ed90919063ffffffff16565b341115612923576129223361291b838760008151811061290557fe5b60200260200101516150ed90919063ffffffff16565b3403614ad3565b5b5050509695505050505050565b6060814281101561298c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16868660008181106129d057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612a76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53617665596f757250616e63616b653a20494e56414c49445f5041544800000081525060200191505060405180910390fd5b612ac28888888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613f94565b9150600080612ae484600081518110612ad757fe5b6020026020010151614114565b9150915034821115612b41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806157cc6027913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db085600081518110612b8a57fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015612bbd57600080fd5b505af1158015612bd1573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612c6f8c8b8b6000818110612c2357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8c6001818110612c4d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612cd957600080fd5b505af1158015612ced573d6000803e3d6000fd5b505050506040513d6020811015612d0357600080fd5b8101908080519060200190929190505050612d1a57fe5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612de357600080fd5b505af1158015612df7573d6000803e3d6000fd5b505050506040513d6020811015612e0d57600080fd5b8101908080519060200190929190505050612e2457fe5b612e718a858a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050896146ef565b612e8481836150ed90919063ffffffff16565b341115612e9857612e9733833403614ad3565b5b5050509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60608142811015612f25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b600080612f318a614114565b91509150612fc688886000818110612f4557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633612fc08e8c8c6000818110612f7457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d8d6001818110612f9e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b856144de565b61301d88886000818110612fd657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846144de565b6000888860018b8b90500381811061303157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156130ca57600080fd5b505afa1580156130de573d6000803e3d6000fd5b505050506040513d60208110156130f457600080fd5b810190808051906020019092919050505090506131538c8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505089614c32565b8961324c828b8b60018e8e90500381811061316a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561320357600080fd5b505afa158015613217573d6000803e3d6000fd5b505050506040513d602081101561322d57600080fd5b810190808051906020019092919050505061506a90919063ffffffff16565b10156132a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806157f3602b913960400191505060405180910390fd5b50505050979650505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6132e6613f8c565b73ffffffffffffffffffffffffffffffffffffffff16613304611c6b565b73ffffffffffffffffffffffffffffffffffffffff161461338d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f27aae5db36d94179909d019ae0b1ac7c16d96d953148f63c0f6a0a9c8ead79ee81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b804281101561348e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168585600188889050038181106134d757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613560576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806159596031913960400191505060405180910390fd5b6135f18585600081811061357057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16336135eb8b8989600081811061359f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a60018181106135c957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b8a6144de565b61363d88868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505030614c32565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156136dc57600080fd5b505afa1580156136f0573d6000803e3d6000fd5b505050506040513d602081101561370657600080fd5b8101908080519060200190929190505050905086811015613772576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806159106028913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156137e557600080fd5b505af11580156137f9573d6000803e3d6000fd5b5050505060008061380983614114565b915091506138178683614ad3565b613843600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682614ad3565b5050505050505050505050565b613858613f8c565b73ffffffffffffffffffffffffffffffffffffffff16613876611c6b565b73ffffffffffffffffffffffffffffffffffffffff16146138ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b806006819055507fc86ab5ae638c0e95d21e0d47f77aa3a65ded219f7b70bc6ea894107f437d56366006546040518082815260200191505060405180910390a150565b61271081565b606081428110156139a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061581e602a913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168686600189899050038181106139ed57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613a93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53617665596f757250616e63616b653a20494e56414c49445f5041544800000081525060200191505060405180910390fd5b613adf8989888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613f94565b91508682600081518110613aef57fe5b60200260200101511115613b4e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806157cc6027913960400191505060405180910390fd5b613bf386866000818110613b5e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633613bd98c8a8a6000818110613b8d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b8b6001818110613bb757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1661425b565b85600081518110613be657fe5b60200260200101516144de565b613c408983888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050306146ef565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d83600185510381518110613c8c57fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613cca57600080fd5b505af1158015613cde573d6000803e3d6000fd5b50505050600080613d0584600186510381518110613cf857fe5b6020026020010151614114565b91509150613d138683614ad3565b613d3f600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682614ad3565b505050979650505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613d7b613f8c565b73ffffffffffffffffffffffffffffffffffffffff16613d99611c6b565b73ffffffffffffffffffffffffffffffffffffffff1614613e22576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613ea8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806157a66026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b606060028251101561400e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53617665596f757250616e63616b653a20494e56414c49445f5041544800000081525060200191505060405180910390fd5b815167ffffffffffffffff8111801561402657600080fd5b506040519080825280602002602001820160405280156140555781602001602082028036833780820191505090505b509050828160018351038151811061406957fe5b6020026020010181815250506000600183510390505b600081111561410c576000806140bf8786600186038151811061409e57fe5b60200260200101518786815181106140b257fe5b6020026020010151615175565b915091506140e18484815181106140d257fe5b6020026020010151838361529e565b8460018503815181106140f057fe5b602002602001018181525050505080806001900391505061407f565b509392505050565b600080600654600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156141b957600080fd5b505afa1580156141cd573d6000803e3d6000fd5b505050506040513d60208110156141e357600080fd5b8101908080519060200190929190505050106142055760009050829150614256565b61423e612710614230600760149054906101000a900460ff1660ff16866153e590919063ffffffff16565b61546b90919063ffffffff16565b9050614253818461506a90919063ffffffff16565b91505b915091565b600080600061426a85856154f4565b915091506060600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146142cc5760026142cf565b60015b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156143635780601f1061433857610100808354040283529160200191614363565b820191906000526020600020905b81548152906001019060200180831161434657829003601f168201915b50505050509050868383604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001208260405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140183815260200182805190602001908083835b60208310614492578051825260208201915060208101905060208303925061446f565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040528051906020012060001c93505050509392505050565b600060608573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106145eb57805182526020820191506020810190506020830392506145c8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461464d576040519150601f19603f3d011682016040523d82523d6000602084013e614652565b606091505b50915091508180156146925750600081511480614691575080806020019051602081101561467f57600080fd5b81019080805190602001909291905050505b5b6146e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806159ad6024913960400191505060405180910390fd5b505050505050565b60005b60018351038110156149545760008084838151811061470d57fe5b602002602001015185600185018151811061472457fe5b602002602001015191509150600061473c83836154f4565b509050600087600186018151811061475057fe5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146147985782600061479c565b6000835b91509150600060028a510388106147b357886147d5565b6147d48c878c60028c01815181106147c757fe5b602002602001015161425b565b5b90506147e28c888861425b565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f848484600067ffffffffffffffff8111801561481857600080fd5b506040519080825280601f01601f19166020018201604052801561484b5781602001600182028036833780820191505090505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156148d95780820151818401526020810190506148be565b50505050905090810190601f1680156149065780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561492857600080fd5b505af115801561493c573d6000803e3d6000fd5b505050505050505050505080806001019150506146f2565b5050505050565b60606002825110156149d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f53617665596f757250616e63616b653a20494e56414c49445f5041544800000081525060200191505060405180910390fd5b815167ffffffffffffffff811180156149ed57600080fd5b50604051908082528060200260200182016040528015614a1c5781602001602082028036833780820191505090505b5090508281600081518110614a2d57fe5b60200260200101818152505060005b6001835103811015614acb57600080614a7f87868581518110614a5b57fe5b6020026020010151876001870181518110614a7257fe5b6020026020010151615175565b91509150614aa1848481518110614a9257fe5b6020026020010151838361566b565b846001850181518110614ab057fe5b60200260200101818152505050508080600101915050614a3c565b509392505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81118015614b0557600080fd5b506040519080825280601f01601f191660200182016040528015614b385781602001600182028036833780820191505090505b506040518082805190602001908083835b60208310614b6c5780518252602082019150602081019050602083039250614b49565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614bce576040519150601f19603f3d011682016040523d82523d6000602084013e614bd3565b606091505b5050905080614c2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061598a6023913960400191505060405180910390fd5b505050565b60005b600183510381101561506457600080848381518110614c5057fe5b6020026020010151856001850181518110614c6757fe5b6020026020010151915091506000614c7f83836154f4565b5090506000614c8f88858561425b565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015614cdd57600080fd5b505afa158015614cf1573d6000803e3d6000fd5b505050506040513d6060811015614d0757600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000808773ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614614d8e578284614d91565b83835b91509150614e5f828b73ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614e1657600080fd5b505afa158015614e2a573d6000803e3d6000fd5b505050506040513d6020811015614e4057600080fd5b810190808051906020019092919050505061506a90919063ffffffff16565b9550614e6c86838361566b565b9450505050506000808573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614614eb057826000614eb4565b6000835b91509150600060028c51038a10614ecb578a614eed565b614eec8d898e60028e0181518110614edf57fe5b602002602001015161425b565b5b90508573ffffffffffffffffffffffffffffffffffffffff1663022c0d9f848484600067ffffffffffffffff81118015614f2657600080fd5b506040519080825280601f01601f191660200182016040528015614f595781602001600182028036833780820191505090505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614fe7578082015181840152602081019050614fcc565b50505050905090810190601f1680156150145780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561503657600080fd5b505af115801561504a573d6000803e3d6000fd5b505050505050505050505050508080600101915050614c35565b50505050565b6000828211156150e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b60008082840190508381101561516b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600080600061518485856154f4565b50905060008061519588888861425b565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156151da57600080fd5b505afa1580156151ee573d6000803e3d6000fd5b505050506040513d606081101561520457600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461528857808261528b565b81815b8095508196505050505050935093915050565b60008084116152f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806157f3602b913960400191505060405180910390fd5b6000831180156153085750600082115b61535d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806158e96027913960400191505060405180910390fd5b600061538661271061537887876153e590919063ffffffff16565b6153e590919063ffffffff16565b905060006153bb61539633610fea565b6126f7036153ad888761506a90919063ffffffff16565b6153e590919063ffffffff16565b90506153da60018284816153cb57fe5b046150ed90919063ffffffff16565b925050509392505050565b6000808314156153f85760009050615465565b600082840290508284828161540957fe5b0414615460576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806159386021913960400191505060405180910390fd5b809150505b92915050565b60008082116154e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b8183816154eb57fe5b04905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561557c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806158c66023913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106155b65782846155b9565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415615664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f50616e63616b654c6962726172793a205a45524f5f414444524553530000000081525060200191505060405180910390fd5b9250929050565b60008084116156c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061586b602a913960400191505060405180910390fd5b6000831180156156d55750600082115b61572a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806158e96027913960400191505060405180910390fd5b600061574b61573833610fea565b6126f703866153e590919063ffffffff16565b9050600061576284836153e590919063ffffffff16565b9050600061578d8361577f612710896153e590919063ffffffff16565b6150ed90919063ffffffff16565b905080828161579857fe5b049350505050939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737353617665596f757250616e63616b653a204558434553534956455f494e5055545f414d4f554e5453617665596f757250616e63616b653a20494e53554646494349454e545f4f55545055545f414d4f554e5453617665596f757250616e63616b653a20646561646c696e6520666f722074726164652070617373656453617665596f757250616e63616b65526f757465723a20494e56414c49445f5041544853617665596f757250616e63616b653a20494e53554646494349454e545f494e5055545f414d4f554e5453617665596f757250616e63616b65526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e5450616e63616b654c6962726172793a204944454e544943414c5f41444452455353455353617665596f757250616e63616b653a20494e53554646494349454e545f4c495155494449545953617665596f757250616e63616b653a20736c6970706167652073657474696e6720746f206c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753617665596f757250616e63616b653a20424e422068617320746f20626520746865206c6173742070617468206974656d5472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a26469706673582212202fe9b53a5f101f3ea9965150fa1e2e1dae4cdfe646804d8d525437ba422506e564736f6c63430006060033",
  "devdoc": {
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1118,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "pancakeInitCodeV1",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1120,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "pancakeInitCodeV2",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1122,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "pancakeFactoryV1",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1124,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "pancakeFactoryV2",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1126,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "saveYourAssetsToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)542"
      },
      {
        "astId": 1128,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "balanceThreshold",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1130,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1132,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "swapFee",
        "offset": 20,
        "slot": "7",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)542": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}