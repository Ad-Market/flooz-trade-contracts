{
  "address": "0x30B2D1301B783766C4eFBB724F109D2562F69c36",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_swapFee",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "_referralRewardRate",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_balanceThreshold",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_saveYourAssetsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pancakeFactoryV1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pancakeFactoryV2",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_pancakeInitCodeV1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_pancakeInitCodeV2",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceThreshold",
          "type": "uint256"
        }
      ],
      "name": "BalanceThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeReceiver",
          "type": "address"
        }
      ],
      "name": "FeeReceiverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "ReferralAnchorCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenReward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReferralRewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "referralRewardRate",
          "type": "uint16"
        }
      ],
      "name": "ReferralRewardRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "activated",
          "type": "bool"
        }
      ],
      "name": "ReferralsActivatedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "swapFee",
          "type": "uint8"
        }
      ],
      "name": "SwapFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReferee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasUserReferre",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeFactoryV1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeFactoryV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralAnchor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralRewardRate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralsActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saveYourAssetsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBalanceThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateBalanceThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeReceiver",
          "type": "address"
        }
      ],
      "name": "updateFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newReferralRewardRate",
          "type": "uint16"
        }
      ],
      "name": "updateReferralRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newReferralsActivated",
          "type": "bool"
        }
      ],
      "name": "updateReferralsActivated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newSwapFee",
          "type": "uint8"
        }
      ],
      "name": "updateSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "userAboveBalanceThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawBnb",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x01ee9acad71ff9833c329214fdf3f39f2a2e19cc95bfe56550cf17c51d0d9f1a",
  "receipt": {
    "to": null,
    "from": "0xCd40092d42D025Ce44A77779ac1D18AdF7396984",
    "contractAddress": "0x30B2D1301B783766C4eFBB724F109D2562F69c36",
    "transactionIndex": 35,
    "gasUsed": "4314712",
    "logsBloom": "0x
    "blockHash": "0x7e5285bf3d32e53bea3283e1d347ff8af3042fdcfb7f833ce1062d736a898cc5",
    "transactionHash": "0x01ee9acad71ff9833c329214fdf3f39f2a2e19cc95bfe56550cf17c51d0d9f1a",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 11502135,
        "transactionHash": "0x01ee9acad71ff9833c329214fdf3f39f2a2e19cc95bfe56550cf17c51d0d9f1a",
        "address": "0x30B2D1301B783766C4eFBB724F109D2562F69c36",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cd40092d42d025ce44a77779ac1d18adf7396984"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x7e5285bf3d32e53bea3283e1d347ff8af3042fdcfb7f833ce1062d736a898cc5"
      }
    ],
    "blockNumber": 11502135,
    "cumulativeGasUsed": "11234002",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xae13d989dac2f0debff460ac112a837c89baa7cd",
    50,
    1000,
    "0xEB349eC6CB7434ab8a1557c0dE12CF02F07F23E4",
    "5000000000000000000",
    "0x8884ccE491A4a1b5E7A73CB850c28ec6C6394944",
    "0x6725F303b657a9451d8BA641348b6761A6CC7a17",
    "0x6725F303b657a9451d8BA641348b6761A6CC7a17",
    "0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66",
    "0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66"
  ],
  "solcInputHash": "d9aa1bdf85ee1c1be1fdecb7fc3bbd82",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_swapFee\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_referralRewardRate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_saveYourAssetsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeFactoryV1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeFactoryV2\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_pancakeInitCodeV1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_pancakeInitCodeV2\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceThreshold\",\"type\":\"uint256\"}],\"name\":\"BalanceThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"FeeReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"ReferralAnchorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenReward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralRewardRate\",\"type\":\"uint16\"}],\"name\":\"ReferralRewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"ReferralsActivatedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"swapFee\",\"type\":\"uint8\"}],\"name\":\"SwapFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReferee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasUserReferre\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeFactoryV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeFactoryV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAnchor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRewardRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralsActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveYourAssetsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalanceThreshold\",\"type\":\"uint256\"}],\"name\":\"updateBalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newReferralRewardRate\",\"type\":\"uint16\"}],\"name\":\"updateReferralRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newReferralsActivated\",\"type\":\"bool\"}],\"name\":\"updateReferralsActivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newSwapFee\",\"type\":\"uint8\"}],\"name\":\"updateSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"userAboveBalanceThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawBnb(address,uint256)\":{\"details\":\"Withdraw BNB that somehow ended up in the contract.\"},\"withdrawErc20Token(address,address,uint256)\":{\"details\":\"Withdraw any erc20 compliant tokens that somehow ended up in the contract.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/FloozRouter.sol\":\"FloozRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\"},\"contracts/FloozRouter.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// SPDX-License-Identifier: UNLICENSED\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/PancakeLibrary.sol\\\";\\nimport \\\"./interfaces/IReferrals.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract FloozRouter is Ownable, Pausable {\\n    using SafeMath for uint256;\\n    event SwapFeeUpdated(uint8 swapFee);\\n    event ReferralRewardRateUpdated(uint16 referralRewardRate);\\n    event ReferralsActivatedUpdated(bool activated);\\n    event FeeReceiverUpdated(address feeReceiver);\\n    event BalanceThresholdUpdated(uint256 balanceThreshold);\\n    event ReferralAnchorCreated(address indexed user, address indexed referee);\\n    event ReferralRewardPaid(address from, address indexed to, address tokenOut, address tokenReward, uint256 amount);\\n\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n    address public immutable WETH;\\n    bytes internal pancakeInitCodeV1;\\n    bytes internal pancakeInitCodeV2;\\n    address public pancakeFactoryV1;\\n    address public pancakeFactoryV2;\\n    IERC20 public saveYourAssetsToken;\\n    uint256 public balanceThreshold;\\n    address public feeReceiver;\\n    uint8 public swapFee;\\n    uint16 public referralRewardRate;\\n    bool public referralsActivated;\\n\\n    // stores the address that refered this user\\n    mapping(address => address) public referralAnchor;\\n\\n    modifier isValidFactory(address factory) {\\n        require(factory == pancakeFactoryV1 || factory == pancakeFactoryV2, \\\"FloozRouter: invalid factory\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _WETH,\\n        uint8 _swapFee,\\n        uint16 _referralRewardRate,\\n        address _feeReceiver,\\n        uint256 _balanceThreshold,\\n        IERC20 _saveYourAssetsToken,\\n        address _pancakeFactoryV1,\\n        address _pancakeFactoryV2,\\n        bytes memory _pancakeInitCodeV1,\\n        bytes memory _pancakeInitCodeV2\\n    ) public {\\n        WETH = _WETH;\\n        swapFee = _swapFee;\\n        referralRewardRate = _referralRewardRate;\\n        feeReceiver = _feeReceiver;\\n        saveYourAssetsToken = _saveYourAssetsToken;\\n        balanceThreshold = _balanceThreshold;\\n        pancakeFactoryV1 = _pancakeFactoryV1;\\n        pancakeFactoryV2 = _pancakeFactoryV2;\\n        pancakeInitCodeV1 = _pancakeInitCodeV1;\\n        pancakeInitCodeV2 = _pancakeInitCodeV2;\\n        referralsActivated = true;\\n    }\\n\\n    receive() external payable {}\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address factory,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? _pairFor(factory, output, path[i + 2]) : _to;\\n            IPancakePair(_pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function swapExactETHForTokens(\\n        address factory,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address referee\\n    ) external payable whenNotPaused() isValidFactory(factory) returns (uint256[] memory amounts) {\\n        require(path[0] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        referee = _getReferee(referee);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(msg.value, referee != address(0));\\n        amounts = _getAmountsOut(factory, swapAmount, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        IWETH(WETH).deposit{value: swapAmount}();\\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), amounts[0]));\\n        _swap(factory, amounts, path, msg.sender);\\n\\n        if (feeAmount > 0) {\\n            _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n        }\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(\\n        address factory,\\n        address[] memory path,\\n        address _to\\n    ) internal {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            IPancakePair pair = IPancakePair(_pairFor(factory, input, output));\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            {\\n                // scope to avoid stack too deep errors\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\n                amountOutput = _getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n            address to = i < path.length - 2 ? _pairFor(factory, output, path[i + 2]) : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address referee\\n    ) external whenNotPaused() isValidFactory(factory) {\\n        require(path[path.length - 1] == WETH, \\\"FloozRouter: BNB has to be the last path item\\\");\\n        referee = _getReferee(referee);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amountIn);\\n        _swapSupportingFeeOnTransferTokens(factory, path, address(this));\\n        uint256 amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, \\\"FloozRouter: slippage setting to low\\\");\\n        IWETH(WETH).withdraw(amountOut);\\n        (uint256 amountWithdraw, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amountOut, referee != address(0));\\n        TransferHelper.safeTransferETH(msg.sender, amountWithdraw);\\n\\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function swapExactTokensForTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address referee\\n    ) external whenNotPaused() isValidFactory(factory) returns (uint256[] memory amounts) {\\n        referee = _getReferee(referee);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amountIn, referee != address(0));\\n        amounts = _getAmountsOut(factory, swapAmount, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, msg.sender);\\n\\n        if (feeAmount > 0) _withdrawFeesAndRewards(path[0], path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function swapExactTokensForETH(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address referee\\n    ) external whenNotPaused() isValidFactory(factory) returns (uint256[] memory amounts) {\\n        require(path[path.length - 1] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        referee = _getReferee(referee);\\n        amounts = _getAmountsOut(factory, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        (uint256 amountOut, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n            amounts[amounts.length - 1],\\n            referee != address(0)\\n        );\\n        TransferHelper.safeTransferETH(msg.sender, amountOut);\\n\\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function swapETHForExactTokens(\\n        address factory,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address referee\\n    ) external payable whenNotPaused() isValidFactory(factory) returns (uint256[] memory amounts) {\\n        require(path[0] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        referee = _getReferee(referee);\\n        amounts = _getAmountsIn(factory, amountOut, path);\\n        (, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amounts[0], referee != address(0));\\n        require(amounts[0].add(feeAmount).add(referralReward) <= msg.value, \\\"FloozRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), amounts[0]));\\n        _swap(factory, amounts, path, msg.sender);\\n\\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0].add(feeAmount).add(referralReward))\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0].add(feeAmount).add(referralReward));\\n    }\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address referee\\n    ) external whenNotPaused() isValidFactory(factory) {\\n        referee = _getReferee(referee);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amountIn, referee != address(0));\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), swapAmount);\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(msg.sender);\\n        _swapSupportingFeeOnTransferTokens(factory, path, msg.sender);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(msg.sender).sub(balanceBefore) >= amountOutMin,\\n            \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n\\n        if (feeAmount > 0) _withdrawFeesAndRewards(path[0], path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address referee\\n    ) external whenNotPaused() isValidFactory(factory) returns (uint256[] memory amounts) {\\n        referee = _getReferee(referee);\\n        amounts = _getAmountsIn(factory, amountOut, path);\\n        (, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amounts[0], referee != address(0));\\n        require(amounts[0].add(feeAmount).add(referralReward) <= amountInMax, \\\"FloozRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, msg.sender);\\n\\n        if (feeAmount > 0) _withdrawFeesAndRewards(path[0], path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function swapTokensForExactETH(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address referee\\n    ) external whenNotPaused() isValidFactory(factory) returns (uint256[] memory amounts) {\\n        require(path[path.length - 1] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        referee = _getReferee(referee);\\n        amounts = _getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"FloozRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n            amounts[amounts.length - 1],\\n            referee != address(0)\\n        );\\n\\n        TransferHelper.safeTransferETH(msg.sender, swapAmount);\\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address factory,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address referee\\n    ) external payable whenNotPaused() isValidFactory(factory) {\\n        require(path[0] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        referee = _getReferee(referee);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(msg.value, referee != address(0));\\n        IWETH(WETH).deposit{value: swapAmount}();\\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), swapAmount));\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(msg.sender);\\n        _swapSupportingFeeOnTransferTokens(factory, path, msg.sender);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(msg.sender).sub(balanceBefore) >= amountOutMin,\\n            \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function _getReferee(address referee) internal returns (address) {\\n        address sender = msg.sender;\\n        if (referralAnchor[sender] == address(0)) {\\n            referralAnchor[sender] = referee;\\n            emit ReferralAnchorCreated(sender, referee);\\n        }\\n        return referralAnchor[sender];\\n    }\\n\\n    function _calculateFeesAndRewards(uint256 amount, bool isReferral)\\n        internal\\n        view\\n        returns (\\n            uint256 swapAmount,\\n            uint256 feeAmount,\\n            uint256 referralReward\\n        )\\n    {\\n        if (userAboveBalanceThreshold(msg.sender)) {\\n            referralReward = 0;\\n            feeAmount = 0;\\n            swapAmount = amount;\\n        } else {\\n            uint256 fees = amount.mul(swapFee).div(FEE_DENOMINATOR);\\n            swapAmount = amount.sub(fees);\\n            if (isReferral && referralsActivated) {\\n                referralReward = fees.mul(referralRewardRate).div(FEE_DENOMINATOR);\\n                feeAmount = amount.sub(swapAmount).sub(referralReward);\\n            } else {\\n                referralReward = 0;\\n                feeAmount = fees;\\n            }\\n        }\\n    }\\n\\n    function userAboveBalanceThreshold(address _account) public view returns (bool) {\\n        return saveYourAssetsToken.balanceOf(_account) >= balanceThreshold;\\n    }\\n\\n    function getUserFee(address user) public view returns (uint256) {\\n        saveYourAssetsToken.balanceOf(user) >= balanceThreshold ? 0 : swapFee;\\n    }\\n\\n    function updateSwapFee(uint8 newSwapFee) external onlyOwner {\\n        swapFee = newSwapFee;\\n        emit SwapFeeUpdated(newSwapFee);\\n    }\\n\\n    function updateReferralRewardRate(uint16 newReferralRewardRate) external onlyOwner {\\n        referralRewardRate = newReferralRewardRate;\\n        emit ReferralRewardRateUpdated(newReferralRewardRate);\\n    }\\n\\n    function updateFeeReceiver(address newFeeReceiver) external onlyOwner {\\n        feeReceiver = newFeeReceiver;\\n        emit FeeReceiverUpdated(newFeeReceiver);\\n    }\\n\\n    function updateBalanceThreshold(uint256 newBalanceThreshold) external onlyOwner {\\n        balanceThreshold = newBalanceThreshold;\\n        emit BalanceThresholdUpdated(balanceThreshold);\\n    }\\n\\n    function updateReferralsActivated(bool newReferralsActivated) external onlyOwner {\\n        referralsActivated = newReferralsActivated;\\n        emit ReferralsActivatedUpdated(newReferralsActivated);\\n    }\\n\\n    function getUserReferee(address user) external view returns (address) {\\n        return referralAnchor[user];\\n    }\\n\\n    function hasUserReferre(address user) external view returns (bool) {\\n        return referralAnchor[user] != address(0);\\n    }\\n\\n    /**\\n     * @dev Withdraw BNB that somehow ended up in the contract.\\n     */\\n    function withdrawBnb(address payable to, uint256 amount) external onlyOwner {\\n        to.transfer(amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw any erc20 compliant tokens that\\n     * somehow ended up in the contract.\\n     */\\n    function withdrawErc20Token(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).transfer(to, amount);\\n    }\\n\\n    function _withdrawFeesAndRewards(\\n        address tokenReward,\\n        address tokenOut,\\n        address referee,\\n        uint256 feeAmount,\\n        uint256 referralReward\\n    ) internal {\\n        if (tokenReward == address(0)) {\\n            TransferHelper.safeTransferETH(feeReceiver, feeAmount);\\n            if (referralReward > 0) {\\n                TransferHelper.safeTransferETH(referee, referralReward);\\n            }\\n        } else {\\n            TransferHelper.safeTransferFrom(tokenReward, msg.sender, feeReceiver, feeAmount);\\n            if (referralReward > 0) {\\n                TransferHelper.safeTransferFrom(tokenReward, msg.sender, referee, referralReward);\\n            }\\n        }\\n        emit ReferralRewardPaid(msg.sender, referee, tokenOut, tokenReward, referralReward);\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal view returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"FloozRouter: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"FloozRouter: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul((9975 - getUserFee(msg.sender)));\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(10000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function _getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal view returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"FloozRouter: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(10000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(9975 - getUserFee(msg.sender));\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function _getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"FloozRouter: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = _getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = _getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function _getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"FloozRouter: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = _getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = _getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function _getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = PancakeLibrary.sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(_pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function _pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        (address token0, address token1) = PancakeLibrary.sortTokens(tokenA, tokenB);\\n        bytes memory initcode = factory == pancakeFactoryV1 ? pancakeInitCodeV1 : pancakeInitCodeV2;\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        initcode // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xdc5d89bc0ee1a16367108476ad89c33b3762d77a1fbcfb50178823f8f763617f\"},\"contracts/interfaces/IReferrals.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n//SPDX-License-Identifier: Unlicense\\n\\ninterface IReferrals {\\n    function registerReferral(\\n        address _referee,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x70336e88a8643155a4b00c9229e6c6b6646e5132b3357c743548224e00527767\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n//SPDX-License-Identifier: Unlicense\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb6d65097190e3c63bbb78e08e47ff64b22adba2432d11b5f14bf129f22c7f6af\"},\"contracts/libraries/PancakeLibrary.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n//SPDX-License-Identifier: Unlicense\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\nlibrary PancakeLibrary {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"PancakeLibrary: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"PancakeLibrary: ZERO_ADDRESS\\\");\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"PancakeLibrary: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(998);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(998);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n}\\n\",\"keccak256\":\"0xb630661028c4a94aa199399df4f3da395c57f6c0a27d8262dc23b65784207428\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-newer\\npragma solidity =0.6.6;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x119ba53a7eff45d6c2b278fbc2ada151cc9713b6dc03426802ccd50149c6e763\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004d8b38038062004d8b83398181016040526101408110156200003857600080fd5b815160208301516040808501516060860151608087015160a088015160c089015160e08a01516101008b0180519751999b989a969995989497939692959194919392820192846401000000008211156200009157600080fd5b908301906020820185811115620000a757600080fd5b8251640100000000811182820188101715620000c257600080fd5b82525081516020918201929091019080838360005b83811015620000f1578181015183820152602001620000d7565b50505050905090810190601f1680156200011f5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200014357600080fd5b9083019060208201858111156200015957600080fd5b82516401000000008111828201881017156200017457600080fd5b82525081516020918201929091019080838360005b83811015620001a357818101518382015260200162000189565b50505050905090810190601f168015620001d15780820380516001836020036101000a031916815260200191505b506040525050506000620001ea6200039960201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060008060146101000a81548160ff021916908315150217905550896001600160a01b03166080816001600160a01b031660601b8152505088600760146101000a81548160ff021916908360ff16021790555087600760156101000a81548161ffff021916908361ffff16021790555086600760006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600560006101000a8154816001600160a01b0302191690836001600160a01b031602179055508560068190555083600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600460006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600190805190602001906200035e9291906200039e565b508051620003749060029060208401906200039e565b50506007805460ff60b81b1916600160b81b1790555062000440975050505050505050565b335b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003e157805160ff191683800117855562000411565b8280016001018555821562000411579182015b8281111562000411578251825591602001919060010190620003f4565b506200041f92915062000423565b5090565b6200039b91905b808211156200041f57600081556001016200042a565b60805160601c6148e2620004a960003980610f3a528061112152806113705280611ed9528061211c52806121d6528061224a52806125495280612699528061270d52806129045280612a4a5280612ad25280612d0a5280612e515280612f0752506148e26000f3fe60806040526004361061021e5760003560e01c8063a3a4bc9a11610123578063d758bcc6116100ab578063e96b2f501161006f578063e96b2f5014610b67578063f19a416714610b93578063f2fde38b14610ba8578063f4eb502914610bdb578063fe4ad44614610bf057610225565b8063d758bcc61461094e578063db12c8e7146109da578063e229357114610a66578063e5ae0c3214610b06578063e94265c414610b3457610225565b8063c69bebe4116100f2578063c69bebe41461081d578063cacb6d4314610850578063cd6856181461087a578063d113efc414610906578063d73792a91461093957610225565b8063a3a4bc9a1461073e578063ad5c4648146107de578063b3f00674146107f3578063c31737741461080857610225565b80636553b712116101a6578063870ed17711610175578063870ed17714610608578063882f3b851461063b5780638da5cb5b146106db57806393228dda146106f0578063a12cff491461070557610225565b80636553b712146104ef578063715018a61461058f578063740a63e2146105a45780638456cb59146105f357610225565b806337166709116101ed578063371667091461030a5780633f4ba83a146103fa5780633f4e48bb1461040f57806354cf2aeb146104af5780635c975abb146104da57610225565b8063060f58c31461022a5780631e6f71671461026f578063279f32911461029e5780632d079734146102c757610225565b3661022557005b600080fd5b34801561023657600080fd5b5061025d6004803603602081101561024d57600080fd5b50356001600160a01b0316610c1c565b60408051918252519081900360200190f35b34801561027b57600080fd5b5061029c6004803603602081101561029257600080fd5b503560ff16610cbe565b005b3480156102aa57600080fd5b506102b3610d74565b604080519115158252519081900360200190f35b3480156102d357600080fd5b5061029c600480360360608110156102ea57600080fd5b506001600160a01b03813581169160208101359091169060400135610d84565b34801561031657600080fd5b506103aa600480360360a081101561032d57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561036357600080fd5b82018360208201111561037557600080fd5b803590602001918460208302840111600160201b8311171561039657600080fd5b9193509150356001600160a01b0316610e77565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103e65781810151838201526020016103ce565b505050509050019250505060405180910390f35b34801561040657600080fd5b5061029c611241565b34801561041b57600080fd5b506103aa600480360360a081101561043257600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561046857600080fd5b82018360208201111561047a57600080fd5b803590602001918460208302840111600160201b8311171561049b57600080fd5b9193509150356001600160a01b03166112ad565b3480156104bb57600080fd5b506104c461149a565b6040805160ff9092168252519081900360200190f35b3480156104e657600080fd5b506102b36114aa565b3480156104fb57600080fd5b5061029c600480360360a081101561051257600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561054857600080fd5b82018360208201111561055a57600080fd5b803590602001918460208302840111600160201b8311171561057b57600080fd5b9193509150356001600160a01b03166114ba565b34801561059b57600080fd5b5061029c6117ed565b3480156105b057600080fd5b506105d7600480360360208110156105c757600080fd5b50356001600160a01b0316611899565b604080516001600160a01b039092168252519081900360200190f35b3480156105ff57600080fd5b5061029c6118b4565b34801561061457600080fd5b506102b36004803603602081101561062b57600080fd5b50356001600160a01b031661191e565b34801561064757600080fd5b506103aa600480360360a081101561065e57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561069457600080fd5b8201836020820111156106a657600080fd5b803590602001918460208302840111600160201b831117156106c757600080fd5b9193509150356001600160a01b031661193e565b3480156106e757600080fd5b506105d7611bcf565b3480156106fc57600080fd5b506105d7611bde565b34801561071157600080fd5b5061029c6004803603604081101561072857600080fd5b506001600160a01b038135169060200135611bed565b34801561074a57600080fd5b506103aa600480360360a081101561076157600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561079757600080fd5b8201836020820111156107a957600080fd5b803590602001918460208302840111600160201b831117156107ca57600080fd5b9193509150356001600160a01b0316611c8a565b3480156107ea57600080fd5b506105d7611ed7565b3480156107ff57600080fd5b506105d7611efb565b34801561081457600080fd5b5061025d611f0a565b34801561082957600080fd5b5061029c6004803603602081101561084057600080fd5b50356001600160a01b0316611f10565b34801561085c57600080fd5b5061029c6004803603602081101561087357600080fd5b5035611fc6565b61029c6004803603608081101561089057600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156108bf57600080fd5b8201836020820111156108d157600080fd5b803590602001918460208302840111600160201b831117156108f257600080fd5b9193509150356001600160a01b0316612063565b34801561091257600080fd5b506105d76004803603602081101561092957600080fd5b50356001600160a01b031661246a565b34801561094557600080fd5b5061025d612488565b6103aa6004803603608081101561096457600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561099357600080fd5b8201836020820111156109a557600080fd5b803590602001918460208302840111600160201b831117156109c657600080fd5b9193509150356001600160a01b031661248e565b6103aa600480360360808110156109f057600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b811115610a1f57600080fd5b820183602082011115610a3157600080fd5b803590602001918460208302840111600160201b83111715610a5257600080fd5b9193509150356001600160a01b0316612849565b348015610a7257600080fd5b5061029c600480360360a0811015610a8957600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b811115610abf57600080fd5b820183602082011115610ad157600080fd5b803590602001918460208302840111600160201b83111715610af257600080fd5b9193509150356001600160a01b0316612c49565b348015610b1257600080fd5b5061029c60048036036020811015610b2957600080fd5b503561ffff16612fd3565b348015610b4057600080fd5b506102b360048036036020811015610b5757600080fd5b50356001600160a01b031661308b565b348015610b7357600080fd5b5061029c60048036036020811015610b8a57600080fd5b50351515613114565b348015610b9f57600080fd5b506105d76131c9565b348015610bb457600080fd5b5061029c60048036036020811015610bcb57600080fd5b50356001600160a01b03166131d8565b348015610be757600080fd5b506105d76132da565b348015610bfc57600080fd5b50610c056132e9565b6040805161ffff9092168252519081900360200190f35b600654600554604080516370a0823160e01b81526001600160a01b03858116600483015291516000949392909216916370a0823191602480820192602092909190829003018186803b158015610c7157600080fd5b505afa158015610c85573d6000803e3d6000fd5b505050506040513d6020811015610c9b57600080fd5b50511015610cb557600754600160a01b900460ff16610cb8565b60005b50919050565b610cc66132fa565b6001600160a01b0316610cd7611bcf565b6001600160a01b031614610d20576040805162461bcd60e51b815260206004820181905260248201526000805160206147b6833981519152604482015290519081900360640190fd5b6007805460ff8316600160a01b810260ff60a01b199092169190911790915560408051918252517fefece48cd3978027fdce60b535886c9d514101455104cbb209ad1dba24a97ffc9181900360200190a150565b600754600160b81b900460ff1681565b610d8c6132fa565b6001600160a01b0316610d9d611bcf565b6001600160a01b031614610de6576040805162461bcd60e51b815260206004820181905260248201526000805160206147b6833981519152604482015290519081900360640190fd5b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610e4657600080fd5b505af1158015610e5a573d6000803e3d6000fd5b505050506040513d6020811015610e7057600080fd5b5050505050565b6060610e816114aa565b15610ec6576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60035487906001600160a01b0380831691161480610ef157506004546001600160a01b038281169116145b610f30576040805162461bcd60e51b815260206004820152601c6024820152600080516020614826833981519152604482015290519081900360640190fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685856000198101818110610f6a57fe5b905060200201356001600160a01b03166001600160a01b031614610fc3576040805162461bcd60e51b81526020600482015260196024820152600080516020614846833981519152604482015290519081900360640190fd5b610fcc836132fe565b925061100c888887878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061339392505050565b9150858260008151811061101c57fe5b602002602001015111156110615760405162461bcd60e51b815260040180806020018281038252602381526020018061474f6023913960400191505060405180910390fd5b6110df8585600081811061107157fe5b905060200201356001600160a01b0316336110c58b8989600081811061109357fe5b905060200201356001600160a01b03168a8a60018181106110b057fe5b905060200201356001600160a01b03166134ce565b856000815181106110d257fe5b6020026020010151613699565b61111f88838787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506137f6915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d8360018551038151811061115e57fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561119c57600080fd5b505af11580156111b0573d6000803e3d6000fd5b5050505060008060006111f0856001875103815181106111cc57fe5b602002602001015160006001600160a01b0316886001600160a01b031614156139f6565b9250925092506112003384613ad0565b81156112335761123360008989600019810181811061121b57fe5b905060200201356001600160a01b0316888585613bc3565b505050509695505050505050565b6112496132fa565b6001600160a01b031661125a611bcf565b6001600160a01b0316146112a3576040805162461bcd60e51b815260206004820181905260248201526000805160206147b6833981519152604482015290519081900360640190fd5b6112ab613c84565b565b60606112b76114aa565b156112fc576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60035487906001600160a01b038083169116148061132757506004546001600160a01b038281169116145b611366576040805162461bcd60e51b815260206004820152601c6024820152600080516020614826833981519152604482015290519081900360640190fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858560001981018181106113a057fe5b905060200201356001600160a01b03166001600160a01b0316146113f9576040805162461bcd60e51b81526020600482015260196024820152600080516020614846833981519152604482015290519081900360640190fd5b611402836132fe565b92506114428888878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613d2792505050565b9150858260018451038151811061145557fe5b602002602001015110156110615760405162461bcd60e51b81526004018080602001828103825260278152602001806147046027913960400191505060405180910390fd5b600754600160a01b900460ff1681565b600054600160a01b900460ff1690565b6114c26114aa565b15611507576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60035486906001600160a01b038083169116148061153257506004546001600160a01b038281169116145b611571576040805162461bcd60e51b815260206004820152601c6024820152600080516020614826833981519152604482015290519081900360640190fd5b61157a826132fe565b915060008080611595896001600160a01b03871615156139f6565b9250925092506115f0878760008181106115ab57fe5b905060200201356001600160a01b0316336115ea8d8b8b60008181106115cd57fe5b905060200201356001600160a01b03168c8c60018181106110b057fe5b86613699565b60008787600019810181811061160257fe5b604080516370a0823160e01b81523360048201529051602092830294909401356001600160a01b0316936370a08231935060248083019392829003018186803b15801561164e57600080fd5b505afa158015611662573d6000803e3d6000fd5b505050506040513d602081101561167857600080fd5b50516040805160208a810282810182019093528a82529293506116ba928e928c918c918291850190849080828437600092019190915250339250613e4c915050565b88611753828a8a60001981018181106116cf57fe5b604080516370a0823160e01b81523360048201529051602092830294909401356001600160a01b0316936370a08231935060248083019392829003018186803b15801561171b57600080fd5b505afa15801561172f573d6000803e3d6000fd5b505050506040513d602081101561174557600080fd5b50519063ffffffff61411d16565b10156117905760405162461bcd60e51b81526004018080602001828103825260278152602001806147046027913960400191505060405180910390fd5b82156117e0576117e0888860008181106117a657fe5b905060200201356001600160a01b0316898960018c8c9050038181106117c857fe5b905060200201356001600160a01b0316888686613bc3565b5050505050505050505050565b6117f56132fa565b6001600160a01b0316611806611bcf565b6001600160a01b03161461184f576040805162461bcd60e51b815260206004820181905260248201526000805160206147b6833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6008602052600090815260409020546001600160a01b031681565b6118bc6132fa565b6001600160a01b03166118cd611bcf565b6001600160a01b031614611916576040805162461bcd60e51b815260206004820181905260248201526000805160206147b6833981519152604482015290519081900360640190fd5b6112ab61417f565b6001600160a01b0390811660009081526008602052604090205416151590565b60606119486114aa565b1561198d576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60035487906001600160a01b03808316911614806119b857506004546001600160a01b038281169116145b6119f7576040805162461bcd60e51b815260206004820152601c6024820152600080516020614826833981519152604482015290519081900360640190fd5b611a00836132fe565b9250611a40888887878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061339392505050565b9150600080611a7984600081518110611a5557fe5b602002602001015160006001600160a01b0316876001600160a01b031614156139f6565b925092505087611ab682611aaa8588600081518110611a9457fe5b602002602001015161420890919063ffffffff16565b9063ffffffff61420816565b1115611af35760405162461bcd60e51b815260040180806020018281038252602381526020018061474f6023913960400191505060405180910390fd5b611b3287876000818110611b0357fe5b905060200201356001600160a01b031633611b258d8b8b60008181106115cd57fe5b876000815181106110d257fe5b611b728a858989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506137f6915050565b8115611bc257611bc287876000818110611b8857fe5b905060200201356001600160a01b0316888860018b8b905003818110611baa57fe5b905060200201356001600160a01b0316878585613bc3565b5050509695505050505050565b6000546001600160a01b031690565b6005546001600160a01b031681565b611bf56132fa565b6001600160a01b0316611c06611bcf565b6001600160a01b031614611c4f576040805162461bcd60e51b815260206004820181905260248201526000805160206147b6833981519152604482015290519081900360640190fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611c85573d6000803e3d6000fd5b505050565b6060611c946114aa565b15611cd9576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60035487906001600160a01b0380831691161480611d0457506004546001600160a01b038281169116145b611d43576040805162461bcd60e51b815260206004820152601c6024820152600080516020614826833981519152604482015290519081900360640190fd5b611d4c836132fe565b925060008080611d678a6001600160a01b03881615156139f6565b925092509250611dab8b848a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613d2792505050565b94508885600187510381518110611dbe57fe5b60200260200101511015611e035760405162461bcd60e51b81526004018080602001828103825260278152602001806147046027913960400191505060405180910390fd5b611e5f88886000818110611e1357fe5b905060200201356001600160a01b031633611e528e8c8c6000818110611e3557fe5b905060200201356001600160a01b03168d8d60018181106110b057fe5b886000815181106110d257fe5b611e9f8b868a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506137f6915050565b81156112335761123388886000818110611eb557fe5b905060200201356001600160a01b0316898960018c8c90500381811061121b57fe5b7f000000000000000000000000000000000000000000000000000000000000000081565b6007546001600160a01b031681565b60065481565b611f186132fa565b6001600160a01b0316611f29611bcf565b6001600160a01b031614611f72576040805162461bcd60e51b815260206004820181905260248201526000805160206147b6833981519152604482015290519081900360640190fd5b600780546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f27aae5db36d94179909d019ae0b1ac7c16d96d953148f63c0f6a0a9c8ead79ee9181900360200190a150565b611fce6132fa565b6001600160a01b0316611fdf611bcf565b6001600160a01b031614612028576040805162461bcd60e51b815260206004820181905260248201526000805160206147b6833981519152604482015290519081900360640190fd5b60068190556040805182815290517fc86ab5ae638c0e95d21e0d47f77aa3a65ded219f7b70bc6ea894107f437d56369181900360200190a150565b61206b6114aa565b156120b0576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60035485906001600160a01b03808316911614806120db57506004546001600160a01b038281169116145b61211a576040805162461bcd60e51b815260206004820152601c6024820152600080516020614826833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168484600081811061215157fe5b905060200201356001600160a01b03166001600160a01b0316146121aa576040805162461bcd60e51b81526020600482015260196024820152600080516020614846833981519152604482015290519081900360640190fd5b6121b3826132fe565b9150600080806121ce346001600160a01b03871615156139f6565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561222f57600080fd5b505af1158015612243573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6122a58b8a8a600081811061228857fe5b905060200201356001600160a01b03168b8b60018181106110b057fe5b856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156122f557600080fd5b505af1158015612309573d6000803e3d6000fd5b505050506040513d602081101561231f57600080fd5b505161232757fe5b60008787600019810181811061233957fe5b604080516370a0823160e01b81523360048201529051602092830294909401356001600160a01b0316936370a08231935060248083019392829003018186803b15801561238557600080fd5b505afa158015612399573d6000803e3d6000fd5b505050506040513d60208110156123af57600080fd5b50516040805160208a810282810182019093528a82529293506123f1928d928c918c918291850190849080828437600092019190915250339250613e4c915050565b88612406828a8a60001981018181106116cf57fe5b10156124435760405162461bcd60e51b81526004018080602001828103825260278152602001806147046027913960400191505060405180910390fd5b821561245e5761245e6000898960001981018181106117c857fe5b50505050505050505050565b6001600160a01b039081166000908152600860205260409020541690565b61271081565b60606124986114aa565b156124dd576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60035486906001600160a01b038083169116148061250857506004546001600160a01b038281169116145b612547576040805162461bcd60e51b815260206004820152601c6024820152600080516020614826833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585600081811061257e57fe5b905060200201356001600160a01b03166001600160a01b0316146125d7576040805162461bcd60e51b81526020600482015260196024820152600080516020614846833981519152604482015290519081900360640190fd5b6125e0836132fe565b9250600080806125fb346001600160a01b03881615156139f6565b92509250925061263f8a848a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613d2792505050565b9450888560018751038151811061265257fe5b602002602001015110156126975760405162461bcd60e51b81526004018080602001828103825260278152602001806147046027913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b1580156126f257600080fd5b505af1158015612706573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb61274b8c8b8b60008181106115cd57fe5b8760008151811061275857fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156127af57600080fd5b505af11580156127c3573d6000803e3d6000fd5b505050506040513d60208110156127d957600080fd5b50516127e157fe5b6128218a868a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506137f6915050565b811561283c5761283c60008989600019810181811061121b57fe5b5050505095945050505050565b60606128536114aa565b15612898576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60035486906001600160a01b03808316911614806128c357506004546001600160a01b038281169116145b612902576040805162461bcd60e51b815260206004820152601c6024820152600080516020614826833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585600081811061293957fe5b905060200201356001600160a01b03166001600160a01b031614612992576040805162461bcd60e51b81526020600482015260196024820152600080516020614846833981519152604482015290519081900360640190fd5b61299b836132fe565b92506129db878787878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061339392505050565b91506000806129f084600081518110611a5557fe5b925092505034612a0b82611aaa8588600081518110611a9457fe5b1115612a485760405162461bcd60e51b815260040180806020018281038252602381526020018061474f6023913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db085600081518110612a8457fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015612ab757600080fd5b505af1158015612acb573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb612b108b8a8a600081811061228857fe5b86600081518110612b1d57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612b7457600080fd5b505af1158015612b88573d6000803e3d6000fd5b505050506040513d6020811015612b9e57600080fd5b5051612ba657fe5b612be689858989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503392506137f6915050565b8115612c0157612c01600088886000198101818110611baa57fe5b612c1681611aaa8487600081518110611a9457fe5b341115612c3d57612c3d33612c3683611aaa8689600081518110611a9457fe5b3403613ad0565b50505095945050505050565b612c516114aa565b15612c96576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60035486906001600160a01b0380831691161480612cc157506004546001600160a01b038281169116145b612d00576040805162461bcd60e51b815260206004820152601c6024820152600080516020614826833981519152604482015290519081900360640190fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684846000198101818110612d3a57fe5b905060200201356001600160a01b03166001600160a01b031614612d8f5760405162461bcd60e51b815260040180806020018281038252602d8152602001806147f9602d913960400191505060405180910390fd5b612d98826132fe565b9150612def84846000818110612daa57fe5b905060200201356001600160a01b031633612de98a88886000818110612dcc57fe5b905060200201356001600160a01b0316898960018181106110b057fe5b89613699565b612e2e87858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250613e4c915050565b604080516370a0823160e01b815230600482015290516000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b158015612e9857600080fd5b505afa158015612eac573d6000803e3d6000fd5b505050506040513d6020811015612ec257600080fd5b5051905085811015612f055760405162461bcd60e51b815260040180806020018281038252602481526020018061472b6024913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015612f6b57600080fd5b505af1158015612f7f573d6000803e3d6000fd5b505050506000806000612fa88460006001600160a01b0316886001600160a01b031614156139f6565b925092509250612fb83384613ad0565b81156117e0576117e060008989600019810181811061121b57fe5b612fdb6132fa565b6001600160a01b0316612fec611bcf565b6001600160a01b031614613035576040805162461bcd60e51b815260206004820181905260248201526000805160206147b6833981519152604482015290519081900360640190fd5b6007805461ffff8316600160a81b810261ffff60a81b199092169190911790915560408051918252517f2e8b87e2b3dff0b7b11ce73a61e3bb94498159c531480d9abf1307014b650af99181900360200190a150565b600654600554604080516370a0823160e01b81526001600160a01b03858116600483015291516000949392909216916370a0823191602480820192602092909190829003018186803b1580156130e057600080fd5b505afa1580156130f4573d6000803e3d6000fd5b505050506040513d602081101561310a57600080fd5b5051101592915050565b61311c6132fa565b6001600160a01b031661312d611bcf565b6001600160a01b031614613176576040805162461bcd60e51b815260206004820181905260248201526000805160206147b6833981519152604482015290519081900360640190fd5b60078054821515600160b81b810260ff60b81b199092169190911790915560408051918252517f13a5d968457cb650b136b77bb4a3ff25f31b92939f2d8df0010911117b7ba9e09181900360200190a150565b6004546001600160a01b031681565b6131e06132fa565b6001600160a01b03166131f1611bcf565b6001600160a01b03161461323a576040805162461bcd60e51b815260206004820181905260248201526000805160206147b6833981519152604482015290519081900360640190fd5b6001600160a01b03811661327f5760405162461bcd60e51b81526004018080602001828103825260268152602001806146de6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b600754600160a81b900461ffff1681565b3390565b336000818152600860205260408120549091906001600160a01b0316613372576001600160a01b0381811660008181526008602052604080822080546001600160a01b0319169488169485179055517f4389ea9d577ad3ab7faf0764f4b00da3cb150827be376c9d56dd42bd054d8b1e9190a35b6001600160a01b039081166000908152600860205260409020541692915050565b60606002825110156133da576040805162461bcd60e51b81526020600482015260196024820152600080516020614846833981519152604482015290519081900360640190fd5b815167ffffffffffffffff811180156133f257600080fd5b5060405190808252806020026020018201604052801561341c578160200160208202803683370190505b509050828160018351038151811061343057fe5b60209081029190910101528151600019015b80156134c65760008061347f8786600186038151811061345e57fe5b602002602001015187868151811061347257fe5b6020026020010151614269565b915091506134a184848151811061349257fe5b60200260200101518383614330565b8460018503815181106134b057fe5b6020908102919091010152505060001901613442565b509392505050565b60008060006134dd858561442a565b60035491935091506060906001600160a01b03888116911614613501576002613504565b60015b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156135885780601f1061355d57610100808354040283529160200191613588565b820191906000526020600020905b81548152906001019060200180831161356b57829003601f168201915b5050505050905086838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001208260405160200180806001600160f81b0319815250600101846001600160a01b03166001600160a01b031660601b815260140183815260200182805190602001908083835b6020831061364d5780518252601f19909201916020918201910161362e565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040528051906020012060001c93505050509392505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b6020831061371e5780518252601f1990920191602091820191016136ff565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613780576040519150601f19603f3d011682016040523d82523d6000602084013e613785565b606091505b50915091508180156137b35750805115806137b357508080602001905160208110156137b057600080fd5b50515b6137ee5760405162461bcd60e51b81526004018080602001828103825260248152602001806148896024913960400191505060405180910390fd5b505050505050565b60005b6001835103811015610e705760008084838151811061381457fe5b602002602001015185846001018151811061382b57fe5b6020026020010151915091506000613843838361442a565b509050600087856001018151811061385757fe5b60200260200101519050600080836001600160a01b0316866001600160a01b03161461388557826000613889565b6000835b91509150600060028a510388106138a057886138c1565b6138c18c878c8b600201815181106138b457fe5b60200260200101516134ce565b90506138ce8c88886134ce565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f19166020018201604052801561390b576020820181803683370190505b506040518563ffffffff1660e01b815260040180858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561397c578181015183820152602001613964565b50505050905090810190601f1680156139a95780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156139cb57600080fd5b505af11580156139df573d6000803e3d6000fd5b5050600190990198506137f9975050505050505050565b6000806000613a043361308b565b15613a1757508391506000905080613ac9565b600754600090613a469061271090613a3a908990600160a01b900460ff16614508565b9063ffffffff61456116565b9050613a58868263ffffffff61411d16565b9350848015613a705750600754600160b81b900460ff165b15613abf57600754613a969061271090613a3a908490600160a81b900461ffff16614508565b9150613ab882613aac888763ffffffff61411d16565b9063ffffffff61411d16565b9250613ac7565b600091508092505b505b9250925092565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b60208310613b1c5780518252601f199092019160209182019101613afd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613b7e576040519150601f19603f3d011682016040523d82523d6000602084013e613b83565b606091505b5050905080611c855760405162461bcd60e51b81526004018080602001828103825260238152602001806148666023913960400191505060405180910390fd5b6001600160a01b038516613bfc57600754613be7906001600160a01b031683613ad0565b8015613bf757613bf78382613ad0565b613c28565b600754613c1690869033906001600160a01b031685613699565b8015613c2857613c2885338584613699565b604080513381526001600160a01b03868116602083015287811682840152606082018490529151918516917f84ff16114f882a54c4748006b5e4b0b7ac76bd911d135145a6d063fd76a38a409181900360800190a25050505050565b613c8c6114aa565b613cd4576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613d0a6132fa565b604080516001600160a01b039092168252519081900360200190a1565b6060600282511015613d6e576040805162461bcd60e51b81526020600482015260196024820152600080516020614846833981519152604482015290519081900360640190fd5b815167ffffffffffffffff81118015613d8657600080fd5b50604051908082528060200260200182016040528015613db0578160200160208202803683370190505b5090508281600081518110613dc157fe5b60200260200101818152505060005b60018351038110156134c657600080613e0687868581518110613def57fe5b602002602001015187866001018151811061347257fe5b91509150613e28848481518110613e1957fe5b602002602001015183836145c8565b848460010181518110613e3757fe5b60209081029190910101525050600101613dd0565b60005b600183510381101561411757600080848381518110613e6a57fe5b6020026020010151858460010181518110613e8157fe5b6020026020010151915091506000613e99838361442a565b5090506000613ea98885856134ce565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015613eea57600080fd5b505afa158015613efe573d6000803e3d6000fd5b505050506040513d6060811015613f1457600080fd5b5080516020909101516001600160701b0391821693501690506000806001600160a01b038a811690891614613f4a578284613f4d565b83835b91509150613fab828b6001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561171b57600080fd5b9550613fb88683836145c8565b945050505050600080856001600160a01b0316886001600160a01b031614613fe257826000613fe6565b6000835b91509150600060028c51038a10613ffd578a614011565b6140118d898e8d600201815181106138b457fe5b604080516000808252602082019283905263022c0d9f60e01b835260248201878152604483018790526001600160a01b038086166064850152608060848501908152845160a48601819052969750908c169563022c0d9f958a958a958a9591949193919260c486019290918190849084905b8381101561409b578181015183820152602001614083565b50505050905090810190601f1680156140c85780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156140ea57600080fd5b505af11580156140fe573d6000803e3d6000fd5b50506001909b019a50613e4f9950505050505050505050565b50505050565b600082821115614174576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b6141876114aa565b156141cc576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613d0a6132fa565b600082820183811015614262576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000806000614278858561442a565b5090506000806142898888886134ce565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156142c157600080fd5b505afa1580156142d5573d6000803e3d6000fd5b505050506040513d60608110156142eb57600080fd5b5080516020909101516001600160701b0391821693501690506001600160a01b038781169084161461431e578082614321565b81815b90999098509650505050505050565b60008084116143705760405162461bcd60e51b81526004018080602001828103825260278152602001806147046027913960400191505060405180910390fd5b6000831180156143805750600082115b6143bb5760405162461bcd60e51b81526004018080602001828103825260238152602001806147d66023913960400191505060405180910390fd5b60006143df6127106143d3868863ffffffff61450816565b9063ffffffff61450816565b905060006144036143ef33610c1c565b6126f7036143d3868963ffffffff61411d16565b9050614420600182848161441357fe5b049063ffffffff61420816565b9695505050505050565b600080826001600160a01b0316846001600160a01b0316141561447e5760405162461bcd60e51b81526004018080602001828103825260238152602001806147726023913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b03161061449e5782846144a1565b83835b90925090506001600160a01b038216614501576040805162461bcd60e51b815260206004820152601c60248201527f50616e63616b654c6962726172793a205a45524f5f4144445245535300000000604482015290519081900360640190fd5b9250929050565b60008261451757506000614179565b8282028284828161452457fe5b04146142625760405162461bcd60e51b81526004018080602001828103825260218152602001806147956021913960400191505060405180910390fd5b60008082116145b7576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816145c057fe5b049392505050565b60008084116146085760405162461bcd60e51b81526004018080602001828103825260268152602001806146b86026913960400191505060405180910390fd5b6000831180156146185750600082115b6146535760405162461bcd60e51b81526004018080602001828103825260238152602001806147d66023913960400191505060405180910390fd5b600061467261466133610c1c565b86906126f70363ffffffff61450816565b90506000614686828563ffffffff61450816565b905060006146a083611aaa8861271063ffffffff61450816565b90508082816146ab57fe5b0497965050505050505056fe466c6f6f7a526f757465723a20494e53554646494349454e545f494e5055545f414d4f554e544f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373466c6f6f7a526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e54466c6f6f7a526f757465723a20736c6970706167652073657474696e6720746f206c6f77466c6f6f7a526f757465723a204558434553534956455f494e5055545f414d4f554e5450616e63616b654c6962726172793a204944454e544943414c5f414444524553534553536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572466c6f6f7a526f757465723a20494e53554646494349454e545f4c4951554944495459466c6f6f7a526f757465723a20424e422068617320746f20626520746865206c6173742070617468206974656d466c6f6f7a526f757465723a20696e76616c696420666163746f727900000000466c6f6f7a526f757465723a20494e56414c49445f50415448000000000000005472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220e8c921a71ac34e8d887f9c71496a08ee1f96d4b65e8cc67686b44354455bb36264736f6c63430006060033",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawBnb(address,uint256)": {
        "details": "Withdraw BNB that somehow ended up in the contract."
      },
      "withdrawErc20Token(address,address,uint256)": {
        "details": "Withdraw any erc20 compliant tokens that somehow ended up in the contract."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 583,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1165,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "pancakeInitCodeV1",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1167,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "pancakeInitCodeV2",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1169,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "pancakeFactoryV1",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1171,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "pancakeFactoryV2",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1173,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "saveYourAssetsToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)542"
      },
      {
        "astId": 1175,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "balanceThreshold",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1177,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1179,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "swapFee",
        "offset": 20,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 1181,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "referralRewardRate",
        "offset": 21,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 1183,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "referralsActivated",
        "offset": 23,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 1187,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "referralAnchor",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)542": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}