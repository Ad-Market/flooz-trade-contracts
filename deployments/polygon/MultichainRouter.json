{
  "address": "0x129444679e9A1Dd3142bc51Bf9b6e2d80a6088A2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_swapFee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_referralRewardRate",
          "type": "uint16"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "contract IReferralRegistry",
          "name": "_referralRegistry",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_zeroEx",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_oneInch",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "referralRate",
          "type": "uint16"
        }
      ],
      "name": "CustomReferralRewardRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "feeReceiver",
          "type": "address"
        }
      ],
      "name": "FeeReceiverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "ForkCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "ForkUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "referralRegistry",
          "type": "address"
        }
      ],
      "name": "ReferralRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenReward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReferralRewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "referralRewardRate",
          "type": "uint16"
        }
      ],
      "name": "ReferralRewardRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "activated",
          "type": "bool"
        }
      ],
      "name": "ReferralsActivatedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "swapFee",
          "type": "uint16"
        }
      ],
      "name": "SwapFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "customReferralRewardRate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountFrom",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minOut",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "fee",
          "type": "bool"
        }
      ],
      "name": "executeOneInchSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountFrom",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minOut",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "fee",
          "type": "bool"
        }
      ],
      "name": "executeZeroExSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "forkActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "forkInitCode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReferee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasUserReferee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oneInch",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralRegistry",
      "outputs": [
        {
          "internalType": "contract IReferralRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralRewardRate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralsActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_initCode",
          "type": "bytes"
        }
      ],
      "name": "registerFork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fork",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referee",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fee",
              "type": "bool"
            }
          ],
          "internalType": "struct MultichainRouter.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fork",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referee",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fee",
              "type": "bool"
            }
          ],
          "internalType": "struct MultichainRouter.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fork",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referee",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fee",
              "type": "bool"
            }
          ],
          "internalType": "struct MultichainRouter.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fork",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referee",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fee",
              "type": "bool"
            }
          ],
          "internalType": "struct MultichainRouter.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fork",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referee",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fee",
              "type": "bool"
            }
          ],
          "internalType": "struct MultichainRouter.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fork",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referee",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fee",
              "type": "bool"
            }
          ],
          "internalType": "struct MultichainRouter.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fork",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referee",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fee",
              "type": "bool"
            }
          ],
          "internalType": "struct MultichainRouter.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fork",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referee",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fee",
              "type": "bool"
            }
          ],
          "internalType": "struct MultichainRouter.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fork",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referee",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fee",
              "type": "bool"
            }
          ],
          "internalType": "struct MultichainRouter.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referralRate",
          "type": "uint16"
        }
      ],
      "name": "updateCustomReferralRewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newFeeReceiver",
          "type": "address"
        }
      ],
      "name": "updateFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_initCode",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_activated",
          "type": "bool"
        }
      ],
      "name": "updateFork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReferralRegistry",
          "type": "address"
        }
      ],
      "name": "updateReferralRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newReferralRewardRate",
          "type": "uint16"
        }
      ],
      "name": "updateReferralRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newReferralsActivated",
          "type": "bool"
        }
      ],
      "name": "updateReferralsActivated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newSwapFee",
          "type": "uint16"
        }
      ],
      "name": "updateSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zeroEx",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf5795f6782e98f25c1f800fc3e9ef6b1e82d8c79c6cff879d04ba44a14b51375",
  "receipt": {
    "to": null,
    "from": "0x641ED8498022961CED76E31DB6d26412c4f9C46F",
    "contractAddress": "0x129444679e9A1Dd3142bc51Bf9b6e2d80a6088A2",
    "transactionIndex": 35,
    "gasUsed": "5319288",
    "logsBloom": "0x
    "blockHash": "0x9faaec1416448777ee35292fad24a53de0b411698cf3bf1d0a703079fb223ad6",
    "transactionHash": "0xf5795f6782e98f25c1f800fc3e9ef6b1e82d8c79c6cff879d04ba44a14b51375",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 22566043,
        "transactionHash": "0xf5795f6782e98f25c1f800fc3e9ef6b1e82d8c79c6cff879d04ba44a14b51375",
        "address": "0x129444679e9A1Dd3142bc51Bf9b6e2d80a6088A2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000641ed8498022961ced76e31db6d26412c4f9c46f"
        ],
        "data": "0x",
        "logIndex": 186,
        "blockHash": "0x9faaec1416448777ee35292fad24a53de0b411698cf3bf1d0a703079fb223ad6"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 22566043,
        "transactionHash": "0xf5795f6782e98f25c1f800fc3e9ef6b1e82d8c79c6cff879d04ba44a14b51375",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000641ed8498022961ced76e31db6d26412c4f9c46f",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000761ca6ce1ccc00000000000000000000000000000000000000000000000000a0053ede460db9a0a00000000000000000000000000000000000000000000cb1e01107702ae61fafa000000000000000000000000000000000000000000000009f8f223777f0eda0a00000000000000000000000000000000000000000000cb1e0872416f902ebafa",
        "logIndex": 187,
        "blockHash": "0x9faaec1416448777ee35292fad24a53de0b411698cf3bf1d0a703079fb223ad6"
      }
    ],
    "blockNumber": 22566043,
    "cumulativeGasUsed": "11941224",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270",
    50,
    1000,
    "0x61eF55fF50f0Bc0141E477745fF0c0Ce1Ae664aF",
    "0x5271eca224B21Def908D70c762D90777B0e4f8B8",
    "0xdef1c0ded9bec7f1a1670819833240f027b25eff",
    "0x1111111254fb6c44bAC0beD2854e76F90643097d"
  ],
  "solcInputHash": "a3069635db967a81a0e388a0c643eac6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_swapFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_referralRewardRate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IReferralRegistry\",\"name\":\"_referralRegistry\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_zeroEx\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_oneInch\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralRate\",\"type\":\"uint16\"}],\"name\":\"CustomReferralRewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"FeeReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"ForkCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"ForkUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referralRegistry\",\"type\":\"address\"}],\"name\":\"ReferralRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenReward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralRewardRate\",\"type\":\"uint16\"}],\"name\":\"ReferralRewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"ReferralsActivatedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"swapFee\",\"type\":\"uint16\"}],\"name\":\"SwapFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customReferralRewardRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFrom\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"name\":\"executeOneInchSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFrom\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"name\":\"executeZeroExSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"forkActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"forkInitCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReferee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasUserReferee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInch\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRegistry\",\"outputs\":[{\"internalType\":\"contract IReferralRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRewardRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralsActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_initCode\",\"type\":\"bytes\"}],\"name\":\"registerFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"internalType\":\"struct MultichainRouter.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"internalType\":\"struct MultichainRouter.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"internalType\":\"struct MultichainRouter.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"internalType\":\"struct MultichainRouter.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"internalType\":\"struct MultichainRouter.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"internalType\":\"struct MultichainRouter.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"internalType\":\"struct MultichainRouter.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"internalType\":\"struct MultichainRouter.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"internalType\":\"struct MultichainRouter.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralRate\",\"type\":\"uint16\"}],\"name\":\"updateCustomReferralRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_initCode\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_activated\",\"type\":\"bool\"}],\"name\":\"updateFork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReferralRegistry\",\"type\":\"address\"}],\"name\":\"updateReferralRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newReferralRewardRate\",\"type\":\"uint16\"}],\"name\":\"updateReferralRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newReferralsActivated\",\"type\":\"bool\"}],\"name\":\"updateReferralsActivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newSwapFee\",\"type\":\"uint16\"}],\"name\":\"updateSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroEx\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"constructor\":{\"details\":\"construct this contract\",\"params\":{\"_WETH\":\"address of WETH.\",\"_feeReceiver\":\"address that receives protocol fees\",\"_referralRegistry\":\"address of referral registry that stores referral anchors\",\"_referralRewardRate\":\"percentage of swapFee that are paid out as rewards\",\"_swapFee\":\"nominator for swapFee. Denominator = 10000\",\"_zeroEx\":\"address of zeroX proxy contract to forward swaps\"}},\"executeZeroExSwap(bytes,address,address,uint256,address,uint256,bool)\":{\"details\":\"Executes a swap on 0x API\",\"params\":{\"data\":\"calldata expected by data field on 0x API (https://0x.org/docs/api#response-1)\",\"fee\":\"boolean if fee should be applied or not\",\"fromToken\":\"the address of currency to sell - 0x address for ETH\",\"referee\":\"address of referee for msg.sender, 0x adress if none\",\"toToken\":\"the address of currency to buy - 0x address for ETH\"}},\"getUserReferee(address)\":{\"details\":\"returns the referee for a given user - 0x address if none\"},\"hasUserReferee(address)\":{\"details\":\"returns if the given user has been referred or not\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"lets the admin pause this contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerFork(address,bytes)\":{\"details\":\"lets the admin register an Uniswap style fork\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"swapETHForExactTokens((address,address,bool),uint256,address[])\":{\"details\":\"execute swap directly on Uniswap/Pancake/...\",\"params\":{\"amountOut\":\"expected amount of tokens out\",\"path\":\"Sell path.\",\"swapData\":\"stores the swapData information\"},\"returns\":{\"amounts\":\"amounts\"}},\"swapExactETHForTokens((address,address,bool),uint256,address[])\":{\"details\":\"execute swap directly on Uniswap/Pancake & simular forks\",\"params\":{\"amountOutMin\":\"minimum tokens to receive\",\"path\":\"Sell path.\",\"swapData\":\"stores the swapData information\"},\"returns\":{\"amounts\":\"amounts\"}},\"swapExactETHForTokensSupportingFeeOnTransferTokens((address,address,bool),uint256,address[])\":{\"details\":\"execute swap directly on Uniswap/Pancake/...\",\"params\":{\"amountOutMin\":\"minimum expected tokens to receive\",\"path\":\"Sell path.\",\"swapData\":\"stores the swapData information\"}},\"swapExactTokensForETH((address,address,bool),uint256,uint256,address[])\":{\"details\":\"execute swap directly on Uniswap/Pancake/...\",\"params\":{\"amountIn\":\"amount if tokens In\",\"amountOutMin\":\"minimum tokens to receive\",\"path\":\"Sell path.\",\"swapData\":\"stores the swapData information\"},\"returns\":{\"amounts\":\"amounts\"}},\"swapExactTokensForETHSupportingFeeOnTransferTokens((address,address,bool),uint256,uint256,address[])\":{\"details\":\"execute swap directly on Uniswap/Pancake/...\",\"params\":{\"amountIn\":\"amount of tokensIn\",\"amountOutMin\":\"minimum tokens to receive\",\"path\":\"Sell path.\",\"swapData\":\"stores the swapData information\"}},\"swapExactTokensForTokens((address,address,bool),uint256,uint256,address[])\":{\"details\":\"execute swap directly on Uniswap/Pancake/...\",\"params\":{\"amountIn\":\"amount if tokens In\",\"amountOutMin\":\"minimum tokens to receive\",\"path\":\"Sell path.\",\"swapData\":\"stores the swapData information\"},\"returns\":{\"amounts\":\"amounts\"}},\"swapExactTokensForTokensSupportingFeeOnTransferTokens((address,address,bool),uint256,uint256,address[])\":{\"details\":\"execute swap directly on Uniswap/Pancake/...\",\"params\":{\"amountIn\":\"amount if tokens In\",\"amountOutMin\":\"minimum tokens to receive\",\"path\":\"Sell path.\",\"swapData\":\"stores the swapData information\"}},\"swapTokensForExactETH((address,address,bool),uint256,uint256,address[])\":{\"details\":\"execute swap directly on Uniswap/Pancake/...\",\"params\":{\"amountInMax\":\"maximum tokens to send\",\"amountOut\":\"expected tokens to receive\",\"path\":\"Sell path.\",\"swapData\":\"stores the swapData information\"},\"returns\":{\"amounts\":\"amounts\"}},\"swapTokensForExactTokens((address,address,bool),uint256,uint256,address[])\":{\"details\":\"execute swap directly on Uniswap/Pancake/...\",\"params\":{\"amountInMax\":\"maximum tokens to send\",\"amountOut\":\"expected tokens to receive\",\"path\":\"Sell path.\",\"swapData\":\"stores the swapData information\"},\"returns\":{\"amounts\":\"amounts\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"lets the admin unpause this contract\"},\"updateCustomReferralRewardRate(address,uint16)\":{\"details\":\"lets the admin set a custom referral rate\"},\"updateFeeReceiver(address)\":{\"details\":\"lets the admin update which address receives the protocol fees\"},\"updateFork(address,bytes,bool)\":{\"details\":\"lets the admin update an Uniswap style fork\"},\"updateReferralRegistry(address)\":{\"details\":\"lets the admin set a new referral registry\"},\"updateReferralRewardRate(uint16)\":{\"details\":\"lets the admin update the referral reward rate\"},\"updateReferralsActivated(bool)\":{\"details\":\"lets the admin update the status of the referral system\"},\"updateSwapFee(uint16)\":{\"details\":\"lets the admin update the swapFee nominator\"},\"withdrawERC20Token(address,address,uint256)\":{\"details\":\"lets the admin withdraw ERC20s from the contract.\"},\"withdrawETH(address,uint256)\":{\"details\":\"lets the admin withdraw ETH from the contract.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/FloozMultichainRouterV2.sol\":\"MultichainRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\"},\"contracts/FloozMultichainRouterV2.sol\":{\"content\":\"pragma solidity =0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/PancakeLibrary.sol\\\";\\nimport \\\"./interfaces/IReferralRegistry.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IZerox.sol\\\";\\n\\ncontract MultichainRouter is Ownable, Pausable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    event SwapFeeUpdated(uint16 swapFee);\\n    event ReferralRegistryUpdated(address referralRegistry);\\n    event ReferralRewardRateUpdated(uint16 referralRewardRate);\\n    event ReferralsActivatedUpdated(bool activated);\\n    event FeeReceiverUpdated(address payable feeReceiver);\\n    event CustomReferralRewardRateUpdated(address indexed account, uint16 referralRate);\\n    event ReferralRewardPaid(address from, address indexed to, address tokenOut, address tokenReward, uint256 amount);\\n    event ForkCreated(address factory);\\n    event ForkUpdated(address factory);\\n\\n    struct SwapData {\\n        address fork;\\n        address referee;\\n        bool fee;\\n    }\\n\\n    // Denominator of fee\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n\\n    // Numerator of fee\\n    uint16 public swapFee;\\n\\n    // address of WETH\\n    address public immutable WETH;\\n\\n    // address of zeroEx proxy contract to forward swaps\\n    address payable public immutable zeroEx;\\n\\n    // address of 1inch contract to forward swaps\\n    address payable public immutable oneInch;\\n\\n    // address of referral registry that stores referral anchors\\n    IReferralRegistry public referralRegistry;\\n\\n    // address that receives protocol fees\\n    address payable public feeReceiver;\\n\\n    // percentage of fees that will be paid as rewards\\n    uint16 public referralRewardRate;\\n\\n    // stores if the referral system is turned on or off\\n    bool public referralsActivated;\\n\\n    // stores individual referral rates\\n    mapping(address => uint16) public customReferralRewardRate;\\n\\n    // stores uniswap forks status, index is the factory address\\n    mapping(address => bool) public forkActivated;\\n\\n    // stores uniswap forks initCodes, index is the factory address\\n    mapping(address => bytes) public forkInitCode;\\n\\n    /// @dev construct this contract\\n    /// @param _WETH address of WETH.\\n    /// @param _swapFee nominator for swapFee. Denominator = 10000\\n    /// @param _referralRewardRate percentage of swapFee that are paid out as rewards\\n    /// @param _feeReceiver address that receives protocol fees\\n    /// @param _referralRegistry address of referral registry that stores referral anchors\\n    /// @param _zeroEx address of zeroX proxy contract to forward swaps\\n    constructor(\\n        address _WETH,\\n        uint16 _swapFee,\\n        uint16 _referralRewardRate,\\n        address payable _feeReceiver,\\n        IReferralRegistry _referralRegistry,\\n        address payable _zeroEx,\\n        address payable _oneInch\\n    ) public {\\n        WETH = _WETH;\\n        swapFee = _swapFee;\\n        referralRewardRate = _referralRewardRate;\\n        feeReceiver = _feeReceiver;\\n        referralRegistry = _referralRegistry;\\n        zeroEx = _zeroEx;\\n        oneInch = _oneInch;\\n        referralsActivated = true;\\n    }\\n\\n    /// @dev execute swap directly on Uniswap/Pancake & simular forks\\n    /// @param swapData stores the swapData information\\n    /// @param amountOutMin minimum tokens to receive\\n    /// @param path Sell path.\\n    /// @return amounts\\n    function swapExactETHForTokens(\\n        SwapData calldata swapData,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    )\\n        external\\n        payable\\n        whenNotPaused\\n        isValidFork(swapData.fork)\\n        isValidReferee(swapData.referee)\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path[0] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        address referee = _getReferee(swapData.referee);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n            swapData.fee,\\n            msg.value,\\n            referee,\\n            false\\n        );\\n        amounts = _getAmountsOut(swapData.fork, swapAmount, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(_pairFor(swapData.fork, path[0], path[1]), amounts[0]));\\n        _swap(swapData.fork, amounts, path, msg.sender);\\n\\n        if (feeAmount.add(referralReward) > 0)\\n            _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    /// @dev execute swap directly on Uniswap/Pancake/...\\n    /// @param swapData stores the swapData information\\n    /// @param amountIn amount of tokensIn\\n    /// @param amountOutMin minimum tokens to receive\\n    /// @param path Sell path.\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        SwapData calldata swapData,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external whenNotPaused isValidFork(swapData.fork) isValidReferee(swapData.referee) {\\n        require(path[path.length - 1] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        address referee = _getReferee(swapData.referee);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(swapData.fork, path[0], path[1]), amountIn);\\n        _swapSupportingFeeOnTransferTokens(swapData.fork, path, address(this));\\n        uint256 amountOut = IERC20(WETH).balanceOf(address(this));\\n        IWETH(WETH).withdraw(amountOut);\\n        (uint256 amountWithdraw, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n            swapData.fee,\\n            amountOut,\\n            referee,\\n            false\\n        );\\n        require(amountWithdraw >= amountOutMin, \\\"FloozRouter: LOW_SLIPPAGE\\\");\\n        TransferHelper.safeTransferETH(msg.sender, amountWithdraw);\\n\\n        if (feeAmount.add(referralReward) > 0)\\n            _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    /// @dev execute swap directly on Uniswap/Pancake/...\\n    /// @param swapData stores the swapData information\\n    /// @param amountIn amount if tokens In\\n    /// @param amountOutMin minimum tokens to receive\\n    /// @param path Sell path.\\n    /// @return amounts\\n    function swapExactTokensForTokens(\\n        SwapData calldata swapData,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    )\\n        external\\n        whenNotPaused\\n        isValidFork(swapData.fork)\\n        isValidReferee(swapData.referee)\\n        returns (uint256[] memory amounts)\\n    {\\n        address referee = _getReferee(swapData.referee);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n            swapData.fee,\\n            amountIn,\\n            referee,\\n            false\\n        );\\n        amounts = _getAmountsOut(swapData.fork, swapAmount, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(swapData.fork, path[0], path[1]), swapAmount);\\n        _swap(swapData.fork, amounts, path, msg.sender);\\n\\n        if (feeAmount.add(referralReward) > 0)\\n            _withdrawFeesAndRewards(path[0], path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    /// @dev execute swap directly on Uniswap/Pancake/...\\n    /// @param swapData stores the swapData information\\n    /// @param amountIn amount if tokens In\\n    /// @param amountOutMin minimum tokens to receive\\n    /// @param path Sell path.\\n    /// @return amounts\\n    function swapExactTokensForETH(\\n        SwapData calldata swapData,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    )\\n        external\\n        whenNotPaused\\n        isValidFork(swapData.fork)\\n        isValidReferee(swapData.referee)\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path[path.length - 1] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        address referee = _getReferee(swapData.referee);\\n        amounts = _getAmountsOut(swapData.fork, amountIn, path);\\n        (uint256 amountWithdraw, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n            swapData.fee,\\n            amounts[amounts.length - 1],\\n            referee,\\n            false\\n        );\\n        require(amountWithdraw >= amountOutMin, \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(swapData.fork, path[0], path[1]), amounts[0]);\\n        _swap(swapData.fork, amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(msg.sender, amountWithdraw);\\n\\n        if (feeAmount.add(referralReward) > 0)\\n            _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    /// @dev execute swap directly on Uniswap/Pancake/...\\n    /// @param swapData stores the swapData information\\n    /// @param amountOut expected amount of tokens out\\n    /// @param path Sell path.\\n    /// @return amounts\\n    function swapETHForExactTokens(\\n        SwapData calldata swapData,\\n        uint256 amountOut,\\n        address[] calldata path\\n    )\\n        external\\n        payable\\n        whenNotPaused\\n        isValidFork(swapData.fork)\\n        isValidReferee(swapData.referee)\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path[0] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        address referee = _getReferee(swapData.referee);\\n        amounts = _getAmountsIn(swapData.fork, amountOut, path);\\n        (, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n            swapData.fee,\\n            amounts[0],\\n            referee,\\n            true\\n        );\\n        require(amounts[0].add(feeAmount).add(referralReward) <= msg.value, \\\"FloozRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\n\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(_pairFor(swapData.fork, path[0], path[1]), amounts[0]));\\n        _swap(swapData.fork, amounts, path, msg.sender);\\n\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0].add(feeAmount).add(referralReward))\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0].add(feeAmount).add(referralReward));\\n\\n        if (feeAmount.add(referralReward) > 0)\\n            _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    /// @dev execute swap directly on Uniswap/Pancake/...\\n    /// @param swapData stores the swapData information\\n    /// @param amountIn amount if tokens In\\n    /// @param amountOutMin minimum tokens to receive\\n    /// @param path Sell path.\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        SwapData calldata swapData,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external whenNotPaused isValidFork(swapData.fork) isValidReferee(swapData.referee) {\\n        address referee = _getReferee(swapData.referee);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n            swapData.fee,\\n            amountIn,\\n            referee,\\n            false\\n        );\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(swapData.fork, path[0], path[1]), swapAmount);\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(msg.sender);\\n        _swapSupportingFeeOnTransferTokens(swapData.fork, path, msg.sender);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(msg.sender).sub(balanceBefore) >= amountOutMin,\\n            \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n\\n        if (feeAmount.add(referralReward) > 0)\\n            _withdrawFeesAndRewards(path[0], path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    /// @dev execute swap directly on Uniswap/Pancake/...\\n    /// @param swapData stores the swapData information\\n    /// @param amountOut expected tokens to receive\\n    /// @param amountInMax maximum tokens to send\\n    /// @param path Sell path.\\n    /// @return amounts\\n    function swapTokensForExactTokens(\\n        SwapData calldata swapData,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    )\\n        external\\n        whenNotPaused\\n        isValidFork(swapData.fork)\\n        isValidReferee(swapData.referee)\\n        returns (uint256[] memory amounts)\\n    {\\n        address referee = _getReferee(swapData.referee);\\n        amounts = _getAmountsIn(swapData.fork, amountOut, path);\\n        (, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n            swapData.fee,\\n            amounts[0],\\n            referee,\\n            true\\n        );\\n\\n        require(amounts[0].add(feeAmount).add(referralReward) <= amountInMax, \\\"FloozRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(swapData.fork, path[0], path[1]), amounts[0]);\\n        _swap(swapData.fork, amounts, path, msg.sender);\\n\\n        if (feeAmount.add(referralReward) > 0)\\n            _withdrawFeesAndRewards(path[0], path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    /// @dev execute swap directly on Uniswap/Pancake/...\\n    /// @param swapData stores the swapData information\\n    /// @param amountOut expected tokens to receive\\n    /// @param amountInMax maximum tokens to send\\n    /// @param path Sell path.\\n    /// @return amounts\\n    function swapTokensForExactETH(\\n        SwapData calldata swapData,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    )\\n        external\\n        whenNotPaused\\n        isValidFork(swapData.fork)\\n        isValidReferee(swapData.referee)\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path[path.length - 1] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        address referee = _getReferee(swapData.referee);\\n\\n        (, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n            swapData.fee,\\n            amountOut,\\n            referee,\\n            true\\n        );\\n\\n        amounts = _getAmountsIn(swapData.fork, amountOut.add(feeAmount).add(referralReward), path);\\n        require(amounts[0].add(feeAmount).add(referralReward) <= amountInMax, \\\"FloozRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(swapData.fork, path[0], path[1]), amounts[0]);\\n        _swap(swapData.fork, amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n\\n        TransferHelper.safeTransferETH(msg.sender, amountOut);\\n        if (feeAmount.add(referralReward) > 0)\\n            _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    /// @dev execute swap directly on Uniswap/Pancake/...\\n    /// @param swapData stores the swapData information\\n    /// @param amountOutMin minimum expected tokens to receive\\n    /// @param path Sell path.\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        SwapData calldata swapData,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external payable whenNotPaused isValidFork(swapData.fork) isValidReferee(swapData.referee) {\\n        require(path[0] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        address referee = _getReferee(swapData.referee);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n            swapData.fee,\\n            msg.value,\\n            referee,\\n            false\\n        );\\n        IWETH(WETH).deposit{value: swapAmount}();\\n        assert(IWETH(WETH).transfer(_pairFor(swapData.fork, path[0], path[1]), swapAmount));\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(msg.sender);\\n        _swapSupportingFeeOnTransferTokens(swapData.fork, path, msg.sender);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(msg.sender).sub(balanceBefore) >= amountOutMin,\\n            \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        if (feeAmount.add(referralReward) > 0)\\n            _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    /// @dev returns the referee for a given address, if new, registers referee\\n    /// @param referee the address of the referee for msg.sender\\n    /// @return referee address from referral registry\\n    function _getReferee(address referee) internal returns (address) {\\n        address sender = msg.sender;\\n        if (!referralRegistry.hasUserReferee(sender) && referee != address(0)) {\\n            referralRegistry.createReferralAnchor(sender, referee);\\n        }\\n        return referralRegistry.getUserReferee(sender);\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address fork,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? _pairFor(fork, output, path[i + 2]) : _to;\\n            IPancakePair(_pairFor(fork, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(\\n        address fork,\\n        address[] memory path,\\n        address _to\\n    ) internal {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            IPancakePair pair = IPancakePair(_pairFor(fork, input, output));\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            {\\n                // scope to avoid stack too deep errors\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\\n                    ? (reserve0, reserve1)\\n                    : (reserve1, reserve0);\\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\n                amountOutput = _getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOutput)\\n                : (amountOutput, uint256(0));\\n            address to = i < path.length - 2 ? _pairFor(fork, output, path[i + 2]) : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function executeOneInchSwap(\\n        bytes calldata data,\\n        address fromToken,\\n        address toToken,\\n        uint256 amountFrom,\\n        address referee,\\n        uint256 minOut,\\n        bool fee\\n    ) external payable nonReentrant whenNotPaused isValidReferee(referee) {\\n        if (!fee) {\\n            // execute without fees\\n            if (fromToken != address(0)) {\\n                IERC20(fromToken).transferFrom(msg.sender, address(this), amountFrom);\\n                IERC20(fromToken).approve(oneInch, amountFrom);\\n            }\\n            // executes trade and sends toToken to defined recipient\\n            (bool success, bytes memory _data) = address(oneInch).call{value: msg.value}(data);\\n            if (success) {\\n                (uint256 returnAmount, ) = abi.decode(_data, (uint256, uint256));\\n                require(returnAmount >= minOut, \\\"FloozRouter: Insufficient Output Amount\\\");\\n            } else {\\n                revert();\\n            }\\n        } else {\\n            // Swap from ETH\\n            if (msg.value > 0 && fromToken == address(0)) {\\n                (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n                    fee,\\n                    msg.value,\\n                    referee,\\n                    false\\n                );\\n                (bool success, bytes memory _data) = address(oneInch).call{value: swapAmount}(data);\\n                if (success) {\\n                    (uint256 returnAmount, ) = abi.decode(_data, (uint256, uint256));\\n                    require(returnAmount >= minOut, \\\"FloozRouter: Insufficient Output Amount\\\");\\n                } else {\\n                    revert();\\n                }\\n                _withdrawFeesAndRewards(address(0), toToken, referee, feeAmount, referralReward);\\n                // Swap from token\\n            } else {\\n                (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n                    fee,\\n                    amountFrom,\\n                    referee,\\n                    false\\n                );\\n                IERC20(fromToken).transferFrom(msg.sender, address(this), swapAmount);\\n                IERC20(fromToken).approve(oneInch, swapAmount);\\n                (bool success, bytes memory _data) = address(oneInch).call(data);\\n                if (success) {\\n                    (uint256 returnAmount, ) = abi.decode(_data, (uint256, uint256));\\n                    require(returnAmount >= minOut, \\\"FloozRouter: Insufficient Output Amount\\\");\\n                } else {\\n                    revert();\\n                }\\n                _withdrawFeesAndRewards(fromToken, toToken, referee, feeAmount, referralReward);\\n            }\\n        }\\n    }\\n\\n    /// @dev Executes a swap on 0x API\\n    /// @param data calldata expected by data field on 0x API (https://0x.org/docs/api#response-1)\\n    /// @param fromToken the address of currency to sell - 0x address for ETH\\n    /// @param toToken the address of currency to buy - 0x address for ETH\\n    /// @param referee address of referee for msg.sender, 0x adress if none\\n    /// @param fee boolean if fee should be applied or not\\n    function executeZeroExSwap(\\n        bytes calldata data,\\n        address fromToken,\\n        address toToken,\\n        uint256 amountFrom,\\n        address referee,\\n        uint256 minOut,\\n        bool fee\\n    ) external payable nonReentrant whenNotPaused isValidReferee(referee) {\\n        referee = _getReferee(referee);\\n        if (!fee) {\\n            if (msg.value > 0 && fromToken == address(0)) {\\n                (bool success, ) = zeroEx.call{value: msg.value}(data);\\n                require(success, \\\"FloozRouter: REVERTED\\\");\\n                require(IERC20(toToken).balanceOf(address(this)) >= minOut, \\\"FloozRouter: Insufficient Output Amount\\\");\\n                TransferHelper.safeTransfer(toToken, msg.sender, IERC20(toToken).balanceOf(address(this)));\\n            } else {\\n                IERC20(fromToken).transferFrom(msg.sender, address(this), amountFrom);\\n                IERC20(fromToken).approve(zeroEx, amountFrom);\\n                (bool success, ) = zeroEx.call(data);\\n                require(success, \\\"FloozRouter: REVERTED\\\");\\n                if (toToken == address(0)) {\\n                    require(address(this).balance >= minOut, \\\"FloozRouter: Insufficient Output Amount\\\");\\n                    TransferHelper.safeTransferETH(msg.sender, address(this).balance);\\n                } else {\\n                    require(\\n                        IERC20(toToken).balanceOf(address(this)) >= minOut,\\n                        \\\"FloozRouter: Insufficient Output Amount\\\"\\n                    );\\n                    TransferHelper.safeTransfer(toToken, msg.sender, IERC20(toToken).balanceOf(address(this)));\\n                }\\n            }\\n        } else {\\n            if (msg.value > 0 && fromToken == address(0)) {\\n                (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n                    fee,\\n                    msg.value,\\n                    referee,\\n                    false\\n                );\\n                (bool success, ) = zeroEx.call{value: swapAmount}(data);\\n                require(success, \\\"FloozRouter: REVERTED\\\");\\n                require(IERC20(toToken).balanceOf(address(this)) >= minOut, \\\"FloozRouter: Insufficient Output Amount\\\");\\n                TransferHelper.safeTransfer(toToken, msg.sender, IERC20(toToken).balanceOf(address(this)));\\n                _withdrawFeesAndRewards(address(0), toToken, referee, feeAmount, referralReward);\\n            } else {\\n                (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(\\n                    fee,\\n                    amountFrom,\\n                    referee,\\n                    false\\n                );\\n                IERC20(fromToken).transferFrom(msg.sender, address(this), amountFrom);\\n                IERC20(fromToken).approve(zeroEx, swapAmount);\\n                (bool success, ) = zeroEx.call(data);\\n                require(success, \\\"FloozRouter: REVERTED\\\");\\n                if (toToken == address(0)) {\\n                    require(address(this).balance >= minOut, \\\"FloozRouter: Insufficient Output Amount\\\");\\n                    TransferHelper.safeTransferETH(msg.sender, address(this).balance);\\n                } else {\\n                    require(\\n                        IERC20(toToken).balanceOf(address(this)) >= minOut,\\n                        \\\"FloozRouter: Insufficient Output Amount\\\"\\n                    );\\n                    TransferHelper.safeTransfer(toToken, msg.sender, IERC20(toToken).balanceOf(address(this)));\\n                }\\n                _withdrawFeesAndRewards(fromToken, toToken, referee, feeAmount, referralReward);\\n            }\\n        }\\n    }\\n\\n    /// @dev calculates swap, fee & reward amounts\\n    /// @param fee boolean if fee will be applied or not\\n    /// @param amount total amount of tokens\\n    /// @param referee the address of the referee for msg.sender\\n    function _calculateFeesAndRewards(\\n        bool fee,\\n        uint256 amount,\\n        address referee,\\n        bool additiveFee\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 swapAmount,\\n            uint256 feeAmount,\\n            uint256 referralReward\\n        )\\n    {\\n        // no fees for users above threshold\\n        if (!fee) {\\n            swapAmount = amount;\\n        } else {\\n            if (additiveFee) {\\n                swapAmount = amount;\\n                feeAmount = swapAmount.mul(FEE_DENOMINATOR).div(FEE_DENOMINATOR.sub(swapFee)).sub(amount);\\n            } else {\\n                feeAmount = amount.mul(swapFee).div(FEE_DENOMINATOR);\\n                swapAmount = amount.sub(feeAmount);\\n            }\\n\\n            // calculate referral rates, if referee is not 0x\\n            if (referee != address(0) && referralsActivated) {\\n                uint16 referralRate = customReferralRewardRate[referee] > 0\\n                    ? customReferralRewardRate[referee]\\n                    : referralRewardRate;\\n                referralReward = feeAmount.mul(referralRate).div(FEE_DENOMINATOR);\\n                feeAmount = feeAmount.sub(referralReward);\\n            } else {\\n                referralReward = 0;\\n            }\\n        }\\n    }\\n\\n    /// @dev lets the admin register an Uniswap style fork\\n    function registerFork(address _factory, bytes calldata _initCode) external onlyOwner {\\n        require(!forkActivated[_factory], \\\"FloozRouter: ACTIVE_FORK\\\");\\n        forkActivated[_factory] = true;\\n        forkInitCode[_factory] = _initCode;\\n        emit ForkCreated(_factory);\\n    }\\n\\n    /// @dev lets the admin update an Uniswap style fork\\n    function updateFork(\\n        address _factory,\\n        bytes calldata _initCode,\\n        bool _activated\\n    ) external onlyOwner {\\n        forkActivated[_factory] = _activated;\\n        forkInitCode[_factory] = _initCode;\\n        emit ForkUpdated(_factory);\\n    }\\n\\n    /// @dev lets the admin update the swapFee nominator\\n    function updateSwapFee(uint16 newSwapFee) external onlyOwner {\\n        swapFee = newSwapFee;\\n        emit SwapFeeUpdated(newSwapFee);\\n    }\\n\\n    /// @dev lets the admin update the referral reward rate\\n    function updateReferralRewardRate(uint16 newReferralRewardRate) external onlyOwner {\\n        require(newReferralRewardRate <= FEE_DENOMINATOR, \\\"FloozRouter: INVALID_RATE\\\");\\n        referralRewardRate = newReferralRewardRate;\\n        emit ReferralRewardRateUpdated(newReferralRewardRate);\\n    }\\n\\n    /// @dev lets the admin update which address receives the protocol fees\\n    function updateFeeReceiver(address payable newFeeReceiver) external onlyOwner {\\n        feeReceiver = newFeeReceiver;\\n        emit FeeReceiverUpdated(newFeeReceiver);\\n    }\\n\\n    /// @dev lets the admin update the status of the referral system\\n    function updateReferralsActivated(bool newReferralsActivated) external onlyOwner {\\n        referralsActivated = newReferralsActivated;\\n        emit ReferralsActivatedUpdated(newReferralsActivated);\\n    }\\n\\n    /// @dev lets the admin set a new referral registry\\n    function updateReferralRegistry(address newReferralRegistry) external onlyOwner {\\n        referralRegistry = IReferralRegistry(newReferralRegistry);\\n        emit ReferralRegistryUpdated(newReferralRegistry);\\n    }\\n\\n    /// @dev lets the admin set a custom referral rate\\n    function updateCustomReferralRewardRate(address account, uint16 referralRate) external onlyOwner returns (uint256) {\\n        require(referralRate <= FEE_DENOMINATOR, \\\"FloozRouter: INVALID_RATE\\\");\\n        customReferralRewardRate[account] = referralRate;\\n        emit CustomReferralRewardRateUpdated(account, referralRate);\\n    }\\n\\n    /// @dev returns the referee for a given user - 0x address if none\\n    function getUserReferee(address user) external view returns (address) {\\n        return referralRegistry.getUserReferee(user);\\n    }\\n\\n    /// @dev returns if the given user has been referred or not\\n    function hasUserReferee(address user) external view returns (bool) {\\n        return referralRegistry.hasUserReferee(user);\\n    }\\n\\n    /// @dev lets the admin withdraw ETH from the contract.\\n    function withdrawETH(address payable to, uint256 amount) external onlyOwner {\\n        TransferHelper.safeTransferETH(to, amount);\\n    }\\n\\n    /// @dev lets the admin withdraw ERC20s from the contract.\\n    function withdrawERC20Token(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        TransferHelper.safeTransfer(token, to, amount);\\n    }\\n\\n    /// @dev distributes fees & referral rewards to users\\n    function _withdrawFeesAndRewards(\\n        address tokenReward,\\n        address tokenOut,\\n        address referee,\\n        uint256 feeAmount,\\n        uint256 referralReward\\n    ) internal {\\n        if (tokenReward == address(0)) {\\n            TransferHelper.safeTransferETH(feeReceiver, feeAmount);\\n            if (referralReward > 0) {\\n                TransferHelper.safeTransferETH(referee, referralReward);\\n                emit ReferralRewardPaid(msg.sender, referee, tokenOut, tokenReward, referralReward);\\n            }\\n        } else {\\n            TransferHelper.safeTransferFrom(tokenReward, msg.sender, feeReceiver, feeAmount);\\n            if (referralReward > 0) {\\n                TransferHelper.safeTransferFrom(tokenReward, msg.sender, referee, referralReward);\\n                emit ReferralRewardPaid(msg.sender, referee, tokenOut, tokenReward, referralReward);\\n            }\\n        }\\n    }\\n\\n    /// @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"FloozRouter: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"FloozRouter: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul((9970));\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(10000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /// @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function _getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"FloozRouter: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(10000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(9970);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    /// @dev performs chained getAmountOut calculations on any number of pairs\\n    function _getAmountsOut(\\n        address fork,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"FloozRouter: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = _getReserves(fork, path[i], path[i + 1]);\\n            amounts[i + 1] = _getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    /// @dev performs chained getAmountIn calculations on any number of pairs\\n    function _getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"FloozRouter: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = _getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = _getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    /// @dev fetches and sorts the reserves for a pair\\n    function _getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = PancakeLibrary.sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(_pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    /// @dev calculates the CREATE2 address for a pair without making any external calls\\n    function _pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        (address token0, address token1) = PancakeLibrary.sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        forkInitCode[factory] // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @dev lets the admin pause this contract\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @dev lets the admin unpause this contract\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @dev allows to receive ETH on the contract\\n    receive() external payable {}\\n\\n    modifier isValidFork(address factory) {\\n        require(forkActivated[factory], \\\"FloozRouter: INVALID_FACTORY\\\");\\n        _;\\n    }\\n\\n    modifier isValidReferee(address referee) {\\n        require(msg.sender != referee, \\\"FloozRouter: SELF_REFERRAL\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x67f3bab52b13dbb8b27cb5abc175ceaf99b68f53ec57aa91e1aca3cd26c2dc45\"},\"contracts/interfaces/IReferralRegistry.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IReferralRegistry {\\n    function getUserReferee(address _user) external view returns (address);\\n\\n    function hasUserReferee(address _user) external view returns (bool);\\n\\n    function createReferralAnchor(address _user, address _referee) external;\\n}\\n\",\"keccak256\":\"0x472f86092650a750fc4c35a0452849e233b2fc7922d3f98df8f9311c475d0380\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd0ade614a95b3c690c2714d314d10a936f97afe97e05efe1b74e632dcce01ca6\"},\"contracts/interfaces/IZerox.sol\":{\"content\":\"pragma solidity ^0.6.5;\\n\\ninterface IZerox {\\n    function getFunctionImplementation(bytes4 selector) external returns (address payable);\\n}\\n\",\"keccak256\":\"0xf2166db2d887a229459853f8d0ae6b4837a0caf5031f394947f1caf2a3e05032\"},\"contracts/libraries/PancakeLibrary.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\nlibrary PancakeLibrary {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"PancakeLibrary: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"PancakeLibrary: ZERO_ADDRESS\\\");\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"PancakeLibrary: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n}\\n\",\"keccak256\":\"0xee1dac643a6d0fea3b1462de6b3bb69872b3e10211e3371ae4e8e40d5b61d0c5\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x05883189981669420f159c9f6c45e7455240a719d710e4bf4b0c74771e354d47\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "constructor": {
        "details": "construct this contract",
        "params": {
          "_WETH": "address of WETH.",
          "_feeReceiver": "address that receives protocol fees",
          "_referralRegistry": "address of referral registry that stores referral anchors",
          "_referralRewardRate": "percentage of swapFee that are paid out as rewards",
          "_swapFee": "nominator for swapFee. Denominator = 10000",
          "_zeroEx": "address of zeroX proxy contract to forward swaps"
        }
      },
      "executeZeroExSwap(bytes,address,address,uint256,address,uint256,bool)": {
        "details": "Executes a swap on 0x API",
        "params": {
          "data": "calldata expected by data field on 0x API (https://0x.org/docs/api#response-1)",
          "fee": "boolean if fee should be applied or not",
          "fromToken": "the address of currency to sell - 0x address for ETH",
          "referee": "address of referee for msg.sender, 0x adress if none",
          "toToken": "the address of currency to buy - 0x address for ETH"
        }
      },
      "getUserReferee(address)": {
        "details": "returns the referee for a given user - 0x address if none"
      },
      "hasUserReferee(address)": {
        "details": "returns if the given user has been referred or not"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "lets the admin pause this contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "registerFork(address,bytes)": {
        "details": "lets the admin register an Uniswap style fork"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "swapETHForExactTokens((address,address,bool),uint256,address[])": {
        "details": "execute swap directly on Uniswap/Pancake/...",
        "params": {
          "amountOut": "expected amount of tokens out",
          "path": "Sell path.",
          "swapData": "stores the swapData information"
        },
        "returns": {
          "amounts": "amounts"
        }
      },
      "swapExactETHForTokens((address,address,bool),uint256,address[])": {
        "details": "execute swap directly on Uniswap/Pancake & simular forks",
        "params": {
          "amountOutMin": "minimum tokens to receive",
          "path": "Sell path.",
          "swapData": "stores the swapData information"
        },
        "returns": {
          "amounts": "amounts"
        }
      },
      "swapExactETHForTokensSupportingFeeOnTransferTokens((address,address,bool),uint256,address[])": {
        "details": "execute swap directly on Uniswap/Pancake/...",
        "params": {
          "amountOutMin": "minimum expected tokens to receive",
          "path": "Sell path.",
          "swapData": "stores the swapData information"
        }
      },
      "swapExactTokensForETH((address,address,bool),uint256,uint256,address[])": {
        "details": "execute swap directly on Uniswap/Pancake/...",
        "params": {
          "amountIn": "amount if tokens In",
          "amountOutMin": "minimum tokens to receive",
          "path": "Sell path.",
          "swapData": "stores the swapData information"
        },
        "returns": {
          "amounts": "amounts"
        }
      },
      "swapExactTokensForETHSupportingFeeOnTransferTokens((address,address,bool),uint256,uint256,address[])": {
        "details": "execute swap directly on Uniswap/Pancake/...",
        "params": {
          "amountIn": "amount of tokensIn",
          "amountOutMin": "minimum tokens to receive",
          "path": "Sell path.",
          "swapData": "stores the swapData information"
        }
      },
      "swapExactTokensForTokens((address,address,bool),uint256,uint256,address[])": {
        "details": "execute swap directly on Uniswap/Pancake/...",
        "params": {
          "amountIn": "amount if tokens In",
          "amountOutMin": "minimum tokens to receive",
          "path": "Sell path.",
          "swapData": "stores the swapData information"
        },
        "returns": {
          "amounts": "amounts"
        }
      },
      "swapExactTokensForTokensSupportingFeeOnTransferTokens((address,address,bool),uint256,uint256,address[])": {
        "details": "execute swap directly on Uniswap/Pancake/...",
        "params": {
          "amountIn": "amount if tokens In",
          "amountOutMin": "minimum tokens to receive",
          "path": "Sell path.",
          "swapData": "stores the swapData information"
        }
      },
      "swapTokensForExactETH((address,address,bool),uint256,uint256,address[])": {
        "details": "execute swap directly on Uniswap/Pancake/...",
        "params": {
          "amountInMax": "maximum tokens to send",
          "amountOut": "expected tokens to receive",
          "path": "Sell path.",
          "swapData": "stores the swapData information"
        },
        "returns": {
          "amounts": "amounts"
        }
      },
      "swapTokensForExactTokens((address,address,bool),uint256,uint256,address[])": {
        "details": "execute swap directly on Uniswap/Pancake/...",
        "params": {
          "amountInMax": "maximum tokens to send",
          "amountOut": "expected tokens to receive",
          "path": "Sell path.",
          "swapData": "stores the swapData information"
        },
        "returns": {
          "amounts": "amounts"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "lets the admin unpause this contract"
      },
      "updateCustomReferralRewardRate(address,uint16)": {
        "details": "lets the admin set a custom referral rate"
      },
      "updateFeeReceiver(address)": {
        "details": "lets the admin update which address receives the protocol fees"
      },
      "updateFork(address,bytes,bool)": {
        "details": "lets the admin update an Uniswap style fork"
      },
      "updateReferralRegistry(address)": {
        "details": "lets the admin set a new referral registry"
      },
      "updateReferralRewardRate(uint16)": {
        "details": "lets the admin update the referral reward rate"
      },
      "updateReferralsActivated(bool)": {
        "details": "lets the admin update the status of the referral system"
      },
      "updateSwapFee(uint16)": {
        "details": "lets the admin update the swapFee nominator"
      },
      "withdrawERC20Token(address,address,uint256)": {
        "details": "lets the admin withdraw ERC20s from the contract."
      },
      "withdrawETH(address,uint256)": {
        "details": "lets the admin withdraw ETH from the contract."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 592,
        "contract": "contracts/FloozMultichainRouterV2.sol:MultichainRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1168,
        "contract": "contracts/FloozMultichainRouterV2.sol:MultichainRouter",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1253,
        "contract": "contracts/FloozMultichainRouterV2.sol:MultichainRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4828,
        "contract": "contracts/FloozMultichainRouterV2.sol:MultichainRouter",
        "label": "swapFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 4836,
        "contract": "contracts/FloozMultichainRouterV2.sol:MultichainRouter",
        "label": "referralRegistry",
        "offset": 2,
        "slot": "2",
        "type": "t_contract(IReferralRegistry)11315"
      },
      {
        "astId": 4838,
        "contract": "contracts/FloozMultichainRouterV2.sol:MultichainRouter",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 4840,
        "contract": "contracts/FloozMultichainRouterV2.sol:MultichainRouter",
        "label": "referralRewardRate",
        "offset": 20,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 4842,
        "contract": "contracts/FloozMultichainRouterV2.sol:MultichainRouter",
        "label": "referralsActivated",
        "offset": 22,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4846,
        "contract": "contracts/FloozMultichainRouterV2.sol:MultichainRouter",
        "label": "customReferralRewardRate",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 4850,
        "contract": "contracts/FloozMultichainRouterV2.sol:MultichainRouter",
        "label": "forkActivated",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4854,
        "contract": "contracts/FloozMultichainRouterV2.sol:MultichainRouter",
        "label": "forkInitCode",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IReferralRegistry)11315": {
        "encoding": "inplace",
        "label": "contract IReferralRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}