{
  "address": "0xe6897991384C11af1903F5E8FA1cB667a8D93862",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "approvalToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "approvalTarget",
          "type": "address"
        }
      ],
      "name": "simulate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "returnValue",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x14b1329411e0e37975488471eb718a5dfef32b30814226faa715c19089cd9f28",
  "receipt": {
    "to": null,
    "from": "0xF7b95Da46b65683B44b11fef24C8BC7739da04Ac",
    "contractAddress": "0xe6897991384C11af1903F5E8FA1cB667a8D93862",
    "transactionIndex": 162,
    "gasUsed": "213215",
    "logsBloom": "0x
    "blockHash": "0xd8e8c47c202c13be63293b64d65de5bffc412c587b6786e33de560b1303a9493",
    "transactionHash": "0x14b1329411e0e37975488471eb718a5dfef32b30814226faa715c19089cd9f28",
    "logs": [],
    "blockNumber": 10556389,
    "cumulativeGasUsed": "28968792",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "57f589b5e35f3298fd2c9b708ea9235b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"approvalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approvalTarget\",\"type\":\"address\"}],\"name\":\"simulate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnValue\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/FloozSimulator.sol\":\"FloozSimulator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"contracts/FloozSimulator.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// SPDX-License-Identifier: UNLICENSED\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract FloozSimulator {\\n    uint256 MAX_AMOUNT = 2 ^ (256 - 1);\\n\\n    // WARNING: Do not send a transaction to this function, only meant for reading.\\n    function simulate(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        address approvalToken,\\n        address approvalTarget\\n    ) external returns (bool success, bytes memory returnValue) {\\n        IERC20(approvalToken).approve(approvalTarget, MAX_AMOUNT);\\n        (success, returnValue) = to.call{value: value}(data);\\n    }\\n}\\n\",\"keccak256\":\"0x25a571fea97f4a083941f9cfb2a973ad858994574bb440bdff2837f69a2ab7ac\"}},\"version\":1}",
  "bytecode": "0x608060405260fd60005534801561001557600080fd5b50610288806100256000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806371fc4ee514610030575b600080fd5b6100c6600480360360a081101561004657600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561007657600080fd5b82018360208201111561008857600080fd5b803590602001918460018302840111640100000000831117156100aa57600080fd5b91935091506001600160a01b0381358116916020013516610149565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b60006060836001600160a01b031663095ea7b3846000546040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156101af57600080fd5b505af11580156101c3573d6000803e3d6000fd5b505050506040513d60208110156101d957600080fd5b50506040516001600160a01b03891690889088908890808383808284376040519201945060009350909150508083038185875af1925050503d806000811461023d576040519150601f19603f3d011682016040523d82523d6000602084013e610242565b606091505b509099909850965050505050505056fea264697066735822122059bcca1ed94004a54887169d5662516001281a970737ff1cca85494608f9576164736f6c63430006060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806371fc4ee514610030575b600080fd5b6100c6600480360360a081101561004657600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561007657600080fd5b82018360208201111561008857600080fd5b803590602001918460018302840111640100000000831117156100aa57600080fd5b91935091506001600160a01b0381358116916020013516610149565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b60006060836001600160a01b031663095ea7b3846000546040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156101af57600080fd5b505af11580156101c3573d6000803e3d6000fd5b505050506040513d60208110156101d957600080fd5b50506040516001600160a01b03891690889088908890808383808284376040519201945060009350909150508083038185875af1925050503d806000811461023d576040519150601f19603f3d011682016040523d82523d6000602084013e610242565b606091505b509099909850965050505050505056fea264697066735822122059bcca1ed94004a54887169d5662516001281a970737ff1cca85494608f9576164736f6c63430006060033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3662,
        "contract": "contracts/FloozSimulator.sol:FloozSimulator",
        "label": "MAX_AMOUNT",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}