{
  "address": "0x70e7a4D2655b06B2C107a42F0C095679B8B447a1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_swapFee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_referralRewardRate",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_balanceThreshold",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_saveYourAssetsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pancakeFactoryV1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pancakeFactoryV2",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_pancakeInitCodeV1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_pancakeInitCodeV2",
          "type": "bytes"
        },
        {
          "internalType": "contract IReferralRegistry",
          "name": "_referralRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceThreshold",
          "type": "uint256"
        }
      ],
      "name": "BalanceThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "referralRate",
          "type": "uint16"
        }
      ],
      "name": "CustomReferralRewardRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeReceiver",
          "type": "address"
        }
      ],
      "name": "FeeReceiverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "referralRegistry",
          "type": "address"
        }
      ],
      "name": "ReferralRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenReward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReferralRewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "referralRewardRate",
          "type": "uint16"
        }
      ],
      "name": "ReferralRewardRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "activated",
          "type": "bool"
        }
      ],
      "name": "ReferralsActivatedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "swapFee",
          "type": "uint16"
        }
      ],
      "name": "SwapFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "customReferralRewardRate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReferee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasUserReferee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeFactoryV1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeFactoryV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralAnchor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralRegistry",
      "outputs": [
        {
          "internalType": "contract IReferralRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralRewardRate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralsActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saveYourAssetsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "referee",
          "type": "address"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBalanceThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateBalanceThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referralRate",
          "type": "uint16"
        }
      ],
      "name": "updateCustomReferralRewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeReceiver",
          "type": "address"
        }
      ],
      "name": "updateFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReferralRegistry",
          "type": "address"
        }
      ],
      "name": "updateReferralRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newReferralRewardRate",
          "type": "uint16"
        }
      ],
      "name": "updateReferralRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newReferralsActivated",
          "type": "bool"
        }
      ],
      "name": "updateReferralsActivated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newSwapFee",
          "type": "uint16"
        }
      ],
      "name": "updateSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "userAboveBalanceThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawBnb",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1badc5ef02823576e2dc17838af90b64628cb1c7d174bcc6fba9ad89ef4a957f",
  "receipt": {
    "to": null,
    "from": "0xAa2500d99AFB556237F870c1fA3Cc577a67c7272",
    "contractAddress": "0x70e7a4D2655b06B2C107a42F0C095679B8B447a1",
    "transactionIndex": 64,
    "gasUsed": "4749093",
    "logsBloom": "0x
    "blockHash": "0xafc9285f399c2837cdd1910c52d952d32164af2aa69a93d0333d5372f05ff7e6",
    "transactionHash": "0x1badc5ef02823576e2dc17838af90b64628cb1c7d174bcc6fba9ad89ef4a957f",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 10737474,
        "transactionHash": "0x1badc5ef02823576e2dc17838af90b64628cb1c7d174bcc6fba9ad89ef4a957f",
        "address": "0x70e7a4D2655b06B2C107a42F0C095679B8B447a1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aa2500d99afb556237f870c1fa3cc577a67c7272"
        ],
        "data": "0x",
        "logIndex": 205,
        "blockHash": "0xafc9285f399c2837cdd1910c52d952d32164af2aa69a93d0333d5372f05ff7e6"
      }
    ],
    "blockNumber": 10737474,
    "cumulativeGasUsed": "13893356",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
    50,
    2000,
    "0x12b61B82f441bAD5A6E4dD86d74b92E8F15b930B",
    "50000000000000000000",
    "0x83A86adf1a7c56e77d36d585B808052e0a2aAD0e",
    "0xBCfCcbde45cE874adCB698cC183deBcF17952812",
    "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73",
    "0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66",
    "0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5",
    "0x491AcC56B46B09b91CEA690C3D5c7be17e390fbB"
  ],
  "solcInputHash": "aaab707384c1153e245ba43bb068e309",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_swapFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_referralRewardRate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_saveYourAssetsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeFactoryV1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeFactoryV2\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_pancakeInitCodeV1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_pancakeInitCodeV2\",\"type\":\"bytes\"},{\"internalType\":\"contract IReferralRegistry\",\"name\":\"_referralRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceThreshold\",\"type\":\"uint256\"}],\"name\":\"BalanceThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralRate\",\"type\":\"uint16\"}],\"name\":\"CustomReferralRewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"FeeReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referralRegistry\",\"type\":\"address\"}],\"name\":\"ReferralRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenReward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralRewardRate\",\"type\":\"uint16\"}],\"name\":\"ReferralRewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"ReferralsActivatedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"swapFee\",\"type\":\"uint16\"}],\"name\":\"SwapFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customReferralRewardRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReferee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasUserReferee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeFactoryV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeFactoryV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAnchor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRegistry\",\"outputs\":[{\"internalType\":\"contract IReferralRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRewardRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralsActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveYourAssetsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalanceThreshold\",\"type\":\"uint256\"}],\"name\":\"updateBalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralRate\",\"type\":\"uint16\"}],\"name\":\"updateCustomReferralRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReferralRegistry\",\"type\":\"address\"}],\"name\":\"updateReferralRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newReferralRewardRate\",\"type\":\"uint16\"}],\"name\":\"updateReferralRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newReferralsActivated\",\"type\":\"bool\"}],\"name\":\"updateReferralsActivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newSwapFee\",\"type\":\"uint16\"}],\"name\":\"updateSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"userAboveBalanceThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawBnb(address,uint256)\":{\"details\":\"Withdraw BNB that somehow ended up in the contract.\"},\"withdrawErc20Token(address,address,uint256)\":{\"details\":\"Withdraw any erc20 compliant tokens that somehow ended up in the contract.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/FloozRouter.sol\":\"FloozRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\"},\"contracts/FloozRouter.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// SPDX-License-Identifier: UNLICENSED\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/PancakeLibrary.sol\\\";\\nimport \\\"./interfaces/IReferralRegistry.sol\\\";\\nimport \\\"./interfaces/IReferrals.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract FloozRouter is Ownable, Pausable {\\n    using SafeMath for uint256;\\n    event SwapFeeUpdated(uint16 swapFee);\\n    event ReferralRewardRateUpdated(uint16 referralRewardRate);\\n    event ReferralsActivatedUpdated(bool activated);\\n    event FeeReceiverUpdated(address feeReceiver);\\n    event BalanceThresholdUpdated(uint256 balanceThreshold);\\n    event ReferralRegistryUpdated(address referralRegistry);\\n    event CustomReferralRewardRateUpdated(address indexed account, uint16 referralRate);\\n    event ReferralRewardPaid(address from, address indexed to, address tokenOut, address tokenReward, uint256 amount);\\n\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n    address public immutable WETH;\\n    IReferralRegistry public referralRegistry;\\n    bytes internal pancakeInitCodeV1;\\n    bytes internal pancakeInitCodeV2;\\n    address public pancakeFactoryV1;\\n    address public pancakeFactoryV2;\\n    IERC20 public saveYourAssetsToken;\\n    uint256 public balanceThreshold;\\n    address public feeReceiver;\\n    uint16 public swapFee;\\n    uint16 public referralRewardRate;\\n    bool public referralsActivated;\\n\\n    // stores individual referral rates\\n    mapping(address => uint16) public customReferralRewardRate;\\n\\n    // stores the address that refered this user\\n    mapping(address => address) public referralAnchor;\\n\\n    modifier isValidFactory(address factory) {\\n        require(factory == pancakeFactoryV1 || factory == pancakeFactoryV2, \\\"FloozRouter: invalid factory\\\");\\n        _;\\n    }\\n\\n    modifier isValidReferee(address referee) {\\n        require(msg.sender != referee, \\\"FloozRouter: self referral\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _WETH,\\n        uint16 _swapFee,\\n        uint16 _referralRewardRate,\\n        address _feeReceiver,\\n        uint256 _balanceThreshold,\\n        IERC20 _saveYourAssetsToken,\\n        address _pancakeFactoryV1,\\n        address _pancakeFactoryV2,\\n        bytes memory _pancakeInitCodeV1,\\n        bytes memory _pancakeInitCodeV2,\\n        IReferralRegistry _referralRegistry\\n    ) public {\\n        WETH = _WETH;\\n        swapFee = _swapFee;\\n        referralRewardRate = _referralRewardRate;\\n        feeReceiver = _feeReceiver;\\n        saveYourAssetsToken = _saveYourAssetsToken;\\n        balanceThreshold = _balanceThreshold;\\n        pancakeFactoryV1 = _pancakeFactoryV1;\\n        pancakeFactoryV2 = _pancakeFactoryV2;\\n        pancakeInitCodeV1 = _pancakeInitCodeV1;\\n        pancakeInitCodeV2 = _pancakeInitCodeV2;\\n        referralsActivated = true;\\n        referralRegistry = _referralRegistry;\\n    }\\n\\n    receive() external payable {}\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address factory,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? _pairFor(factory, output, path[i + 2]) : _to;\\n            IPancakePair(_pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function swapExactETHForTokens(\\n        address factory,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address referee\\n    ) external payable whenNotPaused isValidFactory(factory) isValidReferee(referee) returns (uint256[] memory amounts) {\\n        require(path[0] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        referee = _getReferee(referee);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(msg.value, referee);\\n        amounts = _getAmountsOut(factory, swapAmount, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        IWETH(WETH).deposit{value: swapAmount}();\\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), amounts[0]));\\n        _swap(factory, amounts, path, msg.sender);\\n\\n        if (feeAmount > 0) {\\n            _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n        }\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(\\n        address factory,\\n        address[] memory path,\\n        address _to\\n    ) internal {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            IPancakePair pair = IPancakePair(_pairFor(factory, input, output));\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            {\\n                // scope to avoid stack too deep errors\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\n                amountOutput = _getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n            address to = i < path.length - 2 ? _pairFor(factory, output, path[i + 2]) : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address referee\\n    ) external whenNotPaused isValidFactory(factory) isValidReferee(referee) {\\n        require(path[path.length - 1] == WETH, \\\"FloozRouter: BNB has to be the last path item\\\");\\n        referee = _getReferee(referee);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amountIn);\\n        _swapSupportingFeeOnTransferTokens(factory, path, address(this));\\n        uint256 amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, \\\"FloozRouter: slippage setting to low\\\");\\n        IWETH(WETH).withdraw(amountOut);\\n        (uint256 amountWithdraw, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amountOut, referee);\\n        TransferHelper.safeTransferETH(msg.sender, amountWithdraw);\\n\\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function swapExactTokensForTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address referee\\n    ) external whenNotPaused isValidFactory(factory) isValidReferee(referee) returns (uint256[] memory amounts) {\\n        referee = _getReferee(referee);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amountIn, referee);\\n        amounts = _getAmountsOut(factory, swapAmount, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, msg.sender);\\n\\n        if (feeAmount > 0) _withdrawFeesAndRewards(path[0], path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function swapExactTokensForETH(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address referee\\n    ) external whenNotPaused isValidFactory(factory) isValidReferee(referee) returns (uint256[] memory amounts) {\\n        require(path[path.length - 1] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        referee = _getReferee(referee);\\n        amounts = _getAmountsOut(factory, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        (uint256 amountOut, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amounts[amounts.length - 1], referee);\\n        TransferHelper.safeTransferETH(msg.sender, amountOut);\\n\\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function swapETHForExactTokens(\\n        address factory,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address referee\\n    ) external payable whenNotPaused isValidFactory(factory) isValidReferee(referee) returns (uint256[] memory amounts) {\\n        require(path[0] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        referee = _getReferee(referee);\\n        amounts = _getAmountsIn(factory, amountOut, path);\\n        (, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amounts[0], referee);\\n        require(amounts[0].add(feeAmount).add(referralReward) <= msg.value, \\\"FloozRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), amounts[0]));\\n        _swap(factory, amounts, path, msg.sender);\\n\\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0].add(feeAmount).add(referralReward))\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0].add(feeAmount).add(referralReward));\\n    }\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address referee\\n    ) external whenNotPaused isValidFactory(factory) isValidReferee(referee) {\\n        referee = _getReferee(referee);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amountIn, referee);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), swapAmount);\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(msg.sender);\\n        _swapSupportingFeeOnTransferTokens(factory, path, msg.sender);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(msg.sender).sub(balanceBefore) >= amountOutMin,\\n            \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n\\n        if (feeAmount > 0) _withdrawFeesAndRewards(path[0], path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address referee\\n    ) external whenNotPaused isValidFactory(factory) isValidReferee(referee) returns (uint256[] memory amounts) {\\n        referee = _getReferee(referee);\\n        amounts = _getAmountsIn(factory, amountOut, path);\\n        (, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amounts[0], referee);\\n        require(amounts[0].add(feeAmount).add(referralReward) <= amountInMax, \\\"FloozRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, msg.sender);\\n\\n        if (feeAmount > 0) _withdrawFeesAndRewards(path[0], path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function swapTokensForExactETH(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address referee\\n    ) external whenNotPaused isValidFactory(factory) isValidReferee(referee) returns (uint256[] memory amounts) {\\n        require(path[path.length - 1] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        referee = _getReferee(referee);\\n        amounts = _getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"FloozRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(amounts[amounts.length - 1], referee);\\n\\n        TransferHelper.safeTransferETH(msg.sender, swapAmount);\\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address factory,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address referee\\n    ) external payable whenNotPaused isValidFactory(factory) isValidReferee(referee) {\\n        require(path[0] == WETH, \\\"FloozRouter: INVALID_PATH\\\");\\n        referee = _getReferee(referee);\\n        (uint256 swapAmount, uint256 feeAmount, uint256 referralReward) = _calculateFeesAndRewards(msg.value, referee);\\n        IWETH(WETH).deposit{value: swapAmount}();\\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), swapAmount));\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(msg.sender);\\n        _swapSupportingFeeOnTransferTokens(factory, path, msg.sender);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(msg.sender).sub(balanceBefore) >= amountOutMin,\\n            \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        if (feeAmount > 0) _withdrawFeesAndRewards(address(0), path[path.length - 1], referee, feeAmount, referralReward);\\n    }\\n\\n    function _getReferee(address referee) internal returns (address) {\\n        address sender = msg.sender;\\n        if (!referralRegistry.hasUserReferee(sender) && referee != address(0)) {\\n            referralRegistry.createReferralAnchor(sender, referee);\\n        }\\n        return referralRegistry.getUserReferee(sender);\\n    }\\n\\n    function _calculateFeesAndRewards(uint256 amount, address referee)\\n        internal\\n        view\\n        returns (\\n            uint256 swapAmount,\\n            uint256 feeAmount,\\n            uint256 referralReward\\n        )\\n    {\\n        if (userAboveBalanceThreshold(msg.sender)) {\\n            referralReward = 0;\\n            feeAmount = 0;\\n            swapAmount = amount;\\n        } else {\\n            uint256 fees = amount.mul(swapFee).div(FEE_DENOMINATOR);\\n            swapAmount = amount.sub(fees);\\n            if (referee != address(0) && referralsActivated) {\\n                uint16 referralRate = customReferralRewardRate[referee] > 0 ? customReferralRewardRate[referee] : referralRewardRate;\\n                referralReward = fees.mul(referralRate).div(FEE_DENOMINATOR);\\n                feeAmount = amount.sub(swapAmount).sub(referralReward);\\n            } else {\\n                referralReward = 0;\\n                feeAmount = fees;\\n            }\\n        }\\n    }\\n\\n    function userAboveBalanceThreshold(address _account) public view returns (bool) {\\n        return saveYourAssetsToken.balanceOf(_account) >= balanceThreshold;\\n    }\\n\\n    function getUserFee(address user) public view returns (uint256) {\\n        saveYourAssetsToken.balanceOf(user) >= balanceThreshold ? 0 : swapFee;\\n    }\\n\\n    function updateSwapFee(uint16 newSwapFee) external onlyOwner {\\n        swapFee = newSwapFee;\\n        emit SwapFeeUpdated(newSwapFee);\\n    }\\n\\n    function updateReferralRewardRate(uint16 newReferralRewardRate) external onlyOwner {\\n        referralRewardRate = newReferralRewardRate;\\n        emit ReferralRewardRateUpdated(newReferralRewardRate);\\n    }\\n\\n    function updateFeeReceiver(address newFeeReceiver) external onlyOwner {\\n        feeReceiver = newFeeReceiver;\\n        emit FeeReceiverUpdated(newFeeReceiver);\\n    }\\n\\n    function updateBalanceThreshold(uint256 newBalanceThreshold) external onlyOwner {\\n        balanceThreshold = newBalanceThreshold;\\n        emit BalanceThresholdUpdated(balanceThreshold);\\n    }\\n\\n    function updateReferralsActivated(bool newReferralsActivated) external onlyOwner {\\n        referralsActivated = newReferralsActivated;\\n        emit ReferralsActivatedUpdated(newReferralsActivated);\\n    }\\n\\n    function updateReferralRegistry(address newReferralRegistry) external onlyOwner {\\n        referralRegistry = IReferralRegistry(newReferralRegistry);\\n        emit ReferralRegistryUpdated(newReferralRegistry);\\n    }\\n\\n    function updateCustomReferralRewardRate(address account, uint16 referralRate) external onlyOwner returns (uint256) {\\n        require(referralRate <= FEE_DENOMINATOR, \\\"FloozRouter: INVALID_RATE\\\");\\n        customReferralRewardRate[account] = referralRate;\\n        emit CustomReferralRewardRateUpdated(account, referralRate);\\n    }\\n\\n    function getUserReferee(address user) external view returns (address) {\\n        return referralRegistry.getUserReferee(user);\\n    }\\n\\n    function hasUserReferee(address user) external view returns (bool) {\\n        return referralRegistry.hasUserReferee(user);\\n    }\\n\\n    /**\\n     * @dev Withdraw BNB that somehow ended up in the contract.\\n     */\\n    function withdrawBnb(address payable to, uint256 amount) external onlyOwner {\\n        to.transfer(amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw any erc20 compliant tokens that\\n     * somehow ended up in the contract.\\n     */\\n    function withdrawErc20Token(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).transfer(to, amount);\\n    }\\n\\n    function _withdrawFeesAndRewards(\\n        address tokenReward,\\n        address tokenOut,\\n        address referee,\\n        uint256 feeAmount,\\n        uint256 referralReward\\n    ) internal {\\n        if (tokenReward == address(0)) {\\n            TransferHelper.safeTransferETH(feeReceiver, feeAmount);\\n            if (referralReward > 0) {\\n                TransferHelper.safeTransferETH(referee, referralReward);\\n                emit ReferralRewardPaid(msg.sender, referee, tokenOut, tokenReward, referralReward);\\n            }\\n        } else {\\n            TransferHelper.safeTransferFrom(tokenReward, msg.sender, feeReceiver, feeAmount);\\n            if (referralReward > 0) {\\n                TransferHelper.safeTransferFrom(tokenReward, msg.sender, referee, referralReward);\\n                emit ReferralRewardPaid(msg.sender, referee, tokenOut, tokenReward, referralReward);\\n            }\\n        }\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal view returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"FloozRouter: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"FloozRouter: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul((9975 - getUserFee(msg.sender)));\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(10000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function _getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal view returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"FloozRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"FloozRouter: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(10000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(9975 - getUserFee(msg.sender));\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function _getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"FloozRouter: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = _getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = _getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function _getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"FloozRouter: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = _getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = _getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function _getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = PancakeLibrary.sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(_pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function _pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        (address token0, address token1) = PancakeLibrary.sortTokens(tokenA, tokenB);\\n        bytes memory initcode = factory == pancakeFactoryV1 ? pancakeInitCodeV1 : pancakeInitCodeV2;\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        initcode // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x3efda7feb038261d72099bf225ea2ca4010a29c4d8084ed01b8e70b5cb84e4fe\"},\"contracts/interfaces/IReferralRegistry.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\ninterface IReferralRegistry {\\n    function getUserReferee(address _user) external view returns (address);\\n\\n    function hasUserReferee(address _user) external view returns (bool);\\n\\n    function createReferralAnchor(address _user, address _referee) external;\\n}\\n\",\"keccak256\":\"0xe092398c72313bda7e72b2e38548ef9928d907a05d8f1664bf636e14afd3ba59\"},\"contracts/interfaces/IReferrals.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n//SPDX-License-Identifier: Unlicense\\n\\ninterface IReferrals {\\n    function registerReferral(\\n        address _referee,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x70336e88a8643155a4b00c9229e6c6b6646e5132b3357c743548224e00527767\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n//SPDX-License-Identifier: Unlicense\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb6d65097190e3c63bbb78e08e47ff64b22adba2432d11b5f14bf129f22c7f6af\"},\"contracts/libraries/PancakeLibrary.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n//SPDX-License-Identifier: Unlicense\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\nlibrary PancakeLibrary {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"PancakeLibrary: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"PancakeLibrary: ZERO_ADDRESS\\\");\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"PancakeLibrary: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(998);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(998);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n}\\n\",\"keccak256\":\"0xb630661028c4a94aa199399df4f3da395c57f6c0a27d8262dc23b65784207428\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-newer\\npragma solidity =0.6.6;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x119ba53a7eff45d6c2b278fbc2ada151cc9713b6dc03426802ccd50149c6e763\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200552c3803806200552c83398181016040526101608110156200003857600080fd5b815160208301516040808501516060860151608087015160a088015160c089015160e08a01516101008b0180519751999b989a969995989497939692959194919392820192846401000000008211156200009157600080fd5b908301906020820185811115620000a757600080fd5b8251640100000000811182820188101715620000c257600080fd5b82525081516020918201929091019080838360005b83811015620000f1578181015183820152602001620000d7565b50505050905090810190601f1680156200011f5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200014357600080fd5b9083019060208201858111156200015957600080fd5b82516401000000008111828201881017156200017457600080fd5b82525081516020918201929091019080838360005b83811015620001a357818101518382015260200162000189565b50505050905090810190601f168015620001d15780820380516001836020036101000a031916815260200191505b5060405260200151915060009050620001f26001600160e01b03620003c416565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060008060146101000a81548160ff0219169083151502179055508a6001600160a01b03166080816001600160a01b031660601b8152505089600860146101000a81548161ffff021916908361ffff16021790555088600860166101000a81548161ffff021916908361ffff16021790555087600860006101000a8154816001600160a01b0302191690836001600160a01b0316021790555085600660006101000a8154816001600160a01b0302191690836001600160a01b031602179055508660078190555084600460006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083600560006101000a8154816001600160a01b0302191690836001600160a01b03160217905550826002908051906020019062000368929190620003c9565b5081516200037e906003906020850190620003c9565b506008805460ff60c01b1916600160c01b179055600180546001600160a01b039092166001600160a01b0319909216919091179055506200046b98505050505050505050565b335b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200040c57805160ff19168380011785556200043c565b828001600101855582156200043c579182015b828111156200043c5782518255916020019190600101906200041f565b506200044a9291506200044e565b5090565b620003c691905b808211156200044a576000815560010162000455565b60805160601c615058620004d460003980611057528061123e52806114c5528061229a52806125e2528061269252806127065280612a865280612bcc5280612c405280612e855280612fcb528061305352806132d9528061342052806134d652506150586000f3fe60806040526004361061024a5760003560e01c8063a12cff4911610139578063d73792a9116100b6578063e94265c41161007a578063e94265c414610c1a578063e96b2f5014610c4d578063f19a416714610c79578063f2fde38b14610c8e578063f4eb502914610cc1578063fe4ad44614610cd657610251565b8063d73792a914610a1f578063d758bcc614610a34578063db12c8e714610ac0578063e229357114610b4c578063e5ae0c3214610bec57610251565b8063c69bebe4116100fd578063c69bebe4146108d5578063caa9b5cb14610908578063cacb6d4314610936578063cd68561814610960578063d113efc4146109ec57610251565b8063a12cff49146107bd578063a3a4bc9a146107f6578063ad5c464814610896578063b3f00674146108ab578063c3173774146108c057610251565b80636553b712116101c75780638456cb591161018b5780638456cb59146106ab578063882f3b85146106c05780638da5cb5b14610760578063927e897a1461077557806393228dda146107a857610251565b80636553b71214610553578063692247c3146105f3578063715018a614610630578063740a63e2146106455780637cde0c741461067857610251565b80633f4ba83a1161020e5780633f4ba83a1461042c5780633f4e48bb146104415780634e627e62146104e157806354cf2aeb146105125780635c975abb1461053e57610251565b8063060f58c314610256578063279f32911461029b5780632d079734146102c45780632def48b114610309578063371667091461033c57610251565b3661025157005b600080fd5b34801561026257600080fd5b506102896004803603602081101561027957600080fd5b50356001600160a01b0316610ceb565b60408051918252519081900360200190f35b3480156102a757600080fd5b506102b0610d8e565b604080519115158252519081900360200190f35b3480156102d057600080fd5b50610307600480360360608110156102e757600080fd5b506001600160a01b03813581169160208101359091169060400135610d9e565b005b34801561031557600080fd5b506103076004803603602081101561032c57600080fd5b50356001600160a01b0316610e91565b34801561034857600080fd5b506103dc600480360360a081101561035f57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561039557600080fd5b8201836020820111156103a757600080fd5b803590602001918460208302840111600160201b831117156103c857600080fd5b9193509150356001600160a01b0316610f47565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610418578181015183820152602001610400565b505050509050019250505060405180910390f35b34801561043857600080fd5b50610307611349565b34801561044d57600080fd5b506103dc600480360360a081101561046457600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561049a57600080fd5b8201836020820111156104ac57600080fd5b803590602001918460208302840111600160201b831117156104cd57600080fd5b9193509150356001600160a01b03166113b5565b3480156104ed57600080fd5b506104f66115ef565b604080516001600160a01b039092168252519081900360200190f35b34801561051e57600080fd5b506105276115fe565b6040805161ffff9092168252519081900360200190f35b34801561054a57600080fd5b506102b061160f565b34801561055f57600080fd5b50610307600480360360a081101561057657600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156105ac57600080fd5b8201836020820111156105be57600080fd5b803590602001918460208302840111600160201b831117156105df57600080fd5b9193509150356001600160a01b031661161f565b3480156105ff57600080fd5b506102896004803603604081101561061657600080fd5b5080356001600160a01b0316906020013561ffff16611996565b34801561063c57600080fd5b50610307611aba565b34801561065157600080fd5b506104f66004803603602081101561066857600080fd5b50356001600160a01b0316611b66565b34801561068457600080fd5b506105276004803603602081101561069b57600080fd5b50356001600160a01b0316611b81565b3480156106b757600080fd5b50610307611b97565b3480156106cc57600080fd5b506103dc600480360360a08110156106e357600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561071957600080fd5b82018360208201111561072b57600080fd5b803590602001918460208302840111600160201b8311171561074c57600080fd5b9193509150356001600160a01b0316611c01565b34801561076c57600080fd5b506104f6611eca565b34801561078157600080fd5b506102b06004803603602081101561079857600080fd5b50356001600160a01b0316611ed9565b3480156107b457600080fd5b506104f6611f5c565b3480156107c957600080fd5b50610307600480360360408110156107e057600080fd5b506001600160a01b038135169060200135611f6b565b34801561080257600080fd5b506103dc600480360360a081101561081957600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561084f57600080fd5b82018360208201111561086157600080fd5b803590602001918460208302840111600160201b8311171561088257600080fd5b9193509150356001600160a01b0316612008565b3480156108a257600080fd5b506104f6612298565b3480156108b757600080fd5b506104f66122bc565b3480156108cc57600080fd5b506102896122cb565b3480156108e157600080fd5b50610307600480360360208110156108f857600080fd5b50356001600160a01b03166122d1565b34801561091457600080fd5b506103076004803603602081101561092b57600080fd5b503561ffff16612387565b34801561094257600080fd5b506103076004803603602081101561095957600080fd5b503561243f565b6103076004803603608081101561097657600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156109a557600080fd5b8201836020820111156109b757600080fd5b803590602001918460208302840111600160201b831117156109d857600080fd5b9193509150356001600160a01b03166124dc565b3480156109f857600080fd5b506104f660048036036020811015610a0f57600080fd5b50356001600160a01b0316612927565b348015610a2b57600080fd5b50610289612978565b6103dc60048036036080811015610a4a57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b811115610a7957600080fd5b820183602082011115610a8b57600080fd5b803590602001918460208302840111600160201b83111715610aac57600080fd5b9193509150356001600160a01b031661297e565b6103dc60048036036080811015610ad657600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b811115610b0557600080fd5b820183602082011115610b1757600080fd5b803590602001918460208302840111600160201b83111715610b3857600080fd5b9193509150356001600160a01b0316612d7d565b348015610b5857600080fd5b50610307600480360360a0811015610b6f57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b811115610ba557600080fd5b820183602082011115610bb757600080fd5b803590602001918460208302840111600160201b83111715610bd857600080fd5b9193509150356001600160a01b03166131cb565b348015610bf857600080fd5b5061030760048036036020811015610c0f57600080fd5b503561ffff1661358c565b348015610c2657600080fd5b506102b060048036036020811015610c3d57600080fd5b50356001600160a01b0316613644565b348015610c5957600080fd5b5061030760048036036020811015610c7057600080fd5b503515156136cd565b348015610c8557600080fd5b506104f6613782565b348015610c9a57600080fd5b5061030760048036036020811015610cb157600080fd5b50356001600160a01b0316613791565b348015610ccd57600080fd5b506104f6613893565b348015610ce257600080fd5b506105276138a2565b600754600654604080516370a0823160e01b81526001600160a01b03858116600483015291516000949392909216916370a0823191602480820192602092909190829003018186803b158015610d4057600080fd5b505afa158015610d54573d6000803e3d6000fd5b505050506040513d6020811015610d6a57600080fd5b50511015610d8557600854600160a01b900461ffff16610d88565b60005b50919050565b600854600160c01b900460ff1681565b610da66138b3565b6001600160a01b0316610db7611eca565b6001600160a01b031614610e00576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b505050506040513d6020811015610e8a57600080fd5b5050505050565b610e996138b3565b6001600160a01b0316610eaa611eca565b6001600160a01b031614610ef3576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b600180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f9d4414af8d61d821c1ad25f0aadfa28aa386c452716a31fc1f7fdbd9b9d364dc9181900360200190a150565b6060610f5161160f565b15610f96576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60045487906001600160a01b0380831691161480610fc157506005546001600160a01b038281169116145b611000576040805162461bcd60e51b815260206004820152601c6024820152600080516020614f7c833981519152604482015290519081900360640190fd5b82336001600160a01b038216141561104d576040805162461bcd60e51b815260206004820152601a6024820152600080516020614fbc833981519152604482015290519081900360640190fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686600019810181811061108757fe5b905060200201356001600160a01b03166001600160a01b0316146110e0576040805162461bcd60e51b81526020600482015260196024820152600080516020614f9c833981519152604482015290519081900360640190fd5b6110e9846138b7565b93506111298989888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613a3992505050565b9250868360008151811061113957fe5b6020026020010151111561117e5760405162461bcd60e51b8152600401808060200182810382526023815260200180614ea56023913960400191505060405180910390fd5b6111fc8686600081811061118e57fe5b905060200201356001600160a01b0316336111e28c8a8a60008181106111b057fe5b905060200201356001600160a01b03168b8b60018181106111cd57fe5b905060200201356001600160a01b0316613b74565b866000815181106111ef57fe5b6020026020010151613d3f565b61123c8984888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250613e9c915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d8460018651038151811061127b57fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156112b957600080fd5b505af11580156112cd573d6000803e3d6000fd5b5050505060008060006112f7866001885103815181106112e957fe5b60200260200101518861409c565b92509250925061130733846141d0565b811561133a5761133a60008a8a600019810181811061132257fe5b905060200201356001600160a01b03168985856142c3565b50505050509695505050505050565b6113516138b3565b6001600160a01b0316611362611eca565b6001600160a01b0316146113ab576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b6113b36143da565b565b60606113bf61160f565b15611404576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60045487906001600160a01b038083169116148061142f57506005546001600160a01b038281169116145b61146e576040805162461bcd60e51b815260206004820152601c6024820152600080516020614f7c833981519152604482015290519081900360640190fd5b82336001600160a01b03821614156114bb576040805162461bcd60e51b815260206004820152601a6024820152600080516020614fbc833981519152604482015290519081900360640190fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016868660001981018181106114f557fe5b905060200201356001600160a01b03166001600160a01b03161461154e576040805162461bcd60e51b81526020600482015260196024820152600080516020614f9c833981519152604482015290519081900360640190fd5b611557846138b7565b9350611597898988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061447d92505050565b925086836001855103815181106115aa57fe5b6020026020010151101561117e5760405162461bcd60e51b8152600401808060200182810382526027815260200180614e5a6027913960400191505060405180910390fd5b6001546001600160a01b031681565b600854600160a01b900461ffff1681565b600054600160a01b900460ff1690565b61162761160f565b1561166c576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60045486906001600160a01b038083169116148061169757506005546001600160a01b038281169116145b6116d6576040805162461bcd60e51b815260206004820152601c6024820152600080516020614f7c833981519152604482015290519081900360640190fd5b81336001600160a01b0382161415611723576040805162461bcd60e51b815260206004820152601a6024820152600080516020614fbc833981519152604482015290519081900360640190fd5b61172c836138b7565b9250600080600061173d8a8761409c565b9250925092506117988888600081811061175357fe5b905060200201356001600160a01b0316336117928e8c8c600081811061177557fe5b905060200201356001600160a01b03168d8d60018181106111cd57fe5b86613d3f565b6000888860001981018181106117aa57fe5b604080516370a0823160e01b81523360048201529051602092830294909401356001600160a01b0316936370a08231935060248083019392829003018186803b1580156117f657600080fd5b505afa15801561180a573d6000803e3d6000fd5b505050506040513d602081101561182057600080fd5b50516040805160208b810282810182019093528b8252929350611862928f928d918d9182918501908490808284376000920191909152503392506145a2915050565b896118fb828b8b600019810181811061187757fe5b604080516370a0823160e01b81523360048201529051602092830294909401356001600160a01b0316936370a08231935060248083019392829003018186803b1580156118c357600080fd5b505afa1580156118d7573d6000803e3d6000fd5b505050506040513d60208110156118ed57600080fd5b50519063ffffffff61487316565b10156119385760405162461bcd60e51b8152600401808060200182810382526027815260200180614e5a6027913960400191505060405180910390fd5b8215611988576119888989600081811061194e57fe5b905060200201356001600160a01b03168a8a60018d8d90500381811061197057fe5b905060200201356001600160a01b03168986866142c3565b505050505050505050505050565b60006119a06138b3565b6001600160a01b03166119b1611eca565b6001600160a01b0316146119fa576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b6127108261ffff161115611a55576040805162461bcd60e51b815260206004820152601960248201527f466c6f6f7a526f757465723a20494e56414c49445f5241544500000000000000604482015290519081900360640190fd5b6001600160a01b038316600081815260096020908152604091829020805461ffff191661ffff8716908117909155825190815291517f9b182573c5f49d27d10ab506c71acd90f3b44f15c35eb906f9a40d9c35412e419281900390910190a292915050565b611ac26138b3565b6001600160a01b0316611ad3611eca565b6001600160a01b031614611b1c576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600a602052600090815260409020546001600160a01b031681565b60096020526000908152604090205461ffff1681565b611b9f6138b3565b6001600160a01b0316611bb0611eca565b6001600160a01b031614611bf9576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b6113b36148d5565b6060611c0b61160f565b15611c50576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60045487906001600160a01b0380831691161480611c7b57506005546001600160a01b038281169116145b611cba576040805162461bcd60e51b815260206004820152601c6024820152600080516020614f7c833981519152604482015290519081900360640190fd5b82336001600160a01b0382161415611d07576040805162461bcd60e51b815260206004820152601a6024820152600080516020614fbc833981519152604482015290519081900360640190fd5b611d10846138b7565b9350611d508989888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613a3992505050565b9250600080611d7385600081518110611d6557fe5b60200260200101518761409c565b925092505088611db082611da48589600081518110611d8e57fe5b602002602001015161495e90919063ffffffff16565b9063ffffffff61495e16565b1115611ded5760405162461bcd60e51b8152600401808060200182810382526023815260200180614ea56023913960400191505060405180910390fd5b611e2c88886000818110611dfd57fe5b905060200201356001600160a01b031633611e1f8e8c8c600081811061177557fe5b886000815181106111ef57fe5b611e6c8b868a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250613e9c915050565b8115611ebc57611ebc88886000818110611e8257fe5b905060200201356001600160a01b0316898960018c8c905003818110611ea457fe5b905060200201356001600160a01b03168885856142c3565b505050509695505050505050565b6000546001600160a01b031690565b6001546040805163493f44bd60e11b81526001600160a01b0384811660048301529151600093929092169163927e897a91602480820192602092909190829003018186803b158015611f2a57600080fd5b505afa158015611f3e573d6000803e3d6000fd5b505050506040513d6020811015611f5457600080fd5b505192915050565b6006546001600160a01b031681565b611f736138b3565b6001600160a01b0316611f84611eca565b6001600160a01b031614611fcd576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612003573d6000803e3d6000fd5b505050565b606061201261160f565b15612057576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60045487906001600160a01b038083169116148061208257506005546001600160a01b038281169116145b6120c1576040805162461bcd60e51b815260206004820152601c6024820152600080516020614f7c833981519152604482015290519081900360640190fd5b82336001600160a01b038216141561210e576040805162461bcd60e51b815260206004820152601a6024820152600080516020614fbc833981519152604482015290519081900360640190fd5b612117846138b7565b935060008060006121288b8861409c565b92509250925061216c8c848b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061447d92505050565b9550898660018851038151811061217f57fe5b602002602001015110156121c45760405162461bcd60e51b8152600401808060200182810382526027815260200180614e5a6027913960400191505060405180910390fd5b612220898960008181106121d457fe5b905060200201356001600160a01b0316336122138f8d8d60008181106121f657fe5b905060200201356001600160a01b03168e8e60018181106111cd57fe5b896000815181106111ef57fe5b6122608c878b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250613e9c915050565b811561133a5761133a8989600081811061227657fe5b905060200201356001600160a01b03168a8a60018d8d90500381811061132257fe5b7f000000000000000000000000000000000000000000000000000000000000000081565b6008546001600160a01b031681565b60075481565b6122d96138b3565b6001600160a01b03166122ea611eca565b6001600160a01b031614612333576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b600880546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f27aae5db36d94179909d019ae0b1ac7c16d96d953148f63c0f6a0a9c8ead79ee9181900360200190a150565b61238f6138b3565b6001600160a01b03166123a0611eca565b6001600160a01b0316146123e9576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b6008805461ffff8316600160a01b810261ffff60a01b199092169190911790915560408051918252517fc8d25ca8616825eb60e022dde2d5ec038bdac6dd1bd8bba3fb5f74de553d06289181900360200190a150565b6124476138b3565b6001600160a01b0316612458611eca565b6001600160a01b0316146124a1576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b60078190556040805182815290517fc86ab5ae638c0e95d21e0d47f77aa3a65ded219f7b70bc6ea894107f437d56369181900360200190a150565b6124e461160f565b15612529576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60045485906001600160a01b038083169116148061255457506005546001600160a01b038281169116145b612593576040805162461bcd60e51b815260206004820152601c6024820152600080516020614f7c833981519152604482015290519081900360640190fd5b81336001600160a01b03821614156125e0576040805162461bcd60e51b815260206004820152601a6024820152600080516020614fbc833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585600081811061261757fe5b905060200201356001600160a01b03166001600160a01b031614612670576040805162461bcd60e51b81526020600482015260196024820152600080516020614f9c833981519152604482015290519081900360640190fd5b612679836138b7565b9250600080600061268a348761409c565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b1580156126eb57600080fd5b505af11580156126ff573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6127618c8b8b600081811061274457fe5b905060200201356001600160a01b03168c8c60018181106111cd57fe5b856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156127b157600080fd5b505af11580156127c5573d6000803e3d6000fd5b505050506040513d60208110156127db57600080fd5b50516127e357fe5b6000888860001981018181106127f557fe5b604080516370a0823160e01b81523360048201529051602092830294909401356001600160a01b0316936370a08231935060248083019392829003018186803b15801561284157600080fd5b505afa158015612855573d6000803e3d6000fd5b505050506040513d602081101561286b57600080fd5b50516040805160208b810282810182019093528b82529293506128ad928e928d918d9182918501908490808284376000920191909152503392506145a2915050565b896128c2828b8b600019810181811061187757fe5b10156128ff5760405162461bcd60e51b8152600401808060200182810382526027815260200180614e5a6027913960400191505060405180910390fd5b821561291a5761291a60008a8a600019810181811061197057fe5b5050505050505050505050565b60015460408051633444fbf160e21b81526001600160a01b0384811660048301529151600093929092169163d113efc491602480820192602092909190829003018186803b158015611f2a57600080fd5b61271081565b606061298861160f565b156129cd576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60045486906001600160a01b03808316911614806129f857506005546001600160a01b038281169116145b612a37576040805162461bcd60e51b815260206004820152601c6024820152600080516020614f7c833981519152604482015290519081900360640190fd5b82336001600160a01b0382161415612a84576040805162461bcd60e51b815260206004820152601a6024820152600080516020614fbc833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110612abb57fe5b905060200201356001600160a01b03166001600160a01b031614612b14576040805162461bcd60e51b81526020600482015260196024820152600080516020614f9c833981519152604482015290519081900360640190fd5b612b1d846138b7565b93506000806000612b2e348861409c565b925092509250612b728b848b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061447d92505050565b95508986600188510381518110612b8557fe5b60200260200101511015612bca5760405162461bcd60e51b8152600401808060200182810382526027815260200180614e5a6027913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015612c2557600080fd5b505af1158015612c39573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb612c7e8d8c8c600081811061177557fe5b88600081518110612c8b57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612ce257600080fd5b505af1158015612cf6573d6000803e3d6000fd5b505050506040513d6020811015612d0c57600080fd5b5051612d1457fe5b612d548b878b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250613e9c915050565b8115612d6f57612d6f60008a8a600019810181811061132257fe5b505050505095945050505050565b6060612d8761160f565b15612dcc576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60045486906001600160a01b0380831691161480612df757506005546001600160a01b038281169116145b612e36576040805162461bcd60e51b815260206004820152601c6024820152600080516020614f7c833981519152604482015290519081900360640190fd5b82336001600160a01b0382161415612e83576040805162461bcd60e51b815260206004820152601a6024820152600080516020614fbc833981519152604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110612eba57fe5b905060200201356001600160a01b03166001600160a01b031614612f13576040805162461bcd60e51b81526020600482015260196024820152600080516020614f9c833981519152604482015290519081900360640190fd5b612f1c846138b7565b9350612f5c8888888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613a3992505050565b9250600080612f7185600081518110611d6557fe5b925092505034612f8c82611da48589600081518110611d8e57fe5b1115612fc95760405162461bcd60e51b8152600401808060200182810382526023815260200180614ea56023913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08660008151811061300557fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561303857600080fd5b505af115801561304c573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6130918c8b8b600081811061274457fe5b8760008151811061309e57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156130f557600080fd5b505af1158015613109573d6000803e3d6000fd5b505050506040513d602081101561311f57600080fd5b505161312757fe5b6131678a868a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250339250613e9c915050565b811561318257613182600089896000198101818110611ea457fe5b61319781611da48488600081518110611d8e57fe5b3411156131be576131be336131b783611da4868a600081518110611d8e57fe5b34036141d0565b5050505095945050505050565b6131d361160f565b15613218576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60045486906001600160a01b038083169116148061324357506005546001600160a01b038281169116145b613282576040805162461bcd60e51b815260206004820152601c6024820152600080516020614f7c833981519152604482015290519081900360640190fd5b81336001600160a01b03821614156132cf576040805162461bcd60e51b815260206004820152601a6024820152600080516020614fbc833981519152604482015290519081900360640190fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585600019810181811061330957fe5b905060200201356001600160a01b03166001600160a01b03161461335e5760405162461bcd60e51b815260040180806020018281038252602d815260200180614f4f602d913960400191505060405180910390fd5b613367836138b7565b92506133be8585600081811061337957fe5b905060200201356001600160a01b0316336133b88b8989600081811061339b57fe5b905060200201356001600160a01b03168a8a60018181106111cd57fe5b8a613d3f565b6133fd888686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506145a2915050565b604080516370a0823160e01b815230600482015290516000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561346757600080fd5b505afa15801561347b573d6000803e3d6000fd5b505050506040513d602081101561349157600080fd5b50519050868110156134d45760405162461bcd60e51b8152600401808060200182810382526024815260200180614e816024913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561353a57600080fd5b505af115801561354e573d6000803e3d6000fd5b505050506000806000613561848861409c565b92509250925061357133846141d0565b81156119885761198860008a8a600019810181811061132257fe5b6135946138b3565b6001600160a01b03166135a5611eca565b6001600160a01b0316146135ee576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b6008805461ffff8316600160b01b810261ffff60b01b199092169190911790915560408051918252517f2e8b87e2b3dff0b7b11ce73a61e3bb94498159c531480d9abf1307014b650af99181900360200190a150565b600754600654604080516370a0823160e01b81526001600160a01b03858116600483015291516000949392909216916370a0823191602480820192602092909190829003018186803b15801561369957600080fd5b505afa1580156136ad573d6000803e3d6000fd5b505050506040513d60208110156136c357600080fd5b5051101592915050565b6136d56138b3565b6001600160a01b03166136e6611eca565b6001600160a01b03161461372f576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b60088054821515600160c01b810260ff60c01b199092169190911790915560408051918252517f13a5d968457cb650b136b77bb4a3ff25f31b92939f2d8df0010911117b7ba9e09181900360200190a150565b6005546001600160a01b031681565b6137996138b3565b6001600160a01b03166137aa611eca565b6001600160a01b0316146137f3576040805162461bcd60e51b81526020600482018190526024820152600080516020614f0c833981519152604482015290519081900360640190fd5b6001600160a01b0381166138385760405162461bcd60e51b8152600401808060200182810382526026815260200180614e346026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b600854600160b01b900461ffff1681565b3390565b6001546040805163493f44bd60e11b8152336004820181905291516000936001600160a01b03169163927e897a916024808301926020929190829003018186803b15801561390457600080fd5b505afa158015613918573d6000803e3d6000fd5b505050506040513d602081101561392e57600080fd5b505115801561394557506001600160a01b03831615155b156139b957600154604080516364e0b15960e01b81526001600160a01b0384811660048301528681166024830152915191909216916364e0b15991604480830192600092919082900301818387803b1580156139a057600080fd5b505af11580156139b4573d6000803e3d6000fd5b505050505b60015460408051633444fbf160e21b81526001600160a01b0384811660048301529151919092169163d113efc4916024808301926020929190829003018186803b158015613a0657600080fd5b505afa158015613a1a573d6000803e3d6000fd5b505050506040513d6020811015613a3057600080fd5b50519392505050565b6060600282511015613a80576040805162461bcd60e51b81526020600482015260196024820152600080516020614f9c833981519152604482015290519081900360640190fd5b815167ffffffffffffffff81118015613a9857600080fd5b50604051908082528060200260200182016040528015613ac2578160200160208202803683370190505b5090508281600183510381518110613ad657fe5b60209081029190910101528151600019015b8015613b6c57600080613b2587866001860381518110613b0457fe5b6020026020010151878681518110613b1857fe5b60200260200101516149bf565b91509150613b47848481518110613b3857fe5b60200260200101518383614a86565b846001850381518110613b5657fe5b6020908102919091010152505060001901613ae8565b509392505050565b6000806000613b838585614b80565b60045491935091506060906001600160a01b03888116911614613ba7576003613baa565b60025b805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015613c2e5780601f10613c0357610100808354040283529160200191613c2e565b820191906000526020600020905b815481529060010190602001808311613c1157829003601f168201915b5050505050905086838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001208260405160200180806001600160f81b0319815250600101846001600160a01b03166001600160a01b031660601b815260140183815260200182805190602001908083835b60208310613cf35780518252601f199092019160209182019101613cd4565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040528051906020012060001c93505050509392505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b60208310613dc45780518252601f199092019160209182019101613da5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613e26576040519150601f19603f3d011682016040523d82523d6000602084013e613e2b565b606091505b5091509150818015613e59575080511580613e595750808060200190516020811015613e5657600080fd5b50515b613e945760405162461bcd60e51b8152600401808060200182810382526024815260200180614fff6024913960400191505060405180910390fd5b505050505050565b60005b6001835103811015610e8a57600080848381518110613eba57fe5b6020026020010151858460010181518110613ed157fe5b6020026020010151915091506000613ee98383614b80565b5090506000878560010181518110613efd57fe5b60200260200101519050600080836001600160a01b0316866001600160a01b031614613f2b57826000613f2f565b6000835b91509150600060028a51038810613f465788613f67565b613f678c878c8b60020181518110613f5a57fe5b6020026020010151613b74565b9050613f748c8888613b74565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015613fb1576020820181803683370190505b506040518563ffffffff1660e01b815260040180858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561402257818101518382015260200161400a565b50505050905090810190601f16801561404f5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561407157600080fd5b505af1158015614085573d6000803e3d6000fd5b505060019099019850613e9f975050505050505050565b60008060006140aa33613644565b156140bd575083915060009050806141c9565b6008546000906140ed90612710906140e1908990600160a01b900461ffff16614c5e565b9063ffffffff614cb716565b90506140ff868263ffffffff61487316565b93506001600160a01b038516158015906141225750600854600160c01b900460ff165b156141bf576001600160a01b03851660009081526009602052604081205461ffff1661415b57600854600160b01b900461ffff16614179565b6001600160a01b03861660009081526009602052604090205461ffff165b90506141956127106140e18461ffff851663ffffffff614c5e16565b92506141b7836141ab898863ffffffff61487316565b9063ffffffff61487316565b9350506141c7565b600091508092505b505b9250925092565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b6020831061421c5780518252601f1990920191602091820191016141fd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461427e576040519150601f19603f3d011682016040523d82523d6000602084013e614283565b606091505b50509050806120035760405162461bcd60e51b8152600401808060200182810382526023815260200180614fdc6023913960400191505060405180910390fd5b6001600160a01b038516614352576008546142e7906001600160a01b0316836141d0565b801561434d576142f783826141d0565b604080513381526001600160a01b03868116602083015287811682840152606082018490529151918516917f84ff16114f882a54c4748006b5e4b0b7ac76bd911d135145a6d063fd76a38a409181900360800190a25b610e8a565b60085461436c90869033906001600160a01b031685613d3f565b8015610e8a5761437e85338584613d3f565b604080513381526001600160a01b03868116602083015287811682840152606082018490529151918516917f84ff16114f882a54c4748006b5e4b0b7ac76bd911d135145a6d063fd76a38a409181900360800190a25050505050565b6143e261160f565b61442a576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6144606138b3565b604080516001600160a01b039092168252519081900360200190a1565b60606002825110156144c4576040805162461bcd60e51b81526020600482015260196024820152600080516020614f9c833981519152604482015290519081900360640190fd5b815167ffffffffffffffff811180156144dc57600080fd5b50604051908082528060200260200182016040528015614506578160200160208202803683370190505b509050828160008151811061451757fe5b60200260200101818152505060005b6001835103811015613b6c5760008061455c8786858151811061454557fe5b6020026020010151878660010181518110613b1857fe5b9150915061457e84848151811061456f57fe5b60200260200101518383614d1e565b84846001018151811061458d57fe5b60209081029190910101525050600101614526565b60005b600183510381101561486d576000808483815181106145c057fe5b60200260200101518584600101815181106145d757fe5b60200260200101519150915060006145ef8383614b80565b50905060006145ff888585613b74565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561464057600080fd5b505afa158015614654573d6000803e3d6000fd5b505050506040513d606081101561466a57600080fd5b5080516020909101516001600160701b0391821693501690506000806001600160a01b038a8116908916146146a05782846146a3565b83835b91509150614701828b6001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156118c357600080fd5b955061470e868383614d1e565b945050505050600080856001600160a01b0316886001600160a01b0316146147385782600061473c565b6000835b91509150600060028c51038a10614753578a614767565b6147678d898e8d60020181518110613f5a57fe5b604080516000808252602082019283905263022c0d9f60e01b835260248201878152604483018790526001600160a01b038086166064850152608060848501908152845160a48601819052969750908c169563022c0d9f958a958a958a9591949193919260c486019290918190849084905b838110156147f15781810151838201526020016147d9565b50505050905090810190601f16801561481e5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561484057600080fd5b505af1158015614854573d6000803e3d6000fd5b50506001909b019a506145a59950505050505050505050565b50505050565b6000828211156148ca576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b6148dd61160f565b15614922576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586144606138b3565b6000828201838110156149b8576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60008060006149ce8585614b80565b5090506000806149df888888613b74565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015614a1757600080fd5b505afa158015614a2b573d6000803e3d6000fd5b505050506040513d6060811015614a4157600080fd5b5080516020909101516001600160701b0391821693501690506001600160a01b0387811690841614614a74578082614a77565b81815b90999098509650505050505050565b6000808411614ac65760405162461bcd60e51b8152600401808060200182810382526027815260200180614e5a6027913960400191505060405180910390fd5b600083118015614ad65750600082115b614b115760405162461bcd60e51b8152600401808060200182810382526023815260200180614f2c6023913960400191505060405180910390fd5b6000614b35612710614b29868863ffffffff614c5e16565b9063ffffffff614c5e16565b90506000614b59614b4533610ceb565b6126f703614b29868963ffffffff61487316565b9050614b766001828481614b6957fe5b049063ffffffff61495e16565b9695505050505050565b600080826001600160a01b0316846001600160a01b03161415614bd45760405162461bcd60e51b8152600401808060200182810382526023815260200180614ec86023913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610614bf4578284614bf7565b83835b90925090506001600160a01b038216614c57576040805162461bcd60e51b815260206004820152601c60248201527f50616e63616b654c6962726172793a205a45524f5f4144445245535300000000604482015290519081900360640190fd5b9250929050565b600082614c6d575060006148cf565b82820282848281614c7a57fe5b04146149b85760405162461bcd60e51b8152600401808060200182810382526021815260200180614eeb6021913960400191505060405180910390fd5b6000808211614d0d576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381614d1657fe5b049392505050565b6000808411614d5e5760405162461bcd60e51b8152600401808060200182810382526026815260200180614e0e6026913960400191505060405180910390fd5b600083118015614d6e5750600082115b614da95760405162461bcd60e51b8152600401808060200182810382526023815260200180614f2c6023913960400191505060405180910390fd5b6000614dc8614db733610ceb565b86906126f70363ffffffff614c5e16565b90506000614ddc828563ffffffff614c5e16565b90506000614df683611da48861271063ffffffff614c5e16565b9050808281614e0157fe5b0497965050505050505056fe466c6f6f7a526f757465723a20494e53554646494349454e545f494e5055545f414d4f554e544f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373466c6f6f7a526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e54466c6f6f7a526f757465723a20736c6970706167652073657474696e6720746f206c6f77466c6f6f7a526f757465723a204558434553534956455f494e5055545f414d4f554e5450616e63616b654c6962726172793a204944454e544943414c5f414444524553534553536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572466c6f6f7a526f757465723a20494e53554646494349454e545f4c4951554944495459466c6f6f7a526f757465723a20424e422068617320746f20626520746865206c6173742070617468206974656d466c6f6f7a526f757465723a20696e76616c696420666163746f727900000000466c6f6f7a526f757465723a20494e56414c49445f5041544800000000000000466c6f6f7a526f757465723a2073656c6620726566657272616c0000000000005472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a264697066735822122084279765391166ca2f9b4c57a6ed75be268fb3091b85f1586ba2f9c29c8882d564736f6c63430006060033",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawBnb(address,uint256)": {
        "details": "Withdraw BNB that somehow ended up in the contract."
      },
      "withdrawErc20Token(address,address,uint256)": {
        "details": "Withdraw any erc20 compliant tokens that somehow ended up in the contract."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 583,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1170,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "referralRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IReferralRegistry)4242"
      },
      {
        "astId": 1172,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "pancakeInitCodeV1",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1174,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "pancakeInitCodeV2",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1176,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "pancakeFactoryV1",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1178,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "pancakeFactoryV2",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1180,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "saveYourAssetsToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)542"
      },
      {
        "astId": 1182,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "balanceThreshold",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1184,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1186,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "swapFee",
        "offset": 20,
        "slot": "8",
        "type": "t_uint16"
      },
      {
        "astId": 1188,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "referralRewardRate",
        "offset": 22,
        "slot": "8",
        "type": "t_uint16"
      },
      {
        "astId": 1190,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "referralsActivated",
        "offset": 24,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 1194,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "customReferralRewardRate",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 1198,
        "contract": "contracts/FloozRouter.sol:FloozRouter",
        "label": "referralAnchor",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)542": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IReferralRegistry)4242": {
        "encoding": "inplace",
        "label": "contract IReferralRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}