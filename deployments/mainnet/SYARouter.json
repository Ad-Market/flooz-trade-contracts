{
  "address": "0xBa3bC1F3F00a0b3544a2690382787c3c5da4070F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_swapFee",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_balanceThreshold",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_saveYourAssetsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pancakeFactoryV1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pancakeFactoryV2",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_pancakeInitCodeV1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_pancakeInitCodeV2",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceThreshold",
          "type": "uint256"
        }
      ],
      "name": "BalanceThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeReceiver",
          "type": "address"
        }
      ],
      "name": "FeeReceiverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "swapFee",
          "type": "uint8"
        }
      ],
      "name": "SwapFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeFactoryV1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeFactoryV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saveYourAssetsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactNativeForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactNativeForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForNative",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForNativeSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapNativeForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactNative",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBalanceThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateBalanceThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeReceiver",
          "type": "address"
        }
      ],
      "name": "updateFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newSwapFee",
          "type": "uint8"
        }
      ],
      "name": "updateSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawBnb",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa8e626dcc1fcca2c1edf516bbd8b04507e7e43073b76418b777b53d01b0c25a0",
  "receipt": {
    "to": null,
    "from": "0xAa2500d99AFB556237F870c1fA3Cc577a67c7272",
    "contractAddress": "0xBa3bC1F3F00a0b3544a2690382787c3c5da4070F",
    "transactionIndex": 17,
    "gasUsed": "3932402",
    "logsBloom": "0x
    "blockHash": "0x86daa3dc4cceb9a308a4b293a0c08c3987298d300022fcf83c3b7c9cfa842620",
    "transactionHash": "0xa8e626dcc1fcca2c1edf516bbd8b04507e7e43073b76418b777b53d01b0c25a0",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 8758824,
        "transactionHash": "0xa8e626dcc1fcca2c1edf516bbd8b04507e7e43073b76418b777b53d01b0c25a0",
        "address": "0xBa3bC1F3F00a0b3544a2690382787c3c5da4070F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aa2500d99afb556237f870c1fa3cc577a67c7272"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0x86daa3dc4cceb9a308a4b293a0c08c3987298d300022fcf83c3b7c9cfa842620"
      }
    ],
    "blockNumber": 8758824,
    "cumulativeGasUsed": "5972366",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
    50,
    "0x12b61B82f441bAD5A6E4dD86d74b92E8F15b930B",
    "5000000000000000000",
    "0x83A86adf1a7c56e77d36d585B808052e0a2aAD0e",
    "0xBCfCcbde45cE874adCB698cC183deBcF17952812",
    "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73",
    "0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66",
    "0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5"
  ],
  "solcInputHash": "c3daadeb5b27e4928a276d12f7df84f9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_swapFee\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_saveYourAssetsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeFactoryV1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeFactoryV2\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_pancakeInitCodeV1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_pancakeInitCodeV2\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceThreshold\",\"type\":\"uint256\"}],\"name\":\"BalanceThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"FeeReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"swapFee\",\"type\":\"uint8\"}],\"name\":\"SwapFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeFactoryV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeFactoryV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveYourAssetsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactNativeForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactNativeForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForNative\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForNativeSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapNativeForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactNative\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalanceThreshold\",\"type\":\"uint256\"}],\"name\":\"updateBalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newSwapFee\",\"type\":\"uint8\"}],\"name\":\"updateSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawBnb()\":{\"details\":\"Withdraw BNB that somehow ended up in the contract.\"},\"withdrawErc20Token(address,address,uint256)\":{\"details\":\"Withdraw any erc20 compliant tokens that somehow ended up in the contract.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/SaveYourPancakeRouter.sol\":\"SaveYourPancakeRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\"},\"contracts/SaveYourPancakeRouter.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// SPDX-License-Identifier: UNLICENSED\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/PancakeLibrary.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract SaveYourPancakeRouter is Ownable, Pausable {\\n    using SafeMath for uint256;\\n    event SwapFeeUpdated(uint8 swapFee);\\n    event FeeReceiverUpdated(address feeReceiver);\\n    event BalanceThresholdUpdated(uint256 balanceThreshold);\\n\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n    address public immutable WETH;\\n    bytes internal pancakeInitCodeV1;\\n    bytes internal pancakeInitCodeV2;\\n    address public pancakeFactoryV1;\\n    address public pancakeFactoryV2;\\n    IERC20 public saveYourAssetsToken;\\n    uint256 public balanceThreshold;\\n    address public feeReceiver;\\n    uint8 public swapFee;\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"SaveYourPancake: deadline for trade passed\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _WETH,\\n        uint8 _swapFee,\\n        address _feeReceiver,\\n        uint256 _balanceThreshold,\\n        IERC20 _saveYourAssetsToken,\\n        address _pancakeFactoryV1,\\n        address _pancakeFactoryV2,\\n        bytes memory _pancakeInitCodeV1,\\n        bytes memory _pancakeInitCodeV2\\n    ) public {\\n        WETH = _WETH;\\n        swapFee = _swapFee;\\n        feeReceiver = _feeReceiver;\\n        saveYourAssetsToken = _saveYourAssetsToken;\\n        balanceThreshold = _balanceThreshold;\\n        pancakeFactoryV1 = _pancakeFactoryV1;\\n        pancakeFactoryV2 = _pancakeFactoryV2;\\n        pancakeInitCodeV1 = _pancakeInitCodeV1;\\n        pancakeInitCodeV2 = _pancakeInitCodeV2;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address factory,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? _pairFor(factory, output, path[i + 2]) : _to;\\n            IPancakePair(_pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function swapExactNativeForTokens(\\n        address factory,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable whenNotPaused() ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[0] == WETH, \\\"SaveYourPancakeRouter: INVALID_PATH\\\");\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(msg.value);\\n        amounts = _getAmountsOut(factory, swapAmount, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"SaveYourPancakeRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        IWETH(WETH).deposit{value: amounts[0].add(feeAmount)}();\\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), amounts[0]));\\n        assert(IWETH(WETH).transfer(feeReceiver, feeAmount));\\n        _swap(factory, amounts, path, to);\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0].add(feeAmount)) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0].add(feeAmount));\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(\\n        address factory,\\n        address[] memory path,\\n        address _to\\n    ) internal {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            IPancakePair pair = IPancakePair(_pairFor(factory, input, output));\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            {\\n                // scope to avoid stack too deep errors\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\n                amountOutput = _getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n            address to = i < path.length - 2 ? _pairFor(factory, output, path[i + 2]) : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function swapExactTokensForNativeSupportingFeeOnTransferTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external whenNotPaused() ensure(deadline) {\\n        require(path[path.length - 1] == WETH, \\\"SaveYourPancake: BNB has to be the last path item\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amountIn);\\n        _swapSupportingFeeOnTransferTokens(factory, path, address(this));\\n        uint256 amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, \\\"SaveYourPancake: slippage setting to low\\\");\\n        IWETH(WETH).withdraw(amountOut);\\n        (uint256 withdrawAmount, uint256 feeAmount) = _calculateFee(amountOut);\\n        TransferHelper.safeTransferETH(to, withdrawAmount);\\n        TransferHelper.safeTransferETH(feeReceiver, feeAmount);\\n    }\\n\\n    function swapExactTokensForTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external whenNotPaused() ensure(deadline) returns (uint256[] memory amounts) {\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amountIn);\\n        amounts = _getAmountsOut(factory, swapAmount, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"SaveYourPancake: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, feeReceiver, feeAmount);\\n        _swap(factory, amounts, path, to);\\n    }\\n\\n    function swapExactTokensForNative(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external whenNotPaused() ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[path.length - 1] == WETH, \\\"SaveYourPancake: INVALID_PATH\\\");\\n        amounts = _getAmountsOut(factory, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"SaveYourPancake: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, swapAmount);\\n        TransferHelper.safeTransferETH(feeReceiver, feeAmount);\\n    }\\n\\n    function swapNativeForExactTokens(\\n        address factory,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable whenNotPaused() ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[0] == WETH, \\\"SaveYourPancake: INVALID_PATH\\\");\\n        amounts = _getAmountsIn(factory, amountOut, path);\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amounts[0]);\\n        require(swapAmount <= msg.value, \\\"SaveYourPancake: EXCESSIVE_INPUT_AMOUNT\\\");\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), swapAmount));\\n        assert(IWETH(WETH).transfer(feeReceiver, feeAmount));\\n        _swap(factory, amounts, path, to);\\n        // refund dust eth, if any\\n        if (msg.value > swapAmount.add(feeAmount)) TransferHelper.safeTransferETH(msg.sender, msg.value - swapAmount);\\n    }\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external whenNotPaused() ensure(deadline) returns (uint256[] memory amounts) {\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amountIn);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), swapAmount);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, feeReceiver, feeAmount);\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(factory, path, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n            \\\"SaveYourPancake: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n    }\\n\\n    function swapTokensForExactTokens(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external whenNotPaused() ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _getAmountsIn(factory, amountOut, path);\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amounts[0]);\\n        require(swapAmount <= amountInMax, \\\"SaveYourPancake: EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), swapAmount);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, feeReceiver, feeAmount);\\n        _swap(factory, amounts, path, to);\\n    }\\n\\n    function swapTokensForExactNative(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external whenNotPaused() ensure(deadline) returns (uint256[] memory amounts) {\\n        require(path[path.length - 1] == WETH, \\\"SaveYourPancake: INVALID_PATH\\\");\\n        amounts = _getAmountsIn(factory, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"SaveYourPancake: EXCESSIVE_INPUT_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(factory, amounts, path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, swapAmount);\\n        TransferHelper.safeTransferETH(feeReceiver, feeAmount);\\n    }\\n\\n    function swapExactNativeForTokensSupportingFeeOnTransferTokens(\\n        address factory,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable whenNotPaused() ensure(deadline) {\\n        require(path[0] == WETH, \\\"SaveYourPancake: INVALID_PATH\\\");\\n        uint256 amountIn = msg.value;\\n        IWETH(WETH).deposit{value: amountIn}();\\n        (uint256 swapAmount, uint256 feeAmount) = _calculateFee(amountIn);\\n        assert(IWETH(WETH).transfer(_pairFor(factory, path[0], path[1]), swapAmount));\\n        assert(IWETH(WETH).transfer(feeReceiver, feeAmount));\\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(factory, path, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n            \\\"SaveYourPancake: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n    }\\n\\n    function _calculateFee(uint256 amount) internal view returns (uint256 swapAmount, uint256 feeAmount) {\\n        if (saveYourAssetsToken.balanceOf(msg.sender) >= balanceThreshold) {\\n            feeAmount = 0;\\n            swapAmount = amount;\\n        } else {\\n            feeAmount = amount.mul(swapFee).div(FEE_DENOMINATOR);\\n            swapAmount = amount.sub(feeAmount);\\n        }\\n    }\\n\\n    function getUserFee(address user) public view returns (uint256) {\\n        saveYourAssetsToken.balanceOf(user) >= balanceThreshold ? 0 : swapFee;\\n    }\\n\\n    function updateSwapFee(uint8 newSwapFee) external onlyOwner {\\n        swapFee = newSwapFee;\\n        emit SwapFeeUpdated(newSwapFee);\\n    }\\n\\n    function updateFeeReceiver(address newFeeReceiver) external onlyOwner {\\n        feeReceiver = newFeeReceiver;\\n        emit FeeReceiverUpdated(newFeeReceiver);\\n    }\\n\\n    function updateBalanceThreshold(uint256 newBalanceThreshold) external onlyOwner {\\n        balanceThreshold = newBalanceThreshold;\\n        emit BalanceThresholdUpdated(balanceThreshold);\\n    }\\n\\n    /**\\n     * @dev Withdraw BNB that somehow ended up in the contract.\\n     */\\n    function withdrawBnb() external onlyOwner {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Withdraw any erc20 compliant tokens that\\n     * somehow ended up in the contract.\\n     */\\n    function withdrawErc20Token(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).transfer(to, amount);\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal view returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"SaveYourPancake: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"SaveYourPancake: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul((9975 - getUserFee(msg.sender)));\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(10000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function _getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal view returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"SaveYourPancake: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"SaveYourPancake: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(10000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(9975 - getUserFee(msg.sender));\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function _getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"SaveYourPancake: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = _getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = _getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function _getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"SaveYourPancake: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = _getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = _getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function _getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = PancakeLibrary.sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(_pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function _pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        (address token0, address token1) = PancakeLibrary.sortTokens(tokenA, tokenB);\\n        bytes memory initcode = factory == pancakeFactoryV1 ? pancakeInitCodeV1 : pancakeInitCodeV2;\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        initcode // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x8651df87bbba9779c6568d9f829f118a12200ef7b396636d6c788c7261641e04\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd0ade614a95b3c690c2714d314d10a936f97afe97e05efe1b74e632dcce01ca6\"},\"contracts/libraries/PancakeLibrary.sol\":{\"content\":\"pragma solidity >=0.5.0;\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\nlibrary PancakeLibrary {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"PancakeLibrary: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"PancakeLibrary: ZERO_ADDRESS\\\");\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"PancakeLibrary: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(998);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"PancakeLibrary: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(998);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n}\\n\",\"keccak256\":\"0xe8e3b02d28c3af5ea2fb602583136e4890be04f5e98434413d3dba05f9a995f7\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-newer\\npragma solidity =0.6.6;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x119ba53a7eff45d6c2b278fbc2ada151cc9713b6dc03426802ccd50149c6e763\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200462c3803806200462c83398181016040526101208110156200003857600080fd5b815160208301516040808501516060860151608087015160a088015160c089015160e08a0180519651989a9799959894979396929591949391820192846401000000008211156200008857600080fd5b9083019060208201858111156200009e57600080fd5b8251640100000000811182820188101715620000b957600080fd5b82525081516020918201929091019080838360005b83811015620000e8578181015183820152602001620000ce565b50505050905090810190601f168015620001165780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200013a57600080fd5b9083019060208201858111156200015057600080fd5b82516401000000008111828201881017156200016b57600080fd5b82525081516020918201929091019080838360005b838110156200019a57818101518382015260200162000180565b50505050905090810190601f168015620001c85780820380516001836020036101000a031916815260200191505b506040525050506000620001e1620002e560201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b1990811690915560608a901b6001600160601b03191660805260078054909116600160a01b60ff8b1602176001600160a01b03199081166001600160a01b038a8116919091179092556005805482168884161790556006889055600380548216878416179055600480549091169185169190911790558151620002bf906001906020850190620002ea565b508051620002d5906002906020840190620002ea565b505050505050505050506200038c565b335b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032d57805160ff19168380011785556200035d565b828001600101855582156200035d579182015b828111156200035d57825182559160200191906001019062000340565b506200036b9291506200036f565b5090565b620002e791905b808211156200036b576000815560010162000376565b60805160601c61422362000409600039806101d65280610f3d5280611107528061167b52806117105280611794528061189d5280611b995280611ccb5280611d655280611e655280611ff4528061211a52806121a2528061228e528061237052806126f7528061283352806128e95280612ad152506142236000f3fe6080604052600436106101c65760003560e01c806393228dda116100f7578063c69bebe411610095578063daeca32911610064578063daeca3291461099c578063f19a416714610a42578063f2fde38b14610a57578063f4eb502914610a8a576101ff565b8063c69bebe414610884578063c998218f146108b7578063cacb6d431461095d578063d73792a914610987576101ff565b8063ad5c4648116100d1578063ad5c46481461079f578063b1ca4936146107b4578063b3f006741461085a578063c31737741461086f576101ff565b806393228dda1461066657806396013a2a1461067b5780639d018fb51461070d576101ff565b80633f4ba83a11610164578063715018a61161013e578063715018a6146105795780638456cb591461058e5780638da5cb5b146105a35780638ee6ac72146105d4576101ff565b80633f4ba83a1461051057806354cf2aeb146105255780635c975abb14610550576101ff565b806322b58410116101a057806322b584101461028b57806329eaf741146103815780632d07973414610427578063375734d91461046a576101ff565b8063060f58c3146102045780631da0603a146102495780631e6f71671461025e576101ff565b366101ff57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101fd57fe5b005b600080fd5b34801561021057600080fd5b506102376004803603602081101561022757600080fd5b50356001600160a01b0316610a9f565b60408051918252519081900360200190f35b34801561025557600080fd5b506101fd610b41565b34801561026a57600080fd5b506101fd6004803603602081101561028157600080fd5b503560ff16610bd2565b34801561029757600080fd5b50610331600480360360c08110156102ae57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156102e457600080fd5b8201836020820111156102f657600080fd5b803590602001918460208302840111600160201b8311171561031757600080fd5b91935091506001600160a01b038135169060200135610c88565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561036d578181015183820152602001610355565b505050509050019250505060405180910390f35b34801561038d57600080fd5b50610331600480360360c08110156103a457600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156103da57600080fd5b8201836020820111156103ec57600080fd5b803590602001918460208302840111600160201b8311171561040d57600080fd5b91935091506001600160a01b038135169060200135610ea4565b34801561043357600080fd5b506101fd6004803603606081101561044a57600080fd5b506001600160a01b038135811691602081013590911690604001356111d4565b34801561047657600080fd5b50610331600480360360c081101561048d57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156104c357600080fd5b8201836020820111156104d557600080fd5b803590602001918460208302840111600160201b831117156104f657600080fd5b91935091506001600160a01b0381351690602001356112c7565b34801561051c57600080fd5b506101fd61143b565b34801561053157600080fd5b5061053a6114a7565b6040805160ff9092168252519081900360200190f35b34801561055c57600080fd5b506105656114b7565b604080519115158252519081900360200190f35b34801561058557600080fd5b506101fd6114c7565b34801561059a57600080fd5b506101fd611573565b3480156105af57600080fd5b506105b86115dd565b604080516001600160a01b039092168252519081900360200190f35b6101fd600480360360a08110156105ea57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561061957600080fd5b82018360208201111561062b57600080fd5b803590602001918460208302840111600160201b8311171561064c57600080fd5b91935091506001600160a01b0381351690602001356115ec565b34801561067257600080fd5b506105b8611af9565b610331600480360360a081101561069157600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156106c057600080fd5b8201836020820111156106d257600080fd5b803590602001918460208302840111600160201b831117156106f357600080fd5b91935091506001600160a01b038135169060200135611b08565b610331600480360360a081101561072357600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561075257600080fd5b82018360208201111561076457600080fd5b803590602001918460208302840111600160201b8311171561078557600080fd5b91935091506001600160a01b038135169060200135611f63565b3480156107ab57600080fd5b506105b861236e565b3480156107c057600080fd5b50610331600480360360c08110156107d757600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561080d57600080fd5b82018360208201111561081f57600080fd5b803590602001918460208302840111600160201b8311171561084057600080fd5b91935091506001600160a01b038135169060200135612392565b34801561086657600080fd5b506105b8612595565b34801561087b57600080fd5b506102376125a4565b34801561089057600080fd5b506101fd600480360360208110156108a757600080fd5b50356001600160a01b03166125aa565b3480156108c357600080fd5b506101fd600480360360c08110156108da57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561091057600080fd5b82018360208201111561092257600080fd5b803590602001918460208302840111600160201b8311171561094357600080fd5b91935091506001600160a01b038135169060200135612660565b34801561096957600080fd5b506101fd6004803603602081101561098057600080fd5b5035612995565b34801561099357600080fd5b50610237612a32565b3480156109a857600080fd5b50610331600480360360c08110156109bf57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156109f557600080fd5b820183602082011115610a0757600080fd5b803590602001918460208302840111600160201b83111715610a2857600080fd5b91935091506001600160a01b038135169060200135612a38565b348015610a4e57600080fd5b506105b8612bed565b348015610a6357600080fd5b506101fd60048036036020811015610a7a57600080fd5b50356001600160a01b0316612bfc565b348015610a9657600080fd5b506105b8612cfe565b600654600554604080516370a0823160e01b81526001600160a01b03858116600483015291516000949392909216916370a0823191602480820192602092909190829003018186803b158015610af457600080fd5b505afa158015610b08573d6000803e3d6000fd5b505050506040513d6020811015610b1e57600080fd5b50511015610b3857600754600160a01b900460ff16610b3b565b60005b50919050565b610b49612d0d565b6001600160a01b0316610b5a6115dd565b6001600160a01b031614610ba3576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b60405133904780156108fc02916000818181858888f19350505050158015610bcf573d6000803e3d6000fd5b50565b610bda612d0d565b6001600160a01b0316610beb6115dd565b6001600160a01b031614610c34576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b6007805460ff8316600160a01b810260ff60a01b199092169190911790915560408051918252517fefece48cd3978027fdce60b535886c9d514101455104cbb209ad1dba24a97ffc9181900360200190a150565b6060610c926114b7565b15610cd7576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b8142811015610d175760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b610d558989888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d1192505050565b9150600080610d7784600081518110610d6a57fe5b6020026020010151612e4c565b9150915088821115610dba5760405162461bcd60e51b8152600401808060200182810382526027815260200180613fa96027913960400191505060405180910390fd5b610e2488886000818110610dca57fe5b905060200201356001600160a01b031633610e1e8e8c8c6000818110610dec57fe5b905060200201356001600160a01b03168d8d6001818110610e0957fe5b905060200201356001600160a01b0316612f23565b856130ee565b610e5688886000818110610e3457fe5b6007546001600160a01b036020909202939093013581169233925016846130ee565b610e968b858a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c925061324b915050565b505050979650505050505050565b6060610eae6114b7565b15610ef3576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b8142811015610f335760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866000198101818110610f6d57fe5b905060200201356001600160a01b03166001600160a01b031614610fc6576040805162461bcd60e51b815260206004820152601d60248201526000805160206141ce833981519152604482015290519081900360640190fd5b611004898988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061344b92505050565b9150868260018451038151811061101757fe5b6020026020010151101561105c5760405162461bcd60e51b815260040180806020018281038252602b815260200180613fd0602b913960400191505060405180910390fd5b6110c58686600081811061106c57fe5b905060200201356001600160a01b0316336110ab8c8a8a600081811061108e57fe5b905060200201356001600160a01b03168b8b6001818110610e0957fe5b856000815181106110b857fe5b60200260200101516130ee565b611105898388888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525030925061324b915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d8360018551038151811061114457fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561118257600080fd5b505af1158015611196573d6000803e3d6000fd5b505050506000806111b084600186510381518110610d6a57fe5b915091506111be8683613570565b600754610e96906001600160a01b031682613570565b6111dc612d0d565b6001600160a01b03166111ed6115dd565b6001600160a01b031614611236576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561129657600080fd5b505af11580156112aa573d6000803e3d6000fd5b505050506040513d60208110156112c057600080fd5b5050505050565b60606112d16114b7565b15611316576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b81428110156113565760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b6000806113628a612e4c565b915091506113a48b838a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061344b92505050565b935088846001865103815181106113b757fe5b602002602001015110156113fc5760405162461bcd60e51b815260040180806020018281038252602b815260200180613fd0602b913960400191505060405180910390fd5b610e248888600081811061140c57fe5b905060200201356001600160a01b03163361142e8e8c8c6000818110610dec57fe5b876000815181106110b857fe5b611443612d0d565b6001600160a01b03166114546115dd565b6001600160a01b03161461149d576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b6114a5613668565b565b600754600160a01b900460ff1681565b600054600160a01b900460ff1690565b6114cf612d0d565b6001600160a01b03166114e06115dd565b6001600160a01b031614611529576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61157b612d0d565b6001600160a01b031661158c6115dd565b6001600160a01b0316146115d5576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b6114a561370b565b6000546001600160a01b031690565b6115f46114b7565b15611639576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b80428110156116795760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316858560008181106116b057fe5b905060200201356001600160a01b03166001600160a01b031614611709576040805162461bcd60e51b815260206004820152601d60248201526000805160206141ce833981519152604482015290519081900360640190fd5b60003490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561176957600080fd5b505af115801561177d573d6000803e3d6000fd5b505050505060008061178e83612e4c565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6117ef8c8b8b60008181106117d257fe5b905060200201356001600160a01b03168c8c6001818110610e0957fe5b846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561183f57600080fd5b505af1158015611853573d6000803e3d6000fd5b505050506040513d602081101561186957600080fd5b505161187157fe5b6007546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290517f00000000000000000000000000000000000000000000000000000000000000009092169163a9059cbb916044808201926020929091908290030181600087803b1580156118e857600080fd5b505af11580156118fc573d6000803e3d6000fd5b505050506040513d602081101561191257600080fd5b505161191a57fe5b60008888600019810181811061192c57fe5b905060200201356001600160a01b03166001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561199157600080fd5b505afa1580156119a5573d6000803e3d6000fd5b505050506040513d60208110156119bb57600080fd5b50516040805160208b810282810182019093528b82529293506119fd928e928d918d9182918501908490808284376000920191909152508c9250613794915050565b89611aaf828b8b6000198101818110611a1257fe5b905060200201356001600160a01b03166001600160a01b03166370a082318b6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015611a7757600080fd5b505afa158015611a8b573d6000803e3d6000fd5b505050506040513d6020811015611aa157600080fd5b50519063ffffffff613a6516565b1015611aec5760405162461bcd60e51b815260040180806020018281038252602b815260200180613fd0602b913960400191505060405180910390fd5b5050505050505050505050565b6005546001600160a01b031681565b6060611b126114b7565b15611b57576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b8142811015611b975760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110611bce57fe5b905060200201356001600160a01b03166001600160a01b031614611c235760405162461bcd60e51b81526004018080602001828103825260238152602001806140256023913960400191505060405180910390fd5b600080611c2f34612e4c565b91509150611c718a838a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061344b92505050565b93508884600186510381518110611c8457fe5b60200260200101511015611cc95760405162461bcd60e51b81526004018080602001828103825260318152602001806140726031913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0611d1f8387600081518110611d0957fe5b6020026020010151613ac790919063ffffffff16565b6040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d4a57600080fd5b505af1158015611d5e573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb611da38c8b8b60008181106117d257fe5b86600081518110611db057fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611e0757600080fd5b505af1158015611e1b573d6000803e3d6000fd5b505050506040513d6020811015611e3157600080fd5b5051611e3957fe5b6007546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290517f00000000000000000000000000000000000000000000000000000000000000009092169163a9059cbb916044808201926020929091908290030181600087803b158015611eb057600080fd5b505af1158015611ec4573d6000803e3d6000fd5b505050506040513d6020811015611eda57600080fd5b5051611ee257fe5b611f228a858a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c925061324b915050565b611f338185600081518110611d0957fe5b341115611f5657611f5633611f4f8387600081518110611d0957fe5b3403613570565b5050509695505050505050565b6060611f6d6114b7565b15611fb2576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b8142811015611ff25760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061202957fe5b905060200201356001600160a01b03166001600160a01b031614612082576040805162461bcd60e51b815260206004820152601d60248201526000805160206141ce833981519152604482015290519081900360640190fd5b6120c08888888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d1192505050565b91506000806120d584600081518110610d6a57fe5b91509150348211156121185760405162461bcd60e51b8152600401808060200182810382526027815260200180613fa96027913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08560008151811061215457fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561218757600080fd5b505af115801561219b573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6121e08c8b8b60008181106117d257fe5b846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561223057600080fd5b505af1158015612244573d6000803e3d6000fd5b505050506040513d602081101561225a57600080fd5b505161226257fe5b6007546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290517f00000000000000000000000000000000000000000000000000000000000000009092169163a9059cbb916044808201926020929091908290030181600087803b1580156122d957600080fd5b505af11580156122ed573d6000803e3d6000fd5b505050506040513d602081101561230357600080fd5b505161230b57fe5b61234b8a858a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c925061324b915050565b61235b828263ffffffff613ac716565b341115611f5657611f5633833403613570565b7f000000000000000000000000000000000000000000000000000000000000000081565b606061239c6114b7565b156123e1576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b81428110156124215760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b60008061242d8a612e4c565b9150915061244188886000818110610dca57fe5b61245188886000818110610e3457fe5b60008888600019810181811061246357fe5b905060200201356001600160a01b03166001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156124c857600080fd5b505afa1580156124dc573d6000803e3d6000fd5b505050506040513d60208110156124f257600080fd5b50516040805160208b810282810182019093528b8252929350612534928f928d918d9182918501908490808284376000920191909152508c9250613794915050565b89612549828b8b6000198101818110611a1257fe5b10156125865760405162461bcd60e51b815260040180806020018281038252602b815260200180613fd0602b913960400191505060405180910390fd5b50505050979650505050505050565b6007546001600160a01b031681565b60065481565b6125b2612d0d565b6001600160a01b03166125c36115dd565b6001600160a01b03161461260c576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b600780546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f27aae5db36d94179909d019ae0b1ac7c16d96d953148f63c0f6a0a9c8ead79ee9181900360200190a150565b6126686114b7565b156126ad576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b80428110156126ed5760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585600019810181811061272757fe5b905060200201356001600160a01b03166001600160a01b03161461277c5760405162461bcd60e51b81526004018080602001828103825260318152602001806141566031913960400191505060405180910390fd5b6127d18585600081811061278c57fe5b905060200201356001600160a01b0316336127cb8b898960008181106127ae57fe5b905060200201356001600160a01b03168a8a6001818110610e0957fe5b8a6130ee565b61281088868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250613794915050565b604080516370a0823160e01b815230600482015290516000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561287a57600080fd5b505afa15801561288e573d6000803e3d6000fd5b505050506040513d60208110156128a457600080fd5b50519050868110156128e75760405162461bcd60e51b81526004018080602001828103825260288152602001806140ed6028913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561294d57600080fd5b505af1158015612961573d6000803e3d6000fd5b5050505060008061297183612e4c565b9150915061297f8683613570565b600754611aec906001600160a01b031682613570565b61299d612d0d565b6001600160a01b03166129ae6115dd565b6001600160a01b0316146129f7576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b60068190556040805182815290517fc86ab5ae638c0e95d21e0d47f77aa3a65ded219f7b70bc6ea894107f437d56369181900360200190a150565b61271081565b6060612a426114b7565b15612a87576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b8142811015612ac75760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866000198101818110612b0157fe5b905060200201356001600160a01b03166001600160a01b031614612b5a576040805162461bcd60e51b815260206004820152601d60248201526000805160206141ce833981519152604482015290519081900360640190fd5b612b988989888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d1192505050565b91508682600081518110612ba857fe5b6020026020010151111561105c5760405162461bcd60e51b8152600401808060200182810382526027815260200180613fa96027913960400191505060405180910390fd5b6004546001600160a01b031681565b612c04612d0d565b6001600160a01b0316612c156115dd565b6001600160a01b031614612c5e576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b6001600160a01b038116612ca35760405162461bcd60e51b8152600401808060200182810382526026815260200180613f836026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b3390565b6060600282511015612d58576040805162461bcd60e51b815260206004820152601d60248201526000805160206141ce833981519152604482015290519081900360640190fd5b815167ffffffffffffffff81118015612d7057600080fd5b50604051908082528060200260200182016040528015612d9a578160200160208202803683370190505b5090508281600183510381518110612dae57fe5b60209081029190910101528151600019015b8015612e4457600080612dfd87866001860381518110612ddc57fe5b6020026020010151878681518110612df057fe5b6020026020010151613b28565b91509150612e1f848481518110612e1057fe5b60200260200101518383613bef565b846001850381518110612e2e57fe5b6020908102919091010152505060001901612dc0565b509392505050565b600654600554604080516370a0823160e01b81523360048201529051600093849390926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015612ea157600080fd5b505afa158015612eb5573d6000803e3d6000fd5b505050506040513d6020811015612ecb57600080fd5b505110612edd57508190506000612f1e565b600754612f099061271090612efd908690600160a01b900460ff16613ce9565b9063ffffffff613d4216565b9050612f1b838263ffffffff613a6516565b91505b915091565b6000806000612f328585613da9565b60035491935091506060906001600160a01b03888116911614612f56576002612f59565b60015b805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612fdd5780601f10612fb257610100808354040283529160200191612fdd565b820191906000526020600020905b815481529060010190602001808311612fc057829003601f168201915b5050505050905086838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001208260405160200180806001600160f81b0319815250600101846001600160a01b03166001600160a01b031660601b815260140183815260200182805190602001908083835b602083106130a25780518252601f199092019160209182019101613083565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040528051906020012060001c93505050509392505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b602083106131735780518252601f199092019160209182019101613154565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146131d5576040519150601f19603f3d011682016040523d82523d6000602084013e6131da565b606091505b5091509150818015613208575080511580613208575080806020019051602081101561320557600080fd5b50515b6132435760405162461bcd60e51b81526004018080602001828103825260248152602001806141aa6024913960400191505060405180910390fd5b505050505050565b60005b60018351038110156112c05760008084838151811061326957fe5b602002602001015185846001018151811061328057fe5b60200260200101519150915060006132988383613da9565b50905060008785600101815181106132ac57fe5b60200260200101519050600080836001600160a01b0316866001600160a01b0316146132da578260006132de565b6000835b91509150600060028a510388106132f55788613316565b6133168c878c8b6002018151811061330957fe5b6020026020010151612f23565b90506133238c8888612f23565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015613360576020820181803683370190505b506040518563ffffffff1660e01b815260040180858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156133d15781810151838201526020016133b9565b50505050905090810190601f1680156133fe5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561342057600080fd5b505af1158015613434573d6000803e3d6000fd5b50506001909901985061324e975050505050505050565b6060600282511015613492576040805162461bcd60e51b815260206004820152601d60248201526000805160206141ce833981519152604482015290519081900360640190fd5b815167ffffffffffffffff811180156134aa57600080fd5b506040519080825280602002602001820160405280156134d4578160200160208202803683370190505b50905082816000815181106134e557fe5b60200260200101818152505060005b6001835103811015612e445760008061352a8786858151811061351357fe5b6020026020010151878660010181518110612df057fe5b9150915061354c84848151811061353d57fe5b60200260200101518383613e87565b84846001018151811061355b57fe5b602090810291909101015250506001016134f4565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106135bc5780518252601f19909201916020918201910161359d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461361e576040519150601f19603f3d011682016040523d82523d6000602084013e613623565b606091505b50509050806136635760405162461bcd60e51b81526004018080602001828103825260238152602001806141876023913960400191505060405180910390fd5b505050565b6136706114b7565b6136b8576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6136ee612d0d565b604080516001600160a01b039092168252519081900360200190a1565b6137136114b7565b15613758576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586136ee612d0d565b60005b6001835103811015613a5f576000808483815181106137b257fe5b60200260200101518584600101815181106137c957fe5b60200260200101519150915060006137e18383613da9565b50905060006137f1888585612f23565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561383257600080fd5b505afa158015613846573d6000803e3d6000fd5b505050506040513d606081101561385c57600080fd5b5080516020909101516001600160701b0391821693501690506000806001600160a01b038a811690891614613892578284613895565b83835b915091506138f3828b6001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015611a7757600080fd5b9550613900868383613e87565b945050505050600080856001600160a01b0316886001600160a01b03161461392a5782600061392e565b6000835b91509150600060028c51038a10613945578a613959565b6139598d898e8d6002018151811061330957fe5b604080516000808252602082019283905263022c0d9f60e01b835260248201878152604483018790526001600160a01b038086166064850152608060848501908152845160a48601819052969750908c169563022c0d9f958a958a958a9591949193919260c486019290918190849084905b838110156139e35781810151838201526020016139cb565b50505050905090810190601f168015613a105780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015613a3257600080fd5b505af1158015613a46573d6000803e3d6000fd5b50506001909b019a506137979950505050505050505050565b50505050565b600082821115613abc576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b600082820183811015613b21576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000806000613b378585613da9565b509050600080613b48888888612f23565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015613b8057600080fd5b505afa158015613b94573d6000803e3d6000fd5b505050506040513d6060811015613baa57600080fd5b5080516020909101516001600160701b0391821693501690506001600160a01b0387811690841614613bdd578082613be0565b81815b90999098509650505050505050565b6000808411613c2f5760405162461bcd60e51b815260040180806020018281038252602b815260200180613fd0602b913960400191505060405180910390fd5b600083118015613c3f5750600082115b613c7a5760405162461bcd60e51b81526004018080602001828103825260278152602001806140c66027913960400191505060405180910390fd5b6000613c9e612710613c92868863ffffffff613ce916565b9063ffffffff613ce916565b90506000613cc2613cae33610a9f565b6126f703613c92868963ffffffff613a6516565b9050613cdf6001828481613cd257fe5b049063ffffffff613ac716565b9695505050505050565b600082613cf857506000613ac1565b82820282848281613d0557fe5b0414613b215760405162461bcd60e51b81526004018080602001828103825260218152602001806141156021913960400191505060405180910390fd5b6000808211613d98576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613da157fe5b049392505050565b600080826001600160a01b0316846001600160a01b03161415613dfd5760405162461bcd60e51b81526004018080602001828103825260238152602001806140a36023913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610613e1d578284613e20565b83835b90925090506001600160a01b038216613e80576040805162461bcd60e51b815260206004820152601c60248201527f50616e63616b654c6962726172793a205a45524f5f4144445245535300000000604482015290519081900360640190fd5b9250929050565b6000808411613ec75760405162461bcd60e51b815260040180806020018281038252602a815260200180614048602a913960400191505060405180910390fd5b600083118015613ed75750600082115b613f125760405162461bcd60e51b81526004018080602001828103825260278152602001806140c66027913960400191505060405180910390fd5b6000613f31613f2033610a9f565b86906126f70363ffffffff613ce916565b90506000613f45828563ffffffff613ce916565b90506000613f6b83613f5f8861271063ffffffff613ce916565b9063ffffffff613ac716565b9050808281613f7657fe5b0497965050505050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737353617665596f757250616e63616b653a204558434553534956455f494e5055545f414d4f554e5453617665596f757250616e63616b653a20494e53554646494349454e545f4f55545055545f414d4f554e5453617665596f757250616e63616b653a20646561646c696e6520666f722074726164652070617373656453617665596f757250616e63616b65526f757465723a20494e56414c49445f5041544853617665596f757250616e63616b653a20494e53554646494349454e545f494e5055545f414d4f554e5453617665596f757250616e63616b65526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e5450616e63616b654c6962726172793a204944454e544943414c5f41444452455353455353617665596f757250616e63616b653a20494e53554646494349454e545f4c495155494449545953617665596f757250616e63616b653a20736c6970706167652073657474696e6720746f206c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657253617665596f757250616e63616b653a20424e422068617320746f20626520746865206c6173742070617468206974656d5472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c454453617665596f757250616e63616b653a20494e56414c49445f50415448000000a26469706673582212206449fd4ead6d488462834544fc6cea8c1145e0c62ab73feab818a0d6b0fce0ba64736f6c63430006060033",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c806393228dda116100f7578063c69bebe411610095578063daeca32911610064578063daeca3291461099c578063f19a416714610a42578063f2fde38b14610a57578063f4eb502914610a8a576101ff565b8063c69bebe414610884578063c998218f146108b7578063cacb6d431461095d578063d73792a914610987576101ff565b8063ad5c4648116100d1578063ad5c46481461079f578063b1ca4936146107b4578063b3f006741461085a578063c31737741461086f576101ff565b806393228dda1461066657806396013a2a1461067b5780639d018fb51461070d576101ff565b80633f4ba83a11610164578063715018a61161013e578063715018a6146105795780638456cb591461058e5780638da5cb5b146105a35780638ee6ac72146105d4576101ff565b80633f4ba83a1461051057806354cf2aeb146105255780635c975abb14610550576101ff565b806322b58410116101a057806322b584101461028b57806329eaf741146103815780632d07973414610427578063375734d91461046a576101ff565b8063060f58c3146102045780631da0603a146102495780631e6f71671461025e576101ff565b366101ff57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101fd57fe5b005b600080fd5b34801561021057600080fd5b506102376004803603602081101561022757600080fd5b50356001600160a01b0316610a9f565b60408051918252519081900360200190f35b34801561025557600080fd5b506101fd610b41565b34801561026a57600080fd5b506101fd6004803603602081101561028157600080fd5b503560ff16610bd2565b34801561029757600080fd5b50610331600480360360c08110156102ae57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156102e457600080fd5b8201836020820111156102f657600080fd5b803590602001918460208302840111600160201b8311171561031757600080fd5b91935091506001600160a01b038135169060200135610c88565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561036d578181015183820152602001610355565b505050509050019250505060405180910390f35b34801561038d57600080fd5b50610331600480360360c08110156103a457600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156103da57600080fd5b8201836020820111156103ec57600080fd5b803590602001918460208302840111600160201b8311171561040d57600080fd5b91935091506001600160a01b038135169060200135610ea4565b34801561043357600080fd5b506101fd6004803603606081101561044a57600080fd5b506001600160a01b038135811691602081013590911690604001356111d4565b34801561047657600080fd5b50610331600480360360c081101561048d57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156104c357600080fd5b8201836020820111156104d557600080fd5b803590602001918460208302840111600160201b831117156104f657600080fd5b91935091506001600160a01b0381351690602001356112c7565b34801561051c57600080fd5b506101fd61143b565b34801561053157600080fd5b5061053a6114a7565b6040805160ff9092168252519081900360200190f35b34801561055c57600080fd5b506105656114b7565b604080519115158252519081900360200190f35b34801561058557600080fd5b506101fd6114c7565b34801561059a57600080fd5b506101fd611573565b3480156105af57600080fd5b506105b86115dd565b604080516001600160a01b039092168252519081900360200190f35b6101fd600480360360a08110156105ea57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561061957600080fd5b82018360208201111561062b57600080fd5b803590602001918460208302840111600160201b8311171561064c57600080fd5b91935091506001600160a01b0381351690602001356115ec565b34801561067257600080fd5b506105b8611af9565b610331600480360360a081101561069157600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156106c057600080fd5b8201836020820111156106d257600080fd5b803590602001918460208302840111600160201b831117156106f357600080fd5b91935091506001600160a01b038135169060200135611b08565b610331600480360360a081101561072357600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561075257600080fd5b82018360208201111561076457600080fd5b803590602001918460208302840111600160201b8311171561078557600080fd5b91935091506001600160a01b038135169060200135611f63565b3480156107ab57600080fd5b506105b861236e565b3480156107c057600080fd5b50610331600480360360c08110156107d757600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561080d57600080fd5b82018360208201111561081f57600080fd5b803590602001918460208302840111600160201b8311171561084057600080fd5b91935091506001600160a01b038135169060200135612392565b34801561086657600080fd5b506105b8612595565b34801561087b57600080fd5b506102376125a4565b34801561089057600080fd5b506101fd600480360360208110156108a757600080fd5b50356001600160a01b03166125aa565b3480156108c357600080fd5b506101fd600480360360c08110156108da57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561091057600080fd5b82018360208201111561092257600080fd5b803590602001918460208302840111600160201b8311171561094357600080fd5b91935091506001600160a01b038135169060200135612660565b34801561096957600080fd5b506101fd6004803603602081101561098057600080fd5b5035612995565b34801561099357600080fd5b50610237612a32565b3480156109a857600080fd5b50610331600480360360c08110156109bf57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156109f557600080fd5b820183602082011115610a0757600080fd5b803590602001918460208302840111600160201b83111715610a2857600080fd5b91935091506001600160a01b038135169060200135612a38565b348015610a4e57600080fd5b506105b8612bed565b348015610a6357600080fd5b506101fd60048036036020811015610a7a57600080fd5b50356001600160a01b0316612bfc565b348015610a9657600080fd5b506105b8612cfe565b600654600554604080516370a0823160e01b81526001600160a01b03858116600483015291516000949392909216916370a0823191602480820192602092909190829003018186803b158015610af457600080fd5b505afa158015610b08573d6000803e3d6000fd5b505050506040513d6020811015610b1e57600080fd5b50511015610b3857600754600160a01b900460ff16610b3b565b60005b50919050565b610b49612d0d565b6001600160a01b0316610b5a6115dd565b6001600160a01b031614610ba3576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b60405133904780156108fc02916000818181858888f19350505050158015610bcf573d6000803e3d6000fd5b50565b610bda612d0d565b6001600160a01b0316610beb6115dd565b6001600160a01b031614610c34576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b6007805460ff8316600160a01b810260ff60a01b199092169190911790915560408051918252517fefece48cd3978027fdce60b535886c9d514101455104cbb209ad1dba24a97ffc9181900360200190a150565b6060610c926114b7565b15610cd7576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b8142811015610d175760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b610d558989888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d1192505050565b9150600080610d7784600081518110610d6a57fe5b6020026020010151612e4c565b9150915088821115610dba5760405162461bcd60e51b8152600401808060200182810382526027815260200180613fa96027913960400191505060405180910390fd5b610e2488886000818110610dca57fe5b905060200201356001600160a01b031633610e1e8e8c8c6000818110610dec57fe5b905060200201356001600160a01b03168d8d6001818110610e0957fe5b905060200201356001600160a01b0316612f23565b856130ee565b610e5688886000818110610e3457fe5b6007546001600160a01b036020909202939093013581169233925016846130ee565b610e968b858a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c925061324b915050565b505050979650505050505050565b6060610eae6114b7565b15610ef3576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b8142811015610f335760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866000198101818110610f6d57fe5b905060200201356001600160a01b03166001600160a01b031614610fc6576040805162461bcd60e51b815260206004820152601d60248201526000805160206141ce833981519152604482015290519081900360640190fd5b611004898988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061344b92505050565b9150868260018451038151811061101757fe5b6020026020010151101561105c5760405162461bcd60e51b815260040180806020018281038252602b815260200180613fd0602b913960400191505060405180910390fd5b6110c58686600081811061106c57fe5b905060200201356001600160a01b0316336110ab8c8a8a600081811061108e57fe5b905060200201356001600160a01b03168b8b6001818110610e0957fe5b856000815181106110b857fe5b60200260200101516130ee565b611105898388888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525030925061324b915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d8360018551038151811061114457fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561118257600080fd5b505af1158015611196573d6000803e3d6000fd5b505050506000806111b084600186510381518110610d6a57fe5b915091506111be8683613570565b600754610e96906001600160a01b031682613570565b6111dc612d0d565b6001600160a01b03166111ed6115dd565b6001600160a01b031614611236576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561129657600080fd5b505af11580156112aa573d6000803e3d6000fd5b505050506040513d60208110156112c057600080fd5b5050505050565b60606112d16114b7565b15611316576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b81428110156113565760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b6000806113628a612e4c565b915091506113a48b838a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061344b92505050565b935088846001865103815181106113b757fe5b602002602001015110156113fc5760405162461bcd60e51b815260040180806020018281038252602b815260200180613fd0602b913960400191505060405180910390fd5b610e248888600081811061140c57fe5b905060200201356001600160a01b03163361142e8e8c8c6000818110610dec57fe5b876000815181106110b857fe5b611443612d0d565b6001600160a01b03166114546115dd565b6001600160a01b03161461149d576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b6114a5613668565b565b600754600160a01b900460ff1681565b600054600160a01b900460ff1690565b6114cf612d0d565b6001600160a01b03166114e06115dd565b6001600160a01b031614611529576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61157b612d0d565b6001600160a01b031661158c6115dd565b6001600160a01b0316146115d5576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b6114a561370b565b6000546001600160a01b031690565b6115f46114b7565b15611639576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b80428110156116795760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316858560008181106116b057fe5b905060200201356001600160a01b03166001600160a01b031614611709576040805162461bcd60e51b815260206004820152601d60248201526000805160206141ce833981519152604482015290519081900360640190fd5b60003490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561176957600080fd5b505af115801561177d573d6000803e3d6000fd5b505050505060008061178e83612e4c565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6117ef8c8b8b60008181106117d257fe5b905060200201356001600160a01b03168c8c6001818110610e0957fe5b846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561183f57600080fd5b505af1158015611853573d6000803e3d6000fd5b505050506040513d602081101561186957600080fd5b505161187157fe5b6007546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290517f00000000000000000000000000000000000000000000000000000000000000009092169163a9059cbb916044808201926020929091908290030181600087803b1580156118e857600080fd5b505af11580156118fc573d6000803e3d6000fd5b505050506040513d602081101561191257600080fd5b505161191a57fe5b60008888600019810181811061192c57fe5b905060200201356001600160a01b03166001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561199157600080fd5b505afa1580156119a5573d6000803e3d6000fd5b505050506040513d60208110156119bb57600080fd5b50516040805160208b810282810182019093528b82529293506119fd928e928d918d9182918501908490808284376000920191909152508c9250613794915050565b89611aaf828b8b6000198101818110611a1257fe5b905060200201356001600160a01b03166001600160a01b03166370a082318b6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015611a7757600080fd5b505afa158015611a8b573d6000803e3d6000fd5b505050506040513d6020811015611aa157600080fd5b50519063ffffffff613a6516565b1015611aec5760405162461bcd60e51b815260040180806020018281038252602b815260200180613fd0602b913960400191505060405180910390fd5b5050505050505050505050565b6005546001600160a01b031681565b6060611b126114b7565b15611b57576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b8142811015611b975760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686866000818110611bce57fe5b905060200201356001600160a01b03166001600160a01b031614611c235760405162461bcd60e51b81526004018080602001828103825260238152602001806140256023913960400191505060405180910390fd5b600080611c2f34612e4c565b91509150611c718a838a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061344b92505050565b93508884600186510381518110611c8457fe5b60200260200101511015611cc95760405162461bcd60e51b81526004018080602001828103825260318152602001806140726031913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0611d1f8387600081518110611d0957fe5b6020026020010151613ac790919063ffffffff16565b6040518263ffffffff1660e01b81526004016000604051808303818588803b158015611d4a57600080fd5b505af1158015611d5e573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb611da38c8b8b60008181106117d257fe5b86600081518110611db057fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611e0757600080fd5b505af1158015611e1b573d6000803e3d6000fd5b505050506040513d6020811015611e3157600080fd5b5051611e3957fe5b6007546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290517f00000000000000000000000000000000000000000000000000000000000000009092169163a9059cbb916044808201926020929091908290030181600087803b158015611eb057600080fd5b505af1158015611ec4573d6000803e3d6000fd5b505050506040513d6020811015611eda57600080fd5b5051611ee257fe5b611f228a858a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c925061324b915050565b611f338185600081518110611d0957fe5b341115611f5657611f5633611f4f8387600081518110611d0957fe5b3403613570565b5050509695505050505050565b6060611f6d6114b7565b15611fb2576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b8142811015611ff25760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061202957fe5b905060200201356001600160a01b03166001600160a01b031614612082576040805162461bcd60e51b815260206004820152601d60248201526000805160206141ce833981519152604482015290519081900360640190fd5b6120c08888888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d1192505050565b91506000806120d584600081518110610d6a57fe5b91509150348211156121185760405162461bcd60e51b8152600401808060200182810382526027815260200180613fa96027913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08560008151811061215457fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561218757600080fd5b505af115801561219b573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6121e08c8b8b60008181106117d257fe5b846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561223057600080fd5b505af1158015612244573d6000803e3d6000fd5b505050506040513d602081101561225a57600080fd5b505161226257fe5b6007546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290517f00000000000000000000000000000000000000000000000000000000000000009092169163a9059cbb916044808201926020929091908290030181600087803b1580156122d957600080fd5b505af11580156122ed573d6000803e3d6000fd5b505050506040513d602081101561230357600080fd5b505161230b57fe5b61234b8a858a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c925061324b915050565b61235b828263ffffffff613ac716565b341115611f5657611f5633833403613570565b7f000000000000000000000000000000000000000000000000000000000000000081565b606061239c6114b7565b156123e1576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b81428110156124215760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b60008061242d8a612e4c565b9150915061244188886000818110610dca57fe5b61245188886000818110610e3457fe5b60008888600019810181811061246357fe5b905060200201356001600160a01b03166001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156124c857600080fd5b505afa1580156124dc573d6000803e3d6000fd5b505050506040513d60208110156124f257600080fd5b50516040805160208b810282810182019093528b8252929350612534928f928d918d9182918501908490808284376000920191909152508c9250613794915050565b89612549828b8b6000198101818110611a1257fe5b10156125865760405162461bcd60e51b815260040180806020018281038252602b815260200180613fd0602b913960400191505060405180910390fd5b50505050979650505050505050565b6007546001600160a01b031681565b60065481565b6125b2612d0d565b6001600160a01b03166125c36115dd565b6001600160a01b03161461260c576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b600780546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f27aae5db36d94179909d019ae0b1ac7c16d96d953148f63c0f6a0a9c8ead79ee9181900360200190a150565b6126686114b7565b156126ad576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b80428110156126ed5760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585600019810181811061272757fe5b905060200201356001600160a01b03166001600160a01b03161461277c5760405162461bcd60e51b81526004018080602001828103825260318152602001806141566031913960400191505060405180910390fd5b6127d18585600081811061278c57fe5b905060200201356001600160a01b0316336127cb8b898960008181106127ae57fe5b905060200201356001600160a01b03168a8a6001818110610e0957fe5b8a6130ee565b61281088868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250613794915050565b604080516370a0823160e01b815230600482015290516000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561287a57600080fd5b505afa15801561288e573d6000803e3d6000fd5b505050506040513d60208110156128a457600080fd5b50519050868110156128e75760405162461bcd60e51b81526004018080602001828103825260288152602001806140ed6028913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561294d57600080fd5b505af1158015612961573d6000803e3d6000fd5b5050505060008061297183612e4c565b9150915061297f8683613570565b600754611aec906001600160a01b031682613570565b61299d612d0d565b6001600160a01b03166129ae6115dd565b6001600160a01b0316146129f7576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b60068190556040805182815290517fc86ab5ae638c0e95d21e0d47f77aa3a65ded219f7b70bc6ea894107f437d56369181900360200190a150565b61271081565b6060612a426114b7565b15612a87576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b8142811015612ac75760405162461bcd60e51b815260040180806020018281038252602a815260200180613ffb602a913960400191505060405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866000198101818110612b0157fe5b905060200201356001600160a01b03166001600160a01b031614612b5a576040805162461bcd60e51b815260206004820152601d60248201526000805160206141ce833981519152604482015290519081900360640190fd5b612b988989888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612d1192505050565b91508682600081518110612ba857fe5b6020026020010151111561105c5760405162461bcd60e51b8152600401808060200182810382526027815260200180613fa96027913960400191505060405180910390fd5b6004546001600160a01b031681565b612c04612d0d565b6001600160a01b0316612c156115dd565b6001600160a01b031614612c5e576040805162461bcd60e51b81526020600482018190526024820152600080516020614136833981519152604482015290519081900360640190fd5b6001600160a01b038116612ca35760405162461bcd60e51b8152600401808060200182810382526026815260200180613f836026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b3390565b6060600282511015612d58576040805162461bcd60e51b815260206004820152601d60248201526000805160206141ce833981519152604482015290519081900360640190fd5b815167ffffffffffffffff81118015612d7057600080fd5b50604051908082528060200260200182016040528015612d9a578160200160208202803683370190505b5090508281600183510381518110612dae57fe5b60209081029190910101528151600019015b8015612e4457600080612dfd87866001860381518110612ddc57fe5b6020026020010151878681518110612df057fe5b6020026020010151613b28565b91509150612e1f848481518110612e1057fe5b60200260200101518383613bef565b846001850381518110612e2e57fe5b6020908102919091010152505060001901612dc0565b509392505050565b600654600554604080516370a0823160e01b81523360048201529051600093849390926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015612ea157600080fd5b505afa158015612eb5573d6000803e3d6000fd5b505050506040513d6020811015612ecb57600080fd5b505110612edd57508190506000612f1e565b600754612f099061271090612efd908690600160a01b900460ff16613ce9565b9063ffffffff613d4216565b9050612f1b838263ffffffff613a6516565b91505b915091565b6000806000612f328585613da9565b60035491935091506060906001600160a01b03888116911614612f56576002612f59565b60015b805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612fdd5780601f10612fb257610100808354040283529160200191612fdd565b820191906000526020600020905b815481529060010190602001808311612fc057829003601f168201915b5050505050905086838360405160200180836001600160a01b03166001600160a01b031660601b8152601401826001600160a01b03166001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001208260405160200180806001600160f81b0319815250600101846001600160a01b03166001600160a01b031660601b815260140183815260200182805190602001908083835b602083106130a25780518252601f199092019160209182019101613083565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040528051906020012060001c93505050509392505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b602083106131735780518252601f199092019160209182019101613154565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146131d5576040519150601f19603f3d011682016040523d82523d6000602084013e6131da565b606091505b5091509150818015613208575080511580613208575080806020019051602081101561320557600080fd5b50515b6132435760405162461bcd60e51b81526004018080602001828103825260248152602001806141aa6024913960400191505060405180910390fd5b505050505050565b60005b60018351038110156112c05760008084838151811061326957fe5b602002602001015185846001018151811061328057fe5b60200260200101519150915060006132988383613da9565b50905060008785600101815181106132ac57fe5b60200260200101519050600080836001600160a01b0316866001600160a01b0316146132da578260006132de565b6000835b91509150600060028a510388106132f55788613316565b6133168c878c8b6002018151811061330957fe5b6020026020010151612f23565b90506133238c8888612f23565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015613360576020820181803683370190505b506040518563ffffffff1660e01b815260040180858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156133d15781810151838201526020016133b9565b50505050905090810190601f1680156133fe5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561342057600080fd5b505af1158015613434573d6000803e3d6000fd5b50506001909901985061324e975050505050505050565b6060600282511015613492576040805162461bcd60e51b815260206004820152601d60248201526000805160206141ce833981519152604482015290519081900360640190fd5b815167ffffffffffffffff811180156134aa57600080fd5b506040519080825280602002602001820160405280156134d4578160200160208202803683370190505b50905082816000815181106134e557fe5b60200260200101818152505060005b6001835103811015612e445760008061352a8786858151811061351357fe5b6020026020010151878660010181518110612df057fe5b9150915061354c84848151811061353d57fe5b60200260200101518383613e87565b84846001018151811061355b57fe5b602090810291909101015250506001016134f4565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b602083106135bc5780518252601f19909201916020918201910161359d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461361e576040519150601f19603f3d011682016040523d82523d6000602084013e613623565b606091505b50509050806136635760405162461bcd60e51b81526004018080602001828103825260238152602001806141876023913960400191505060405180910390fd5b505050565b6136706114b7565b6136b8576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6136ee612d0d565b604080516001600160a01b039092168252519081900360200190a1565b6137136114b7565b15613758576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586136ee612d0d565b60005b6001835103811015613a5f576000808483815181106137b257fe5b60200260200101518584600101815181106137c957fe5b60200260200101519150915060006137e18383613da9565b50905060006137f1888585612f23565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561383257600080fd5b505afa158015613846573d6000803e3d6000fd5b505050506040513d606081101561385c57600080fd5b5080516020909101516001600160701b0391821693501690506000806001600160a01b038a811690891614613892578284613895565b83835b915091506138f3828b6001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015611a7757600080fd5b9550613900868383613e87565b945050505050600080856001600160a01b0316886001600160a01b03161461392a5782600061392e565b6000835b91509150600060028c51038a10613945578a613959565b6139598d898e8d6002018151811061330957fe5b604080516000808252602082019283905263022c0d9f60e01b835260248201878152604483018790526001600160a01b038086166064850152608060848501908152845160a48601819052969750908c169563022c0d9f958a958a958a9591949193919260c486019290918190849084905b838110156139e35781810151838201526020016139cb565b50505050905090810190601f168015613a105780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015613a3257600080fd5b505af1158015613a46573d6000803e3d6000fd5b50506001909b019a506137979950505050505050505050565b50505050565b600082821115613abc576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b600082820183811015613b21576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000806000613b378585613da9565b509050600080613b48888888612f23565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015613b8057600080fd5b505afa158015613b94573d6000803e3d6000fd5b505050506040513d6060811015613baa57600080fd5b5080516020909101516001600160701b0391821693501690506001600160a01b0387811690841614613bdd578082613be0565b81815b90999098509650505050505050565b6000808411613c2f5760405162461bcd60e51b815260040180806020018281038252602b815260200180613fd0602b913960400191505060405180910390fd5b600083118015613c3f5750600082115b613c7a5760405162461bcd60e51b81526004018080602001828103825260278152602001806140c66027913960400191505060405180910390fd5b6000613c9e612710613c92868863ffffffff613ce916565b9063ffffffff613ce916565b90506000613cc2613cae33610a9f565b6126f703613c92868963ffffffff613a6516565b9050613cdf6001828481613cd257fe5b049063ffffffff613ac716565b9695505050505050565b600082613cf857506000613ac1565b82820282848281613d0557fe5b0414613b215760405162461bcd60e51b81526004018080602001828103825260218152602001806141156021913960400191505060405180910390fd5b6000808211613d98576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613da157fe5b049392505050565b600080826001600160a01b0316846001600160a01b03161415613dfd5760405162461bcd60e51b81526004018080602001828103825260238152602001806140a36023913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610613e1d578284613e20565b83835b90925090506001600160a01b038216613e80576040805162461bcd60e51b815260206004820152601c60248201527f50616e63616b654c6962726172793a205a45524f5f4144445245535300000000604482015290519081900360640190fd5b9250929050565b6000808411613ec75760405162461bcd60e51b815260040180806020018281038252602a815260200180614048602a913960400191505060405180910390fd5b600083118015613ed75750600082115b613f125760405162461bcd60e51b81526004018080602001828103825260278152602001806140c66027913960400191505060405180910390fd5b6000613f31613f2033610a9f565b86906126f70363ffffffff613ce916565b90506000613f45828563ffffffff613ce916565b90506000613f6b83613f5f8861271063ffffffff613ce916565b9063ffffffff613ac716565b9050808281613f7657fe5b0497965050505050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737353617665596f757250616e63616b653a204558434553534956455f494e5055545f414d4f554e5453617665596f757250616e63616b653a20494e53554646494349454e545f4f55545055545f414d4f554e5453617665596f757250616e63616b653a20646561646c696e6520666f722074726164652070617373656453617665596f757250616e63616b65526f757465723a20494e56414c49445f5041544853617665596f757250616e63616b653a20494e53554646494349454e545f494e5055545f414d4f554e5453617665596f757250616e63616b65526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e5450616e63616b654c6962726172793a204944454e544943414c5f41444452455353455353617665596f757250616e63616b653a20494e53554646494349454e545f4c495155494449545953617665596f757250616e63616b653a20736c6970706167652073657474696e6720746f206c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657253617665596f757250616e63616b653a20424e422068617320746f20626520746865206c6173742070617468206974656d5472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c454453617665596f757250616e63616b653a20494e56414c49445f50415448000000a26469706673582212206449fd4ead6d488462834544fc6cea8c1145e0c62ab73feab818a0d6b0fce0ba64736f6c63430006060033",
  "devdoc": {
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawBnb()": {
        "details": "Withdraw BNB that somehow ended up in the contract."
      },
      "withdrawErc20Token(address,address,uint256)": {
        "details": "Withdraw any erc20 compliant tokens that somehow ended up in the contract."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 583,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1138,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "pancakeInitCodeV1",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1140,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "pancakeInitCodeV2",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1142,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "pancakeFactoryV1",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1144,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "pancakeFactoryV2",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1146,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "saveYourAssetsToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)542"
      },
      {
        "astId": 1148,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "balanceThreshold",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1150,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1152,
        "contract": "contracts/SaveYourPancakeRouter.sol:SaveYourPancakeRouter",
        "label": "swapFee",
        "offset": 20,
        "slot": "7",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)542": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}